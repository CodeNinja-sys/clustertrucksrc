Shader "Hidden/Deluxe/TonemapperColorHD" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
 _Toe ("Toe", Vector) = (0.3,0.59,0.11,1)
 _Shoulder ("Shoulder", Vector) = (0.3,0.59,0.11,1)
 _K ("K", Float) = 0.2
 _Crossover ("Crossover", Float) = 0.2
 _Tint ("Tint", Color) = (1,1,1,1)
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 55095
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Offsets     c3       1
					//   _Sharpness   c4       1
					//   _Saturation  c5       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c6, -1, 1, 0.200000003, -0.0250000004
					    def c7, 0, 0.298999995, 0.587000012, 0.114
					    def c8, 0.30102998, 1.44269502, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c6
					    mad_pp r0.zw, c3.xyxy, r0.xyyx, v0.xyxy
					    texld_pp r1, r0.zwzw, s0
					    add_pp r0.zw, -c3.xyxy, v0.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r0.xz, c3.xyyw, r0.xyyw, v0.xyyw
					    texld_pp r3, r0.xzzw, s0
					    add_pp r0.xz, c3.xyyw, v0.xyyw
					    texld_pp r4, r0.xzzw, s0
					    add_pp r0.xzw, r3.xyyz, r4.xyyz
					    texld_pp r3, v0, s0
					    add_pp r0.xzw, r0, r3.xyyz
					    add_pp r0.xzw, r2.xyyz, r0
					    add_pp r0.xzw, r1.xyyz, r0
					    mad_pp r0.xzw, r0, -c6.z, r3.xyyz
					    max_pp r1.xyz, r0.xzww, c6.w
					    min r0.xzw, r1.xyyz, -c6.w
					    mad_pp r0.xzw, r0, c4.x, r3.xyyz
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0.xzww, c7.x
					    dp3_pp r0.x, r1, c7.yzww
					    lrp_pp r2.xyz, c5.x, r1, r0.x
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mov r0.x, c8.x
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c8.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c6.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.y
					    mad r2.xyz, r1, -r0.x, c1.x
					    mad r3.xyz, r1, r0.x, c0.w
					    mad r1.xyz, r1, r0.x, -c0.x
					    mul_pp r3.xyz, r3, c1.w
					    cmp_pp r0.xyz, r2, r3, r0.yzww
					    mul r2.xyz, r1, c0.z
					    mul r2.xyz, r2, c8.y
					    exp r4.x, r2.x
					    exp r4.y, r2.y
					    exp r4.z, r2.z
					    add r2.xyz, r4, c6.y
					    rcp r4.x, r2.x
					    rcp r4.y, r2.y
					    rcp r4.z, r2.z
					    mul_pp r2.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r3, r2
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 61 instruction slots used (5 texture, 56 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat15);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Offsets     c3       1
					//   _Sharpness   c4       1
					//   _Saturation  c5       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c6, -1, 1, 0.200000003, -0.0250000004
					    def c7, 0, 0.298999995, 0.587000012, 0.114
					    def c8, 0.30102998, 1.44269502, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c6
					    mad_pp r0.zw, c3.xyxy, r0.xyyx, v0.xyxy
					    texld_pp r1, r0.zwzw, s0
					    add_pp r0.zw, -c3.xyxy, v0.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r0.xz, c3.xyyw, r0.xyyw, v0.xyyw
					    texld_pp r3, r0.xzzw, s0
					    add_pp r0.xz, c3.xyyw, v0.xyyw
					    texld_pp r4, r0.xzzw, s0
					    add_pp r0.xzw, r3.xyyz, r4.xyyz
					    texld_pp r3, v0, s0
					    add_pp r0.xzw, r0, r3.xyyz
					    add_pp r0.xzw, r2.xyyz, r0
					    add_pp r0.xzw, r1.xyyz, r0
					    mad_pp r0.xzw, r0, -c6.z, r3.xyyz
					    max_pp r1.xyz, r0.xzww, c6.w
					    min r0.xzw, r1.xyyz, -c6.w
					    mad_pp r0.xzw, r0, c4.x, r3.xyyz
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0.xzww, c7.x
					    dp3_pp r0.x, r1, c7.yzww
					    lrp_pp r2.xyz, c5.x, r1, r0.x
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mov r0.x, c8.x
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c8.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c6.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.y
					    mad r2.xyz, r1, -r0.x, c1.x
					    mad r3.xyz, r1, r0.x, c0.w
					    mad r1.xyz, r1, r0.x, -c0.x
					    mul_pp r3.xyz, r3, c1.w
					    cmp_pp r0.xyz, r2, r3, r0.yzww
					    mul r2.xyz, r1, c0.z
					    mul r2.xyz, r2, c8.y
					    exp r4.x, r2.x
					    exp r4.y, r2.y
					    exp r4.z, r2.z
					    add r2.xyz, r4, c6.y
					    rcp r4.x, r2.x
					    rcp r4.y, r2.y
					    rcp r4.z, r2.z
					    mul_pp r2.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r3, r2
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 61 instruction slots used (5 texture, 56 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat15);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c3, 0.30102998, 1.44269502, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mov_pp oC0.w, r0.w
					    mov r0.xz, c3
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c3.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c3.z
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.z
					    mad r2.xyz, r1, r0.x, c0.w
					    mul_pp r2.xyz, r2, c1.w
					    mad r3.xyz, r1, -r0.x, c1.x
					    mad r1.xyz, r1, r0.x, -c0.x
					    cmp_pp r0.xyz, r3, r2, r0.yzww
					    mul r3.xyz, r1, c0.z
					    mul r3.xyz, r3, c3.y
					    exp r4.x, r3.x
					    exp r4.y, r3.y
					    exp r4.z, r3.z
					    add r3.xyz, r4, c3.z
					    rcp r4.x, r3.x
					    rcp r4.y, r3.y
					    rcp r4.z, r3.z
					    mul_pp r3.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r2, r3
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 41 instruction slots used (1 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec3 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec3 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c3, 0.30102998, 1.44269502, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mov_pp oC0.w, r0.w
					    mov r0.xz, c3
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c3.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c3.z
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.z
					    mad r2.xyz, r1, r0.x, c0.w
					    mul_pp r2.xyz, r2, c1.w
					    mad r3.xyz, r1, -r0.x, c1.x
					    mad r1.xyz, r1, r0.x, -c0.x
					    cmp_pp r0.xyz, r3, r2, r0.yzww
					    mul r3.xyz, r1, c0.z
					    mul r3.xyz, r3, c3.y
					    exp r4.x, r3.x
					    exp r4.y, r3.y
					    exp r4.z, r3.z
					    add r3.xyz, r4, c3.z
					    rcp r4.x, r3.x
					    rcp r4.y, r3.y
					    rcp r4.z, r3.z
					    mul_pp r3.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r2, r3
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 41 instruction slots used (1 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec3 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec3 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 84312
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[9];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _IsLinear;
					//   sampler3D _Lut0;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Offsets     c3       1
					//   _Sharpness   c4       1
					//   _Saturation  c5       1
					//   _Lut0Params  c6       1
					//   _IsLinear    c7       1
					//   _MainTex     s0       1
					//   _Lut0        s1       1
					//
					
					    ps_3_0
					    def c8, -1, 1, 0.200000003, -0.0250000004
					    def c9, 0, 0.298999995, 0.587000012, 0.114
					    def c10, 0.30102998, 1.44269502, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    mov r0.xy, c8
					    mad_pp r0.zw, c3.xyxy, r0.xyyx, v0.xyxy
					    texld_pp r1, r0.zwzw, s0
					    add_pp r0.zw, -c3.xyxy, v0.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r0.xz, c3.xyyw, r0.xyyw, v0.xyyw
					    texld_pp r3, r0.xzzw, s0
					    add_pp r0.xz, c3.xyyw, v0.xyyw
					    texld_pp r4, r0.xzzw, s0
					    add_pp r0.xzw, r3.xyyz, r4.xyyz
					    texld_pp r3, v0, s0
					    add_pp r0.xzw, r0, r3.xyyz
					    add_pp r0.xzw, r2.xyyz, r0
					    add_pp r0.xzw, r1.xyyz, r0
					    mad_pp r0.xzw, r0, -c8.z, r3.xyyz
					    max_pp r1.xyz, r0.xzww, c8.w
					    min r0.xzw, r1.xyyz, -c8.w
					    mad_pp r0.xzw, r0, c4.x, r3.xyyz
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0.xzww, c9.x
					    dp3_pp r0.x, r1, c9.yzww
					    lrp_pp r2.xyz, c5.x, r1, r0.x
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mov r0.x, c10.x
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c10.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c8.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.y
					    mad r2.xyz, r1, -r0.x, c1.x
					    mad r3.xyz, r1, r0.x, c0.w
					    mad r1.xyz, r1, r0.x, -c0.x
					    mul_pp r3.xyz, r3, c1.w
					    cmp_pp r0.xyz, r2, r3, r0.yzww
					    mul r2.xyz, r1, c0.z
					    mul r2.xyz, r2, c10.y
					    exp r4.x, r2.x
					    exp r4.y, r2.y
					    exp r4.z, r2.z
					    add r2.xyz, r4, c8.y
					    rcp r4.x, r2.x
					    rcp r4.y, r2.y
					    rcp r4.z, r2.z
					    mul_pp r2.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r3, r2
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c7.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c6.y, c6.z
					    texld r1, r1, s1
					    mad r1.xyz, r1, r1, -r0
					    mad_pp r0.xyz, c6.x, r1, r0
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 72 instruction slots used (6 texture, 66 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _Lut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat15);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Lut0Params.yyy + _Lut0Params.zzz;
					    u_xlat1 = texture(_Lut0, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _2dLut0;
					//   float _IsLinear;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Offsets     c3       1
					//   _Sharpness   c4       1
					//   _Saturation  c5       1
					//   _Lut0Params  c6       1
					//   _IsLinear    c7       1
					//   _MainTex     s0       1
					//   _2dLut0      s1       1
					//
					
					    ps_3_0
					    def c8, -1, 1, 0.200000003, -0.0250000004
					    def c9, 0, 0.298999995, 0.587000012, 0.114
					    def c10, 0.30102998, 1.44269502, 0.5, 0
					    def c11, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c3, v0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, c3, v0
					    texld_pp r1, r1, s0
					    mov r2.xy, c8
					    mad_pp r3, c3.xyxy, r2.xyyx, v0.xyxy
					    texld_pp r4, r3, s0
					    texld_pp r3, r3.zwzw, s0
					    add_pp r1.xyz, r1, r4
					    texld_pp r4, v0, s0
					    add_pp r1.xyz, r1, r4
					    add_pp r0.xyz, r0, r1
					    add_pp r0.xyz, r3, r0
					    mad_pp r0.xyz, r0, -c8.z, r4
					    max_pp r1.xyz, r0, c8.w
					    min r0.xyz, r1, -c8.w
					    mad_pp r0.xyz, r0, c4.x, r4
					    mov_pp oC0.w, r4.w
					    max_pp r1.xyz, r0, c9.x
					    dp3_pp r0.x, r1, c9.yzww
					    lrp_pp r2.xzw, c5.x, r1.xyyz, r0.x
					    log_pp r0.x, r2.x
					    log_pp r0.y, r2.z
					    log_pp r0.z, r2.w
					    mov r1.xz, c10
					    mad r2.xzw, r0.xyyz, r1.x, -c1.x
					    mul r2.xzw, r2, c1.z
					    mul r2.xzw, r2, c10.y
					    exp r3.x, r2.x
					    exp r3.y, r2.z
					    exp r3.z, r2.w
					    add r2.xzw, r3.xyyz, c8.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.z
					    rcp r3.z, r2.w
					    mad_pp r2.xyz, c1.y, -r3, r2.y
					    mad r3.xyz, r0, -r1.x, c1.x
					    mad r4.xyz, r0, r1.x, c0.w
					    mad r0.xyz, r0, r1.x, -c0.x
					    mul_pp r1.xyw, r4.xyzz, c1.w
					    cmp_pp r2.xyz, r3, r1.xyww, r2
					    mul r3.xyz, r0, c0.z
					    mul r3.xyz, r3, c10.y
					    exp r4.x, r3.x
					    exp r4.y, r3.y
					    exp r4.z, r3.z
					    add r3.xyz, r4, c8.y
					    rcp r4.x, r3.x
					    rcp r4.y, r3.y
					    rcp r4.z, r3.z
					    mul_pp r3.xyz, r4, c0.y
					    cmp_pp r1.xyw, r0.xyzz, r1, r3.xyzz
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r2.w, r0.w
					    mul_sat_pp r0.xyz, r0, r2.w
					    lrp_pp r3.xyz, r0, r1.xyww, r2
					    lrp_pp r4.xyz, r0, r2, r1.xyww
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    log r2.x, r0.x
					    log r2.y, r0.y
					    log r2.z, r0.z
					    mul r1.xyw, r2.xyzz, c7.x
					    exp r0.w, r1.w
					    mul r1.w, r0.w, c6.w
					    frc r2.x, r1.w
					    add r1.w, r1.w, -r2.x
					    mad r0.w, r0.w, c6.w, -r1.w
					    exp r1.y, r1.y
					    exp r2.y, r1.x
					    add r2.z, -r1.y, c8.y
					    mul r1.xy, r2.yzzw, c6.w
					    mul r2.xy, r1.z, c6.yzzw
					    mad r1.yz, r1.xxyw, c6, r2.xxyw
					    mad r1.x, r1.w, c6.z, r1.y
					    mov r2.z, c6.z
					    mad r1.yw, r2.z, c11.xxzy, r1.xxzz
					    texld r2, r1.xzzw, s1
					    texld r1, r1.ywzw, s1
					    lrp r3.xyz, r0.w, r1, r2
					    mad r1.xyz, r3, r3, -r0
					    mad_pp r0.xyz, c6.x, r1, r0
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 83 instruction slots used (7 texture, 76 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _2dLut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat15 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat15);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.w = (-u_xlat1.y) + 1.0;
					    u_xlat1.xy = u_xlat1.xw * _Lut0Params.ww;
					    u_xlat2.xy = _Lut0Params.yz * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.xy * _Lut0Params.yz + u_xlat2.xy;
					    u_xlat15 = u_xlat1.z * _Lut0Params.w;
					    u_xlat15 = floor(u_xlat15);
					    u_xlat2.x = u_xlat15 * _Lut0Params.z + u_xlat2.y;
					    u_xlat15 = u_xlat1.z * _Lut0Params.w + (-u_xlat15);
					    u_xlat1.x = _Lut0Params.z;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_2dLut0, u_xlat2.xz);
					    u_xlat1 = texture(_2dLut0, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _IsLinear;
					//   sampler3D _Lut0;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Lut0Params  c3       1
					//   _IsLinear    c4       1
					//   _MainTex     s0       1
					//   _Lut0        s1       1
					//
					
					    ps_3_0
					    def c5, 0.30102998, 1.44269502, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    texld_pp r0, v0, s0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mov_pp oC0.w, r0.w
					    mov r0.xz, c5
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c5.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c5.z
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r0.yzw, c1.y, -r3.xxyz, r0.z
					    mad r2.xyz, r1, r0.x, c0.w
					    mul_pp r2.xyz, r2, c1.w
					    mad r3.xyz, r1, -r0.x, c1.x
					    mad r1.xyz, r1, r0.x, -c0.x
					    cmp_pp r0.xyz, r3, r2, r0.yzww
					    mul r3.xyz, r1, c0.z
					    mul r3.xyz, r3, c5.y
					    exp r4.x, r3.x
					    exp r4.y, r3.y
					    exp r4.z, r3.z
					    add r3.xyz, r4, c5.z
					    rcp r4.x, r3.x
					    rcp r4.y, r3.y
					    rcp r4.z, r3.z
					    mul_pp r3.xyz, r4, c0.y
					    cmp_pp r2.xyz, r1, r2, r3
					    mov r3.x, c1.x
					    add r0.w, r3.x, -c0.x
					    rcp r1.w, r0.w
					    mul_sat_pp r1.xyz, r1.w, r1
					    lrp_pp r3.xyz, r1, r2, r0
					    lrp_pp r4.xyz, r1, r0, r2
					    cmp_sat_pp r0.xyz, r0.w, r4, r3
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c4.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c3.y, c3.z
					    texld r1, r1, s1
					    mad r1.xyz, r1, r1, -r0
					    mad_pp r0.xyz, c3.x, r1, r0
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 52 instruction slots used (2 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5[3];
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _Lut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec3 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Lut0Params.yyy + _Lut0Params.zzz;
					    u_xlat1 = texture(_Lut0, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _2dLut0;
					//   float _IsLinear;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _Tint        c2       1
					//   _Lut0Params  c3       1
					//   _IsLinear    c4       1
					//   _MainTex     s0       1
					//   _2dLut0      s1       1
					//
					
					    ps_3_0
					    def c5, 0.30102998, 1.44269502, 1, 0.5
					    def c6, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mov_pp oC0.w, r0.w
					    mov r0.xzw, c5
					    mad r2.xyz, r1, r0.x, -c1.x
					    mul r2.xyz, r2, c1.z
					    mul r2.xyz, r2, c5.y
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    add r2.xyz, r3, c5.z
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    mad_pp r2.xyz, c1.y, -r3, r0.z
					    mad r3.xyz, r1, r0.x, c0.w
					    mul_pp r3.xyz, r3, c1.w
					    mad r4.xyz, r1, -r0.x, c1.x
					    mad r0.xyz, r1, r0.x, -c0.x
					    cmp_pp r1.xyz, r4, r3, r2
					    mul r2.xyz, r0, c0.z
					    mul r2.xyz, r2, c5.y
					    exp r4.x, r2.x
					    exp r4.y, r2.y
					    exp r4.z, r2.z
					    add r2.xyz, r4, c5.z
					    rcp r4.x, r2.x
					    rcp r4.y, r2.y
					    rcp r4.z, r2.z
					    mul_pp r2.xyz, r4, c0.y
					    cmp_pp r2.xyz, r0, r3, r2
					    mov r3.x, c1.x
					    add r1.w, r3.x, -c0.x
					    rcp r2.w, r1.w
					    mul_sat_pp r0.xyz, r0, r2.w
					    lrp_pp r3.xyz, r0, r2, r1
					    lrp_pp r4.xyz, r0, r1, r2
					    cmp_sat_pp r0.xyz, r1.w, r4, r3
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c4.x
					    exp r1.y, r1.y
					    add r2.z, -r1.y, c5.z
					    exp r2.y, r1.x
					    exp r1.x, r1.z
					    mul r1.yz, r2, c3.w
					    mul r2.xy, r0.w, c3.yzzw
					    mad r2.yz, r1, c3, r2.xxyw
					    mul r0.w, r1.x, c3.w
					    frc r1.y, r0.w
					    add r0.w, r0.w, -r1.y
					    mad r2.x, r0.w, c3.z, r2.y
					    mad r0.w, r1.x, c3.w, -r0.w
					    mov r1.z, c3.z
					    mad r1.xy, r1.z, c6, r2.xzzw
					    texld r2, r2.xzzw, s1
					    texld r1, r1, s1
					    lrp r3.xyz, r0.w, r1, r2
					    mad r1.xyz, r3, r3, -r0
					    mad_pp r0.xyz, c3.x, r1, r0
					    mul_pp oC0.xyz, r0, c2
					
					// approximately 64 instruction slots used (3 texture, 61 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Toe;
						vec4 _Shoulder;
						vec4 unused_0_3;
						vec4 _Tint;
						vec4 unused_0_5[3];
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _2dLut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					bvec3 u_xlatb4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Shoulder.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * _Shoulder.zzz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = _Shoulder.yyy / u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + _Toe.www;
					    u_xlat2.xyz = u_xlat2.xyz * _Shoulder.www;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.30102998, 0.30102998, 0.30102998) + (-_Toe.xxx);
					    u_xlatb4.xyz = lessThan(_Shoulder.xxxx, u_xlat3.xyzx).xyz;
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, _Toe.xxxx).xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat1.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat1.z : u_xlat2.z;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat4.xyz = u_xlat0.xyz * _Toe.zzz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = _Toe.yyy / u_xlat4.xyz;
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat2.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat2.y;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat2.z;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat15 = (-_Toe.x) + _Shoulder.x;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlatb15 = _Shoulder.x<_Toe.x;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.w = (-u_xlat1.y) + 1.0;
					    u_xlat1.xy = u_xlat1.xw * _Lut0Params.ww;
					    u_xlat2.xy = _Lut0Params.yz * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.xy * _Lut0Params.yz + u_xlat2.xy;
					    u_xlat15 = u_xlat1.z * _Lut0Params.w;
					    u_xlat15 = floor(u_xlat15);
					    u_xlat2.x = u_xlat15 * _Lut0Params.z + u_xlat2.y;
					    u_xlat15 = u_xlat1.z * _Lut0Params.w + (-u_xlat15);
					    u_xlat1.x = _Lut0Params.z;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_2dLut0, u_xlat2.xz);
					    u_xlat1 = texture(_2dLut0, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
}
 }
}
Fallback Off
}