Shader "Hidden/Deluxe/TonemapperLuminosity" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
 _Toe ("Toe", Vector) = (0.3,0.59,0.11,1)
 _Shoulder ("Shoulder", Vector) = (0.3,0.59,0.11,1)
 _K ("K", Float) = 0.2
 _Crossover ("Crossover", Float) = 0.2
 _Tint ("Tint", Color) = (1,1,1,1)
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 32918
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _K;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Offsets     c5       1
					//   _Sharpness   c6       1
					//   _Saturation  c7       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c8, -1, 1, 0.200000003, -0.0250000004
					    def c9, 0, 0.298999995, 0.587000012, 0.114
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c5, v0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, c5, v0
					    texld_pp r1, r1, s0
					    mov r2.xy, c8
					    mad_pp r2, c5.xyxy, r2.xyyx, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    add_pp r1.xyz, r1, r3
					    texld_pp r3, v0, s0
					    add_pp r1.xyz, r1, r3
					    add_pp r0.xyz, r0, r1
					    add_pp r0.xyz, r2, r0
					    mad_pp r0.xyz, r0, -c8.z, r3
					    max_pp r1.xyz, r0, c8.w
					    min r0.xyz, r1, -c8.w
					    mad_pp r0.xyz, r0, c6.x, r3
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0, c9.x
					    dp3_pp r0.x, r1, c9.yzww
					    lrp_pp r2.xyz, c7.x, r1, r0.x
					    dp3_pp r0.x, r2, c9.yzww
					    add r0.y, -r0.x, c3.x
					    mov r1, c0
					    cmp r1, r0.y, r1, c1
					    mov r3.x, c9.x
					    cmp r0.y, r0.y, r3.x, c2.x
					    mad r0.zw, r1.xyxy, r0.x, r1
					    rcp r0.x, r0.x
					    rcp r0.w, r0.w
					    mad_sat_pp r0.y, r0.z, r0.w, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_sat_pp r0.xyz, r0.x, r2
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 34 instruction slots used (5 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb1 = _Crossover<u_xlat12;
					    u_xlat2 = (bool(u_xlatb1)) ? _Shoulder : _Toe;
					    u_xlat1.x = u_xlatb1 ? _K : float(0.0);
					    u_xlat5.xy = u_xlat2.xy * vec2(u_xlat12) + u_xlat2.zw;
					    u_xlat5.x = u_xlat5.x / u_xlat5.y;
					    u_xlat1.x = u_xlat1.x + u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat12 = u_xlat1.x / u_xlat12;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _K;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Offsets     c5       1
					//   _Sharpness   c6       1
					//   _Saturation  c7       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c8, -1, 1, 0.200000003, -0.0250000004
					    def c9, 0, 0.298999995, 0.587000012, 0.114
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c5, v0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, c5, v0
					    texld_pp r1, r1, s0
					    mov r2.xy, c8
					    mad_pp r2, c5.xyxy, r2.xyyx, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    add_pp r1.xyz, r1, r3
					    texld_pp r3, v0, s0
					    add_pp r1.xyz, r1, r3
					    add_pp r0.xyz, r0, r1
					    add_pp r0.xyz, r2, r0
					    mad_pp r0.xyz, r0, -c8.z, r3
					    max_pp r1.xyz, r0, c8.w
					    min r0.xyz, r1, -c8.w
					    mad_pp r0.xyz, r0, c6.x, r3
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0, c9.x
					    dp3_pp r0.x, r1, c9.yzww
					    lrp_pp r2.xyz, c7.x, r1, r0.x
					    dp3_pp r0.x, r2, c9.yzww
					    add r0.y, -r0.x, c3.x
					    mov r1, c0
					    cmp r1, r0.y, r1, c1
					    mov r3.x, c9.x
					    cmp r0.y, r0.y, r3.x, c2.x
					    mad r0.zw, r1.xyxy, r0.x, r1
					    rcp r0.x, r0.x
					    rcp r0.w, r0.w
					    mad_sat_pp r0.y, r0.z, r0.w, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_sat_pp r0.xyz, r0.x, r2
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 34 instruction slots used (5 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb1 = _Crossover<u_xlat12;
					    u_xlat2 = (bool(u_xlatb1)) ? _Shoulder : _Toe;
					    u_xlat1.x = u_xlatb1 ? _K : float(0.0);
					    u_xlat5.xy = u_xlat2.xy * vec2(u_xlat12) + u_xlat2.zw;
					    u_xlat5.x = u_xlat5.x / u_xlat5.y;
					    u_xlat1.x = u_xlat1.x + u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat12 = u_xlat1.x / u_xlat12;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _K;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c5, 0.298999995, 0.587000012, 0.114, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    dp3_pp r1.x, r0, c5
					    add r1.y, -r1.x, c3.x
					    mov r2, c0
					    cmp r2, r1.y, r2, c1
					    mov r1.w, c5.w
					    cmp r1.y, r1.y, r1.w, c2.x
					    mad r1.zw, r2.xyxy, r1.x, r2
					    rcp r1.x, r1.x
					    rcp r1.w, r1.w
					    mad_sat_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mul_sat_pp r0.xyz, r0, r1.x
					    mov_pp oC0.w, r0.w
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb4 = _Crossover<u_xlat1;
					    u_xlat2 = (bool(u_xlatb4)) ? _Shoulder : _Toe;
					    u_xlat4 = u_xlatb4 ? _K : float(0.0);
					    u_xlat7.xy = u_xlat2.xy * vec2(u_xlat1) + u_xlat2.zw;
					    u_xlat7.x = u_xlat7.x / u_xlat7.y;
					    u_xlat4 = u_xlat4 + u_xlat7.x;
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat1 = u_xlat4 / u_xlat1;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _K;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c5, 0.298999995, 0.587000012, 0.114, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    dp3_pp r1.x, r0, c5
					    add r1.y, -r1.x, c3.x
					    mov r2, c0
					    cmp r2, r1.y, r2, c1
					    mov r1.w, c5.w
					    cmp r1.y, r1.y, r1.w, c2.x
					    mad r1.zw, r2.xyxy, r1.x, r2
					    rcp r1.x, r1.x
					    rcp r1.w, r1.w
					    mad_sat_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mul_sat_pp r0.xyz, r0, r1.x
					    mov_pp oC0.w, r0.w
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb4 = _Crossover<u_xlat1;
					    u_xlat2 = (bool(u_xlatb4)) ? _Shoulder : _Toe;
					    u_xlat4 = u_xlatb4 ? _K : float(0.0);
					    u_xlat7.xy = u_xlat2.xy * vec2(u_xlat1) + u_xlat2.zw;
					    u_xlat7.x = u_xlat7.x / u_xlat7.y;
					    u_xlat4 = u_xlat4 + u_xlat7.x;
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat1 = u_xlat4 / u_xlat1;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1);
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 75809
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _IsLinear;
					//   float _K;
					//   sampler3D _Lut0;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Offsets     c5       1
					//   _Sharpness   c6       1
					//   _Saturation  c7       1
					//   _Lut0Params  c8       1
					//   _IsLinear    c9       1
					//   _MainTex     s0       1
					//   _Lut0        s1       1
					//
					
					    ps_3_0
					    def c10, -1, 1, 0.200000003, -0.0250000004
					    def c11, 0, 0.298999995, 0.587000012, 0.114
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    add_pp r0.xy, -c5, v0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, c5, v0
					    texld_pp r1, r1, s0
					    mov r2.xy, c10
					    mad_pp r2, c5.xyxy, r2.xyyx, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    add_pp r1.xyz, r1, r3
					    texld_pp r3, v0, s0
					    add_pp r1.xyz, r1, r3
					    add_pp r0.xyz, r0, r1
					    add_pp r0.xyz, r2, r0
					    mad_pp r0.xyz, r0, -c10.z, r3
					    max_pp r1.xyz, r0, c10.w
					    min r0.xyz, r1, -c10.w
					    mad_pp r0.xyz, r0, c6.x, r3
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0, c11.x
					    dp3_pp r0.x, r1, c11.yzww
					    lrp_pp r2.xyz, c7.x, r1, r0.x
					    dp3_pp r0.x, r2, c11.yzww
					    add r0.y, -r0.x, c3.x
					    mov r1, c0
					    cmp r1, r0.y, r1, c1
					    mov r3.x, c11.x
					    cmp r0.y, r0.y, r3.x, c2.x
					    mad r0.zw, r1.xyxy, r0.x, r1
					    rcp r0.x, r0.x
					    rcp r0.w, r0.w
					    mad_sat_pp r0.y, r0.z, r0.w, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_sat_pp r0.xyz, r0.x, r2
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c9.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c8.y, c8.z
					    texld r1, r1, s1
					    mad r1.xyz, r1, r1, -r0
					    mad_pp r0.xyz, c8.x, r1, r0
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 45 instruction slots used (6 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _Lut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb1 = _Crossover<u_xlat12;
					    u_xlat2 = (bool(u_xlatb1)) ? _Shoulder : _Toe;
					    u_xlat1.x = u_xlatb1 ? _K : float(0.0);
					    u_xlat5.xy = u_xlat2.xy * vec2(u_xlat12) + u_xlat2.zw;
					    u_xlat5.x = u_xlat5.x / u_xlat5.y;
					    u_xlat1.x = u_xlat1.x + u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat12 = u_xlat1.x / u_xlat12;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Lut0Params.yyy + _Lut0Params.zzz;
					    u_xlat1 = texture(_Lut0, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _2dLut0;
					//   float _Crossover;
					//   float _IsLinear;
					//   float _K;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Offsets;
					//   float _Saturation;
					//   float _Sharpness;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Offsets     c5       1
					//   _Sharpness   c6       1
					//   _Saturation  c7       1
					//   _Lut0Params  c8       1
					//   _IsLinear    c9       1
					//   _MainTex     s0       1
					//   _2dLut0      s1       1
					//
					
					    ps_3_0
					    def c10, -1, 1, 0.200000003, -0.0250000004
					    def c11, 0, 0.298999995, 0.587000012, 0.114
					    def c12, 0.5, 1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c5, v0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, c5, v0
					    texld_pp r1, r1, s0
					    mov r2.xy, c10
					    mad_pp r2, c5.xyxy, r2.xyyx, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    add_pp r1.xyz, r1, r3
					    texld_pp r3, v0, s0
					    add_pp r1.xyz, r1, r3
					    add_pp r0.xyz, r0, r1
					    add_pp r0.xyz, r2, r0
					    mad_pp r0.xyz, r0, -c10.z, r3
					    max_pp r1.xyz, r0, c10.w
					    min r0.xyz, r1, -c10.w
					    mad_pp r0.xyz, r0, c6.x, r3
					    mov_pp oC0.w, r3.w
					    max_pp r1.xyz, r0, c11.x
					    dp3_pp r0.x, r1, c11.yzww
					    lrp_pp r2.xyz, c7.x, r1, r0.x
					    dp3_pp r0.x, r2, c11.yzww
					    add r0.y, -r0.x, c3.x
					    mov r1, c0
					    cmp r1, r0.y, r1, c1
					    mov r3.x, c11.x
					    cmp r0.y, r0.y, r3.x, c2.x
					    mad r0.zw, r1.xyxy, r0.x, r1
					    rcp r0.x, r0.x
					    rcp r0.w, r0.w
					    mad_sat_pp r0.y, r0.z, r0.w, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_sat_pp r0.xyz, r0.x, r2
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c9.x
					    exp r0.w, r1.y
					    add r2.z, -r0.w, c10.y
					    exp r2.y, r1.x
					    exp r0.w, r1.z
					    mul r1.xy, r2.yzzw, c8.w
					    mov r2.yz, c8
					    mul r1.zw, r2.xyyz, c12.x
					    mad r1.yz, r1.xxyw, c8, r1.xzww
					    mul r1.w, r0.w, c8.w
					    frc r2.x, r1.w
					    add r1.w, r1.w, -r2.x
					    mad r1.x, r1.w, c8.z, r1.y
					    mad r0.w, r0.w, c8.w, -r1.w
					    mad r1.yw, r2.z, c12.xyzz, r1.xxzz
					    texld r2, r1.xzzw, s1
					    texld r1, r1.ywzw, s1
					    lrp r3.xyz, r0.w, r1, r2
					    mad r1.xyz, r3, r3, -r0
					    mad_pp r0.xyz, c8.x, r1, r0
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 57 instruction slots used (7 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6;
						vec4 _Offsets;
						float _Sharpness;
						float _Saturation;
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _2dLut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_Offsets.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + _Offsets.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _Offsets.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat3.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(-0.0250000004, -0.0250000004, -0.0250000004));
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(0.0250000004, 0.0250000004, 0.0250000004));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_Sharpness) + u_xlat3.xyz;
					    SV_Target0.w = u_xlat3.w;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat12 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb1 = _Crossover<u_xlat12;
					    u_xlat2 = (bool(u_xlatb1)) ? _Shoulder : _Toe;
					    u_xlat1.x = u_xlatb1 ? _K : float(0.0);
					    u_xlat5.xy = u_xlat2.xy * vec2(u_xlat12) + u_xlat2.zw;
					    u_xlat5.x = u_xlat5.x / u_xlat5.y;
					    u_xlat1.x = u_xlat1.x + u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat12 = u_xlat1.x / u_xlat12;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.w = (-u_xlat1.y) + 1.0;
					    u_xlat1.xy = u_xlat1.xw * _Lut0Params.ww;
					    u_xlat2.xy = _Lut0Params.yz * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.xy * _Lut0Params.yz + u_xlat2.xy;
					    u_xlat12 = u_xlat1.z * _Lut0Params.w;
					    u_xlat12 = floor(u_xlat12);
					    u_xlat2.x = u_xlat12 * _Lut0Params.z + u_xlat2.y;
					    u_xlat12 = u_xlat1.z * _Lut0Params.w + (-u_xlat12);
					    u_xlat1.x = _Lut0Params.z;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_2dLut0, u_xlat2.xz);
					    u_xlat1 = texture(_2dLut0, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Crossover;
					//   float _IsLinear;
					//   float _K;
					//   sampler3D _Lut0;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Lut0Params  c5       1
					//   _IsLinear    c6       1
					//   _MainTex     s0       1
					//   _Lut0        s1       1
					//
					
					    ps_3_0
					    def c7, 0.298999995, 0.587000012, 0.114, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    texld_pp r0, v0, s0
					    dp3_pp r1.x, r0, c7
					    add r1.y, -r1.x, c3.x
					    mov r2, c0
					    cmp r2, r1.y, r2, c1
					    mov r1.w, c7.w
					    cmp r1.y, r1.y, r1.w, c2.x
					    mad r1.zw, r2.xyxy, r1.x, r2
					    rcp r1.x, r1.x
					    rcp r1.w, r1.w
					    mad_sat_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mul_sat_pp r0.xyz, r0, r1.x
					    mov_pp oC0.w, r0.w
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c6.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c5.y, c5.z
					    texld r1, r1, s1
					    mad r1.xyz, r1, r1, -r0
					    mad_pp r0.xyz, c5.x, r1, r0
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6[3];
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _Lut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb4 = _Crossover<u_xlat1.x;
					    u_xlat2 = (bool(u_xlatb4)) ? _Shoulder : _Toe;
					    u_xlat4 = u_xlatb4 ? _K : float(0.0);
					    u_xlat7.xy = u_xlat2.xy * u_xlat1.xx + u_xlat2.zw;
					    u_xlat7.x = u_xlat7.x / u_xlat7.y;
					    u_xlat4 = u_xlat4 + u_xlat7.x;
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat1.x = u_xlat4 / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Lut0Params.yyy + _Lut0Params.zzz;
					    u_xlat1 = texture(_Lut0, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _2dLut0;
					//   float _Crossover;
					//   float _IsLinear;
					//   float _K;
					//   float4 _Lut0Params;
					//   sampler2D _MainTex;
					//   float4 _Shoulder;
					//   float4 _Tint;
					//   float4 _Toe;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Toe         c0       1
					//   _Shoulder    c1       1
					//   _K           c2       1
					//   _Crossover   c3       1
					//   _Tint        c4       1
					//   _Lut0Params  c5       1
					//   _IsLinear    c6       1
					//   _MainTex     s0       1
					//   _2dLut0      s1       1
					//
					
					    ps_3_0
					    def c7, 0.298999995, 0.587000012, 0.114, 0
					    def c8, 1, 0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    dp3_pp r1.x, r0, c7
					    add r1.y, -r1.x, c3.x
					    mov r2, c0
					    cmp r2, r1.y, r2, c1
					    mov r1.w, c7.w
					    cmp r1.y, r1.y, r1.w, c2.x
					    mad r1.zw, r2.xyxy, r1.x, r2
					    rcp r1.x, r1.x
					    rcp r1.w, r1.w
					    mad_sat_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mul_sat_pp r0.xyz, r0, r1.x
					    mov_pp oC0.w, r0.w
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r1, c6.x
					    exp r0.w, r1.y
					    add r2.z, -r0.w, c8.x
					    exp r2.y, r1.x
					    exp r0.w, r1.z
					    mul r1.xy, r2.yzzw, c5.w
					    mov r2.yz, c5
					    mul r1.zw, r2.xyyz, c8.y
					    mad r1.yz, r1.xxyw, c5, r1.xzww
					    mul r1.w, r0.w, c5.w
					    frc r2.x, r1.w
					    add r1.w, r1.w, -r2.x
					    mad r1.x, r1.w, c5.z, r1.y
					    mad r0.w, r0.w, c5.w, -r1.w
					    mad r1.yw, r2.z, c8.xxzz, r1.xxzz
					    texld r2, r1.xzzw, s1
					    texld r1, r1.ywzw, s1
					    lrp r3.xyz, r0.w, r1, r2
					    mad r1.xyz, r3, r3, -r0
					    mad_pp r0.xyz, c5.x, r1, r0
					    mul_pp oC0.xyz, r0, c4
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FTD_2D_LUT" "FTD_DISABLE_CGRADING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Toe;
						vec4 _Shoulder;
						float _K;
						float _Crossover;
						vec4 _Tint;
						vec4 unused_0_6[3];
						vec4 _Lut0Params;
						float _IsLinear;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _2dLut0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb4 = _Crossover<u_xlat1.x;
					    u_xlat2 = (bool(u_xlatb4)) ? _Shoulder : _Toe;
					    u_xlat4 = u_xlatb4 ? _K : float(0.0);
					    u_xlat7.xy = u_xlat2.xy * u_xlat1.xx + u_xlat2.zw;
					    u_xlat7.x = u_xlat7.x / u_xlat7.y;
					    u_xlat4 = u_xlat4 + u_xlat7.x;
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat1.x = u_xlat4 / u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_IsLinear);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.w = (-u_xlat1.y) + 1.0;
					    u_xlat1.xy = u_xlat1.xw * _Lut0Params.ww;
					    u_xlat2.xy = _Lut0Params.yz * vec2(0.5, 0.5);
					    u_xlat2.yz = u_xlat1.xy * _Lut0Params.yz + u_xlat2.xy;
					    u_xlat9 = u_xlat1.z * _Lut0Params.w;
					    u_xlat9 = floor(u_xlat9);
					    u_xlat2.x = u_xlat9 * _Lut0Params.z + u_xlat2.y;
					    u_xlat9 = u_xlat1.z * _Lut0Params.w + (-u_xlat9);
					    u_xlat1.x = _Lut0Params.z;
					    u_xlat1.y = 0.0;
					    u_xlat1.xy = u_xlat1.xy + u_xlat2.xz;
					    u_xlat2 = texture(_2dLut0, u_xlat2.xz);
					    u_xlat1 = texture(_2dLut0, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
					    u_xlat0.xyz = _Lut0Params.xxx * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _Tint.xyz;
					    return;
					}"
}
}
 }
}
Fallback Off
}