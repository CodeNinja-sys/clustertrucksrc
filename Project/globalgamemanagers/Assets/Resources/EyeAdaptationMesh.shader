Shader "Hidden/Deluxe/EyeAdaptation" {
Properties {
 _FrameTex ("Base (RGB) Trans (A)", 2D) = "black" { }
}
SubShader { 
 Pass {
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 64418
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BinCount;
					//   sampler2D _FrameTex;
					//   float4 _HistogramCoefs;
					//   float _StepSize;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _StepSize       c0       1
					//   _BinCount       c1       1
					//   _HistogramCoefs c2       1
					//   _FrameTex       s0       1
					//
					
					    vs_3_0
					    def c3, 1, 0, -1, 0.5
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_2d s0
					    dcl_position o0
					    mul r0, c3.xxyy, v1.xyxx
					    texldl r0, r0, s0
					    max r0.y, r0.z, r0.y
					    max r0.x, r0.y, r0.x
					    max r0.x, r0.x, c2.z
					    min r0.x, r0.x, c2.w
					    log r0.x, r0.x
					    mad r0.x, r0.x, c2.x, c2.y
					    mul r0.x, r0.x, c1.x
					    frc r0.y, r0.x
					    add r0.x, -r0.y, r0.x
					    max r0.x, r0.x, c3.y
					    mov r0.zw, c3
					    add r0.y, r0.z, c1.x
					    min r0.x, r0.y, r0.x
					    mad r0.x, r0.x, c0.x, v0.x
					    mad o0.x, c0.x, -r0.w, r0.x
					    mad o0.yzw, v0.xyzy, c3.xxxy, c3.xyyx
					
					// approximately 19 instruction slots used (2 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _StepSize;
						float _BinCount;
						vec4 _HistogramCoefs;
					};
					uniform  sampler2D _FrameTex;
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = textureLod(_FrameTex, in_TEXCOORD0.xy, 0.0);
					    u_xlat1 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat0.x = max(u_xlat1, u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, _HistogramCoefs.z);
					    u_xlat0.x = min(u_xlat0.x, _HistogramCoefs.w);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _HistogramCoefs.x + _HistogramCoefs.y;
					    u_xlat0.x = u_xlat0.x * _BinCount;
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1 = _BinCount + -1.0;
					    u_xlat0.x = min(u_xlat1, u_xlat0.x);
					    gl_Position.x = u_xlat0.x * _StepSize + in_POSITION0.x;
					    gl_Position.yz = in_POSITION0.yz;
					    gl_Position.w = 1.0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					    ps_3_0
					    def c0, 1, 0, 0, 0
					    mov_pp oC0, c0.xyyy
					
					// approximately 1 instruction slot used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(1.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZWrite Off
  Cull Off
  GpuProgramID 71510
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DLX_DEBUG_HISTOGRAM" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DLX_DEBUG_HISTOGRAM" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _90PixelCount;
					//   float _98PixelCount;
					//   float _Attenuation;
					//   float4 _Coefs;
					//   sampler2D _HistogramTex;
					//   float4 _MinMaxSpeedDt;
					//   sampler2D _PreviousBrightness;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _90PixelCount       c0       1
					//   _98PixelCount       c1       1
					//   _Attenuation        c2       1
					//   _Coefs              c3       1
					//   _MinMaxSpeedDt      c4       1
					//   _HistogramTex       s0       1
					//   _PreviousBrightness s1       1
					//
					
					    ps_3_0
					    def c5, 0, 0, 0.00156250002, 0.015625
					    def c6, 1, 0, 0.5, 65000
					    defi i0, 64, 0, 0, 0
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c3.x
					    mov r0.yzw, c5.xzyy
					    mov r1.xyz, c5.y
					    rep i0
					      mad r2.xy, r0.y, c6, c6.yzzw
					      texld r2, r2, s0
					      add r1.w, r0.z, r2.x
					      mov r2.w, c5.w
					      mad r2.y, r1.z, r2.w, -c3.y
					      mul r2.y, r0.x, r2.y
					      exp r2.y, r2.y
					      mad r0.w, r2.x, r2.y, r0.w
					      add r2.z, -r1.w, c0.x
					      add r2.w, r0.z, -c0.x
					      add r3.x, r1.w, -c0.x
					      mad r4.x, r3.x, r2.y, r1.x
					      add r4.y, r1.y, r3.x
					      add r3.x, -r1.w, c1.x
					      add r3.y, r0.z, -c1.x
					      add r3.z, -r0.z, c1.x
					      mad r5.x, r3.z, r2.y, r1.x
					      add r5.y, r1.y, r3.z
					      add r3.z, r1.w, -c1.x
					      mad r6.x, r2.x, r2.y, r1.x
					      add r6.y, r1.y, r2.x
					      cmp r2.x, r2.z, -c6.y, -c6.x
					      cmp r2.y, r3.z, c5.y, r2.x
					      cmp r2.yz, r2.y, r1.xxyw, r6.xxyw
					      cmp r3.y, r3.y, -c6.y, -c6.x
					      cmp r3.x, r3.x, c5.y, r3.y
					      cmp r2.yz, r3.x, r2, r5.xxyw
					      cmp r2.x, r2.w, c5.y, r2.x
					      cmp r1.xy, r2.x, r2.yzzw, r4
					      add r0.y, r0.y, c5.w
					      add r1.z, r1.z, c6.x
					      mov r0.z, r1.w
					    endrep
					    texld r2, c6.z, s1
					    rcp r0.x, r1.y
					    mul r0.x, r0.x, r1.x
					    max r1.x, r0.x, c5.y
					    min r0.x, r1.x, c6.w
					    rcp r0.y, r0.z
					    mul r0.z, r0.y, r0.w
					    mad r0.y, r0.w, -r0.y, r0.x
					    add r0.y, -r0_abs.y, c6.x
					    max r1.x, r0.y, c5.y
					    mul r0.y, r0.z, r1.x
					    mad r0.x, r0.y, c2.x, r0.x
					    max r1.x, r0.x, c4.x
					    min r0.x, c4.y, r1.x
					    add r0.x, -r2.x, r0.x
					    cmp r0.y, -r0.x, c4.w, c4.z
					    exp r0.y, -r0.y
					    add r0.y, -r0.y, c6.x
					    mad_pp r0.x, r0.y, r0.x, r2.x
					    max_pp r1.x, r0.x, c4.x
					    min_pp oC0.x, c4.y, r1.x
					    mov_pp oC0.yzw, c6.xyyx
					
					// approximately 62 instruction slots used (2 texture, 60 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _90PixelCount;
						float _98PixelCount;
						float _Attenuation;
						vec4 _Coefs;
						vec4 _MinMaxSpeedDt;
					};
					uniform  sampler2D _HistogramTex;
					uniform  sampler2D _PreviousBrightness;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					bvec2 u_xlatb3;
					vec2 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					float u_xlat9;
					vec2 u_xlat14;
					bvec2 u_xlatb16;
					float u_xlat17;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.y = 0.5;
					    u_xlat0.x = float(0.00156250002);
					    u_xlat14.x = float(0.0);
					    u_xlat14.y = float(0.0);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    while(true){
					        u_xlatb22 = floatBitsToInt(u_xlat1.z)>=64;
					        if(u_xlatb22){break;}
					        u_xlat2 = texture(_HistogramTex, u_xlat0.xy);
					        u_xlat8.z = u_xlat1.x + u_xlat2.x;
					        u_xlat9 = float(floatBitsToInt(u_xlat1.z));
					        u_xlat9 = u_xlat9 * 0.015625 + (-_Coefs.y);
					        u_xlat9 = u_xlat9 / _Coefs.x;
					        u_xlat9 = exp2(u_xlat9);
					        u_xlat8.x = u_xlat2.x * u_xlat9 + u_xlat1.y;
					        u_xlatb16.xy = lessThan(vec4(_90PixelCount, _98PixelCount, _90PixelCount, _98PixelCount), u_xlat8.zzzz).xy;
					        u_xlatb3.xy = lessThan(u_xlat1.xxxx, vec4(_90PixelCount, _98PixelCount, _90PixelCount, _90PixelCount)).xy;
					        u_xlat17 = u_xlat8.z + (-_90PixelCount);
					        u_xlat4.x = u_xlat17 * u_xlat9 + u_xlat14.x;
					        u_xlat4.y = u_xlat14.y + u_xlat17;
					        u_xlatb3.x = u_xlatb16.x && u_xlatb3.x;
					        u_xlatb3.y = u_xlatb16.y && u_xlatb3.y;
					        u_xlat23 = (-u_xlat1.x) + _98PixelCount;
					        u_xlat5.x = u_xlat23 * u_xlat9 + u_xlat14.x;
					        u_xlat5.y = u_xlat14.y + u_xlat23;
					        u_xlatb23 = u_xlat8.z<_98PixelCount;
					        u_xlatb16.x = u_xlatb23 && u_xlatb16.x;
					        u_xlat6.x = u_xlat2.x * u_xlat9 + u_xlat14.x;
					        u_xlat6.y = u_xlat14.y + u_xlat2.x;
					        u_xlat2.xy = (u_xlatb16.x) ? u_xlat6.xy : u_xlat14.xy;
					        u_xlat2.xy = (u_xlatb3.y) ? u_xlat5.xy : u_xlat2.xy;
					        u_xlat14.xy = (u_xlatb3.x) ? u_xlat4.xy : u_xlat2.xy;
					        u_xlat0.x = u_xlat0.x + 0.015625;
					        u_xlat8.y = intBitsToFloat(floatBitsToInt(u_xlat1.z) + 1);
					        u_xlat1.xyz = u_xlat8.zxy;
					    }
					    u_xlat2 = texture(_PreviousBrightness, vec2(0.5, 0.5));
					    u_xlat0.x = u_xlat14.x / u_xlat14.y;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 65000.0);
					    u_xlat7 = u_xlat1.y / u_xlat1.x;
					    u_xlat14.x = (-u_xlat7) + u_xlat0.x;
					    u_xlat14.x = -abs(u_xlat14.x) + 1.0;
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat7 = u_xlat7 * u_xlat14.x;
					    u_xlat0.x = u_xlat7 * _Attenuation + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, _MinMaxSpeedDt.x);
					    u_xlat0.x = min(u_xlat0.x, _MinMaxSpeedDt.y);
					    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
					    u_xlatb7 = 0.0<u_xlat0.x;
					    u_xlat7 = (u_xlatb7) ? _MinMaxSpeedDt.z : _MinMaxSpeedDt.w;
					    u_xlat7 = exp2((-u_xlat7));
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat0.x = u_xlat7 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = max(u_xlat0.x, _MinMaxSpeedDt.x);
					    SV_Target0.x = min(u_xlat0.x, _MinMaxSpeedDt.y);
					    SV_Target0.yzw = vec3(0.0, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DLX_DEBUG_HISTOGRAM" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _90PixelCount;
					//   float _98PixelCount;
					//   float _Attenuation;
					//   float4 _Coefs;
					//   sampler2D _HistogramTex;
					//   float4 _MinMaxSpeedDt;
					//   sampler2D _PreviousBrightness;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _90PixelCount       c0       1
					//   _98PixelCount       c1       1
					//   _Attenuation        c2       1
					//   _Coefs              c3       1
					//   _MinMaxSpeedDt      c4       1
					//   _HistogramTex       s0       1
					//   _PreviousBrightness s1       1
					//
					
					    ps_3_0
					    def c5, 0, 0, 0.00156250002, 0.015625
					    def c6, 1, 0, 0.5, 65000
					    defi i0, 64, 0, 0, 0
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c3.x
					    mov r1, c5.y
					    mov r0.yzw, c5.xzyy
					    mov r2.xy, c5.y
					    rep i0
					      mad r2.zw, r0.y, c6.xyxy, c6.xyyz
					      texld r3, r2.zwzw, s0
					      add r2.z, r0.z, r3.x
					      mov r2.w, c5.w
					      mad r2.w, r2.y, r2.w, -c3.y
					      mul r2.w, r0.x, r2.w
					      exp r4.w, r2.w
					      mad r2.x, r3.x, r4.w, r2.x
					      max r2.w, r0.w, r3.x
					      add r3.y, -r2.z, c0.x
					      add r3.z, r0.z, -c0.x
					      add r3.w, r2.z, -c0.x
					      mad r5.x, r3.w, r4.w, r1.x
					      add r5.y, r1.y, r3.w
					      add r3.w, -r2.z, c1.x
					      add r4.z, r0.z, -c1.x
					      add r6.x, -r0.z, c1.x
					      mad r7.x, r6.x, r4.w, r1.x
					      add r7.y, r1.y, r6.x
					      add r6.x, r2.z, -c1.x
					      mad r4.x, r3.x, r4.w, r1.x
					      add r4.y, r1.y, r3.x
					      cmp r3.x, r3.y, -c6.y, -c6.x
					      cmp r3.y, r6.x, c5.y, r3.x
					      cmp r6.xyz, r3.y, r1.xyww, r4.xyww
					      cmp r3.y, r4.z, -c6.y, -c6.x
					      cmp r3.xy, r3.zwzw, c5.y, r3
					      mov r7.w, r1.w
					      cmp r1.xyw, r3.y, r6.xyzz, r7
					      mov r5.z, r4.w
					      mov r5.w, r7.w
					      cmp r1, r3.x, r1, r5
					      add r0.y, r0.y, c5.w
					      add r2.y, r2.y, c6.x
					      mov r0.zw, r2
					    endrep
					    mov_pp oC0.yz, r1.xzww
					    mov_pp oC0.w, r0.w
					    texld r3, c6.z, s1
					    rcp r0.x, r1.y
					    mul r0.x, r0.x, r1.x
					    max r1.x, r0.x, c5.y
					    min r0.x, r1.x, c6.w
					    rcp r0.y, r0.z
					    mul r0.z, r0.y, r2.x
					    mad r0.y, r2.x, -r0.y, r0.x
					    add r0.y, -r0_abs.y, c6.x
					    max r1.x, r0.y, c5.y
					    mul r0.y, r0.z, r1.x
					    mad r0.x, r0.y, c2.x, r0.x
					    max r1.x, r0.x, c4.x
					    min r0.x, c4.y, r1.x
					    add r0.x, -r3.x, r0.x
					    cmp r0.y, -r0.x, c4.w, c4.z
					    exp r0.y, -r0.y
					    add r0.y, -r0.y, c6.x
					    mad_pp r0.x, r0.y, r0.x, r3.x
					    max_pp r1.x, r0.x, c4.x
					    min_pp oC0.x, c4.y, r1.x
					
					// approximately 67 instruction slots used (2 texture, 65 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DLX_DEBUG_HISTOGRAM" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _90PixelCount;
						float _98PixelCount;
						float _Attenuation;
						vec4 _Coefs;
						vec4 _MinMaxSpeedDt;
					};
					uniform  sampler2D _HistogramTex;
					uniform  sampler2D _PreviousBrightness;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					bvec2 u_xlatb5;
					vec4 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					int u_xlati9;
					bvec2 u_xlatb10;
					float u_xlat14;
					float u_xlat16;
					bool u_xlatb16;
					bvec2 u_xlatb17;
					float u_xlat21;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.y = 0.5;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat0.x = float(0.00156250002);
					    u_xlat14 = float(0.0);
					    u_xlat21 = float(0.0);
					    u_xlat2 = float(0.0);
					    u_xlati9 = int(0);
					    while(true){
					        u_xlatb16 = u_xlati9>=64;
					        if(u_xlatb16){break;}
					        u_xlat3 = texture(_HistogramTex, u_xlat0.xy);
					        u_xlat16 = u_xlat14 + u_xlat3.x;
					        u_xlat23 = float(u_xlati9);
					        u_xlat23 = u_xlat23 * 0.015625 + (-_Coefs.y);
					        u_xlat23 = u_xlat23 / _Coefs.x;
					        u_xlat4.w = exp2(u_xlat23);
					        u_xlat2 = u_xlat3.x * u_xlat4.w + u_xlat2;
					        u_xlat21 = max(u_xlat21, u_xlat3.x);
					        u_xlatb10.xy = lessThan(vec4(_90PixelCount, _98PixelCount, _90PixelCount, _90PixelCount), vec4(u_xlat16)).xy;
					        u_xlatb5.xy = lessThan(vec4(u_xlat14), vec4(_90PixelCount, _98PixelCount, _90PixelCount, _90PixelCount)).xy;
					        u_xlat23 = u_xlat16 + (-_90PixelCount);
					        u_xlat6.x = u_xlat23 * u_xlat4.w + u_xlat1.x;
					        u_xlat6.y = u_xlat1.y + u_xlat23;
					        u_xlatb17.x = u_xlatb10.x && u_xlatb5.x;
					        u_xlatb17.y = u_xlatb10.y && u_xlatb5.y;
					        u_xlat23 = (-u_xlat14) + _98PixelCount;
					        u_xlat5.x = u_xlat23 * u_xlat4.w + u_xlat1.x;
					        u_xlat5.y = u_xlat1.y + u_xlat23;
					        u_xlatb23 = u_xlat16<_98PixelCount;
					        u_xlatb23 = u_xlatb23 && u_xlatb10.x;
					        u_xlat4.x = u_xlat3.x * u_xlat4.w + u_xlat1.x;
					        u_xlat4.y = u_xlat1.y + u_xlat3.x;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyw : u_xlat1.xyw;
					        u_xlat5.w = u_xlat1.w;
					        u_xlat1.xyw = (u_xlatb17.y) ? u_xlat5.xyw : u_xlat4.xyz;
					        u_xlat6.z = u_xlat4.w;
					        u_xlat6.w = u_xlat5.w;
					        u_xlat1 = (u_xlatb17.x) ? u_xlat6 : u_xlat1;
					        u_xlat0.x = u_xlat0.x + 0.015625;
					        u_xlati9 = u_xlati9 + 1;
					        u_xlat14 = u_xlat16;
					    }
					    SV_Target0.yz = u_xlat1.zw;
					    SV_Target0.w = u_xlat21;
					    u_xlat3 = texture(_PreviousBrightness, vec2(0.5, 0.5));
					    u_xlat0.x = u_xlat1.x / u_xlat1.y;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 65000.0);
					    u_xlat7 = u_xlat2 / u_xlat14;
					    u_xlat14 = (-u_xlat7) + u_xlat0.x;
					    u_xlat14 = -abs(u_xlat14) + 1.0;
					    u_xlat14 = max(u_xlat14, 0.0);
					    u_xlat7 = u_xlat7 * u_xlat14;
					    u_xlat0.x = u_xlat7 * _Attenuation + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, _MinMaxSpeedDt.x);
					    u_xlat0.x = min(u_xlat0.x, _MinMaxSpeedDt.y);
					    u_xlat0.x = (-u_xlat3.x) + u_xlat0.x;
					    u_xlatb7 = 0.0<u_xlat0.x;
					    u_xlat7 = (u_xlatb7) ? _MinMaxSpeedDt.z : _MinMaxSpeedDt.w;
					    u_xlat7 = exp2((-u_xlat7));
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat0.x = u_xlat7 * u_xlat0.x + u_xlat3.x;
					    u_xlat0.x = max(u_xlat0.x, _MinMaxSpeedDt.x);
					    SV_Target0.x = min(u_xlat0.x, _MinMaxSpeedDt.y);
					    return;
					}"
}
}
 }
 Pass {
  ZWrite Off
  Cull Off
  GpuProgramID 143083
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PixelSize;
					//   sampler2D _UpTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _PixelSize   c0       1
					//   _UpTex       s0       1
					//
					
					    ps_3_0
					    def c1, 1, -1, 0.25, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, -c0, v0
					    texld_pp r0, r0, s0
					    mov r1.xy, c0
					    mad r1, r1.xyxy, c1.xyyx, v0.xyxy
					    texld_pp r2, r1, s0
					    texld_pp r1, r1.zwzw, s0
					    add_pp r0, r0, r2
					    add_pp r0, r1, r0
					    add r1.xy, c0, v0
					    texld_pp r1, r1, s0
					    add_pp r0, r0, r1
					    mul_pp oC0, r0, c1.z
					
					// approximately 12 instruction slots used (4 texture, 8 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _PixelSize;
					};
					uniform  sampler2D _UpTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_PixelSize.xy);
					    u_xlat0 = texture(_UpTex, u_xlat0.xy);
					    u_xlat1 = _PixelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_UpTex, u_xlat1.xy);
					    u_xlat1 = texture(_UpTex, u_xlat1.zw);
					    u_xlat0 = u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat1 + u_xlat0;
					    u_xlat1.xy = vs_TEXCOORD0.xy + _PixelSize.xy;
					    u_xlat1 = texture(_UpTex, u_xlat1.xy);
					    u_xlat0 = u_xlat0 + u_xlat1;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
}
}