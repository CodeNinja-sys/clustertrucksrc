Shader "Hidden/Amplify Color/Mask" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 35266
Program "vp" {
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _MaskTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _MaskTex_TexelSize c5       1
					//
					
					    vs_2_0
					    def c6, 0, -2, 1, 0
					    def c7, -0.5, 0.5, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov r0.x, c6.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mov r1.xy, c5
					    mad oT1.xy, r1, c7, r0
					    mov oT0.xy, v1
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _MaskTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _MaskTex_TexelSize c5       1
					//
					
					    vs_2_0
					    def c6, 0, -2, 1, 0
					    def c7, -0.5, 0.5, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov r0.x, c6.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mov r1.xy, c5
					    mad oT1.xy, r1, c7, r0
					    mov oT0.xy, v1
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MaskTex;
					//   sampler2D _RgbTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _RgbTex      s1       1
					//   _MaskTex     s2       1
					//
					
					    ps_2_0
					    def c0, 31, 0.0302734375, 0.96875, 0
					    def c1, 0.00048828125, 0.015625, 0, 0.03125
					    dcl t0.xy
					    dcl t1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, t0, s0
					    mul r1.w, r0.z, c0.x
					    frc_pp r1.x, r1.w
					    mov r2.xyz, c1
					    mad r2.xyz, r0, c0.yzxw, r2
					    add r1.y, -r1.x, r2.z
					    mad r2.xy, r1.y, c1.wzyx, r2
					    add r3.xy, r2, c1.wzyx
					    texld_pp r2, r2, s1
					    texld_pp r3, r3, s1
					    texld_pp r4, t1, s2
					    lrp_pp r4.yzw, r1.x, r3.wzyx, r2.wzyx
					    add_pp r1.xyz, -r0, r4.wzyx
					    mov_pp r1.w, c0.w
					    mad_pp r0, r4.x, r1, r0
					    mov_pp oC0, r0
					
					// approximately 16 instruction slots used (4 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.z * 31.0;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.0);
					    u_xlat13 = (-u_xlat1.x) + u_xlat5.z;
					    u_xlat5.xy = vec2(u_xlat13) * vec2(0.03125, 0.0) + u_xlat5.xy;
					    u_xlat2.xy = u_xlat5.xy + vec2(0.03125, 0.0);
					    u_xlat3 = texture(_RgbTex, u_xlat5.xy);
					    u_xlat2 = texture(_RgbTex, u_xlat2.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.z * 31.0;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.0);
					    u_xlat13 = (-u_xlat1.x) + u_xlat5.z;
					    u_xlat5.xy = vec2(u_xlat13) * vec2(0.03125, 0.0) + u_xlat5.xy;
					    u_xlat2.xy = u_xlat5.xy + vec2(0.03125, 0.0);
					    u_xlat3 = texture(_RgbTex, u_xlat5.xy);
					    u_xlat2 = texture(_RgbTex, u_xlat2.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MaskTex;
					//   sampler2D _RgbTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _RgbTex      s1       1
					//   _MaskTex     s2       1
					//
					
					    ps_2_0
					    def c0, 0.0302734375, 0.96875, 0.015625, 0.00048828125
					    def c1, 31, 0.5, 0, 0.03125
					    dcl t0.xy
					    dcl t1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, t0, s0
					    mad r1.w, r0.z, c1.x, c1.y
					    frc r1.x, r1.w
					    add r1.x, -r1.x, r1.w
					    mad r1.zw, r0.wzyx, c0.wzyx, c0
					    mad r1.xy, r1.x, c1.wzyx, r1.wzyx
					    texld_pp r1, r1, s1
					    texld_pp r2, t1, s2
					    add_pp r1.xyz, -r0, r1
					    mov_pp r1.w, c1.z
					    mad_pp r0, r2.x, r1, r0
					    mov_pp oC0, r0
					
					// approximately 12 instruction slots used (3 texture, 9 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.5);
					    u_xlat7 = floor(u_xlat1.z);
					    u_xlat1.xy = vec2(u_xlat7) * vec2(0.03125, 0.0) + u_xlat1.xy;
					    u_xlat1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.5);
					    u_xlat7 = floor(u_xlat1.z);
					    u_xlat1.xy = vec2(u_xlat7) * vec2(0.03125, 0.0) + u_xlat1.xy;
					    u_xlat1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 106740
Program "vp" {
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _MaskTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _MaskTex_TexelSize c5       1
					//
					
					    vs_2_0
					    def c6, 0, -2, 1, 0
					    def c7, -0.5, 0.5, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov r0.x, c6.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mov r1.xy, c5
					    mad oT1.xy, r1, c7, r0
					    mov oT0.xy, v1
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_STANDARD" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _MaskTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _MaskTex_TexelSize c5       1
					//
					
					    vs_2_0
					    def c6, 0, -2, 1, 0
					    def c7, -0.5, 0.5, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov r0.x, c6.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mov r1.xy, c5
					    mad oT1.xy, r1, c7, r0
					    mov oT0.xy, v1
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_MOBILE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MaskTex;
					//   sampler2D _RgbTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _RgbTex      s1       1
					//   _MaskTex     s2       1
					//
					
					    ps_2_0
					    def c0, 1, 31, 0.96875, 0.0302734375
					    def c1, 0.00048828125, 0.015625, 0, 0.03125
					    dcl t0.xy
					    dcl t1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, t0, s0
					    min_pp r1, r0, c0.x
					    mul r0.x, r1.z, c0.y
					    frc_pp r0.x, r0.x
					    mov r0.yzw, c0
					    mad r0.yzw, r1.wzyx, r0, c1.wzyx
					    add r0.y, -r0.x, r0.y
					    mad r2.xy, r0.y, c1.wzyx, r0.wzyx
					    add r3.xy, r2, c1.wzyx
					    texld_pp r2, r2, s1
					    texld_pp r3, r3, s1
					    texld_pp r4, t1, s2
					    lrp_pp r4.yzw, r0.x, r3.wzyx, r2.wzyx
					    add_pp r0.xyz, -r1, r4.wzyx
					    mov_pp r0.w, c1.z
					    mad_pp r0, r4.x, r0, r1
					    mov_pp oC0, r0
					
					// approximately 17 instruction slots used (4 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0;
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat1.x = u_xlat0.z * 31.0;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.0);
					    u_xlat13 = (-u_xlat1.x) + u_xlat5.z;
					    u_xlat5.xy = vec2(u_xlat13) * vec2(0.03125, 0.0) + u_xlat5.xy;
					    u_xlat2.xy = u_xlat5.xy + vec2(0.03125, 0.0);
					    u_xlat3 = texture(_RgbTex, u_xlat5.xy);
					    u_xlat2 = texture(_RgbTex, u_xlat2.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_STANDARD" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0;
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat1.x = u_xlat0.z * 31.0;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat5.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.0);
					    u_xlat13 = (-u_xlat1.x) + u_xlat5.z;
					    u_xlat5.xy = vec2(u_xlat13) * vec2(0.03125, 0.0) + u_xlat5.xy;
					    u_xlat2.xy = u_xlat5.xy + vec2(0.03125, 0.0);
					    u_xlat3 = texture(_RgbTex, u_xlat5.xy);
					    u_xlat2 = texture(_RgbTex, u_xlat2.xy);
					    u_xlat5.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MaskTex;
					//   sampler2D _RgbTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _RgbTex      s1       1
					//   _MaskTex     s2       1
					//
					
					    ps_2_0
					    def c0, 1, 0.0302734375, 0.96875, 0
					    def c1, 0.00048828125, 0.015625, 31, 0.5
					    def c2, 0.03125, 0, 0, 0
					    dcl t0.xy
					    dcl t1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, t0, s0
					    min_pp r1, r0, c0.x
					    mad r0.x, r1.z, c1.z, c1.w
					    frc r0.y, r0.x
					    add r0.x, -r0.y, r0.x
					    mov r0.yz, c0
					    mad r0.yz, r1.zxyw, r0, c1.zxyw
					    mad r0.xy, r0.x, c2, r0.yzxw
					    texld_pp r0, r0, s1
					    texld_pp r2, t1, s2
					    add_pp r0.xyz, -r1, r0
					    mov_pp r0.w, c0.w
					    mad_pp r0, r2.x, r0, r1
					    mov_pp oC0, r0
					
					// approximately 14 instruction slots used (3 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0;
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.5);
					    u_xlat7 = floor(u_xlat1.z);
					    u_xlat1.xy = vec2(u_xlat7) * vec2(0.03125, 0.0) + u_xlat1.xy;
					    u_xlat1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "AC_QUALITY_MOBILE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MaskTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0;
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0302734375, 0.96875, 31.0) + vec3(0.00048828125, 0.015625, 0.5);
					    u_xlat7 = floor(u_xlat1.z);
					    u_xlat1.xy = vec2(u_xlat7) * vec2(0.03125, 0.0) + u_xlat1.xy;
					    u_xlat1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2 = texture(_MaskTex, vs_TEXCOORD1.xy);
					    u_xlat1.w = 0.0;
					    SV_Target0 = u_xlat2.xxxx * u_xlat1 + u_xlat0;
					    return;
					}"
}
}
 }
}
Fallback Off
}