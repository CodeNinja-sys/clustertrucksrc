Shader "Hidden/SESSAO" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 11919
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[15];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float Bias;
					//   int Downsamp;
					//   float DrawDistance;
					//   float DrawDistanceFadeSize;
					//   int HalfSampling;
					//   float Intensity;
					//   int Orthographic;
					//   int PreserveDetails;
					//   row_major float4x4 ProjectionMatrixInverse;
					//   float Radius;
					//   float SampleDistributionCurve;
					//   float ZThickness;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _ColorDownsampled;
					//   sampler2D _DitherTexture;
					//   float4 _MainTex_TexelSize;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   ProjectionMatrixInverse    c0       4
					//   _ScreenParams              c4       1
					//   _MainTex_TexelSize         c5       1
					//   Radius                     c6       1
					//   Bias                       c7       1
					//   ZThickness                 c8       1
					//   Intensity                  c9       1
					//   SampleDistributionCurve    c10      1
					//   DrawDistance               c11      1
					//   DrawDistanceFadeSize       c12      1
					//   Downsamp                   c13      1
					//   HalfSampling               c14      1
					//   PreserveDetails            c15      1
					//   Orthographic               c16      1
					//   _CameraDepthNormalsTexture s0       1
					//   _CameraDepthTexture        s1       1
					//   _DitherTexture             s2       1
					//   _ColorDownsampled          s3       1
					//
					
					    ps_3_0
					    def c17, 3.55539989, 0, -1.77769995, 1
					    def c18, 5, 4, 8, 9.99999975e-005
					    def c19, 10, 6, 25.5, 0
					    def c20, 6.28318548, 0.159154937, 0.5, -3.14159274
					    def c21, 0.00100000005, -0.800000012, -0.00999999978, 0
					    def c22, 1, 0, 2, -1
					    def c23, 1.20000005, 1, 0, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mul r0, c22.xxyy, v0.xyxx
					    texldl r0, r0, s1
					    mad r0.z, r0.x, c22.z, c22.w
					    mad r0.xyw, v0.xyzx, c22.zzzy, c22.wwzx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r0.x, c3, r0
					    rcp r0.x, r0.x
					    mul r2, r0.x, r1.xyzz
					    if_lt r2.w, -c11.x
					      mov oC0, c22.x
					    else
					      texld r3, v0, s0
					      mad r0.yzw, r3.xxyz, c17.xxxy, c17.xzzw
					      dp3 r0.w, r0.yzww, r0.yzww
					      rcp r0.w, r0.w
					      add r1.x, r0.w, r0.w
					      mul r3.xy, r0.yzzw, r1.x
					      mad r3.z, r0.w, c22.z, c22.w
					      mul r0.yz, c5.xzww, v0.xxyw
					      add r0.w, c15.x, c15.x
					      add r1.x, -r0.w, c18.x
					      mad r1.x, c13.x, r1.x, r1.x
					      rcp r1.x, r1.x
					      mul r4.xy, r0.yzzw, r1.x
					      mov r4.zw, c22.y
					      texldl r4, r4, s2
					      mov r0.yz, c18
					      mad r0.y, c15.x, r0.y, r0.z
					      add r0.z, r0.w, c18.y
					      mad r0.y, c14.x, -r0.z, r0.y
					      mad r0.x, r1.z, -r0.x, c18.w
					      add r0.z, -r0.x, c19.x
					      mad r0.x, c16.x, r0.z, r0.x
					      rcp r0.x, r0.x
					      mul r0.x, r0.x, c6.x
					      rcp r0.z, r0.y
					      mul r0.w, r4.w, c19.y
					      rcp r1.x, c4.y
					      mul r1.x, r1.x, c4.x
					      pow r1.y, r4.w, c10.x
					      mul r1.z, r4_abs.w, c8.x
					      mul r1.z, r0.x, r1.z
					      mul r1.z, r1.z, c19.z
					      rcp r1.z, r1.z
					      mov r4.x, c22.x
					      add r1.w, -r4.w, c22.z
					      mov r5.zw, c22.y
					      mov r6.w, c22.x
					      mov r7.zw, c22.y
					      mov r8, c22.y
					      mov r3.w, c22.y
					      mov r4.y, c22.y
					      rep i0
					        mov r4.z, r0.y
					        break_ge r4.y, r4.z
					        mul r4.z, r0.z, r4.y
					        mad r4.z, r4.z, c20.x, r0.w
					        mad r4.z, r4.z, c20.y, c20.z
					        frc r4.z, r4.z
					        mad r4.z, r4.z, c20.x, c20.w
					        sincos r9.xy, r4.z
					        mul r10.y, r1.x, r9.x
					        mov r10.x, r9.y
					        mul r4.zw, r1.y, r10.xyxy
					        mul r9.xy, r9.yxzw, c21.x
					        mad r4.zw, r4, r0.x, r9.xyxy
					        add r7.xy, r4.zwzw, v0
					        mov_sat r5.xy, r7
					        texldl r9, r5, s1
					        mad r6.xy, r5, c22.z, c22.w
					        mad r6.z, r9.x, c22.z, c22.w
					        dp4 r9.x, c0, r6
					        dp4 r9.y, c1, r6
					        dp4 r9.z, c2, r6
					        dp4 r4.z, c3, r6
					        rcp r4.z, r4.z
					        mad r9, r9.xyzz, r4.z, -r2
					        nrm r6.xyz, r9
					        dp3 r4.z, r6, r3
					        add r4.w, r9_abs.w, c21.y
					        max r5.x, r4.w, c22.y
					        mad_sat r4.w, r5.x, -r1.z, c22.x
					        add r3.w, r3.w, r4.w
					        texldl r9, r7, s3
					        add r5.x, -r4.z, c7.x
					        lrp_sat r5.y, r4.z, r4.x, -c7.x
					        mul r4.z, r4.w, r5.y
					        mad r10.x, r4.z, r1.w, r8.x
					        mul r6.xyz, r4.w, r9
					        mul r6.xyz, r5.y, r6
					        cmp r6.xyz, r9, r6, c22.y
					        add r10.yzw, r6.xxyz, r8
					        cmp r8, r5.x, r8, r10
					        add r4.y, r4.y, c22.x
					      endrep
					      add r0.x, r3.w, c21.z
					      rcp r0.y, r3.w
					      cmp r0.x, r0.x, r0.y, c22.x
					      mul r0.y, r0.x, r8.x
					      mad_sat r0.y, r0.y, -c23.x, c23.y
					      pow r1.x, r0.y, c9.x
					      rcp r0.y, c12.x
					      mul r0.z, r0.y, r2.w
					      mad_sat r0.y, c11.x, r0.y, r0.z
					      add r0.z, r1.x, c22.w
					      mad oC0.w, r0.y, r0.z, c22.x
					      mad r0.xyz, r8.yzww, r0.x, c18.w
					      dp3 r0.w, r0, r0
					      rsq r0.w, r0.w
					      mul oC0.xyz, r0.w, r0
					    endif
					
					// approximately 137 instruction slots used (9 texture, 128 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						mat4x4 ProjectionMatrixInverse;
						vec4 unused_0_3[8];
						float Radius;
						float Bias;
						float ZThickness;
						float Intensity;
						float SampleDistributionCurve;
						float DrawDistance;
						float DrawDistanceFadeSize;
						int Downsamp;
						int HalfSampling;
						int PreserveDetails;
						int Orthographic;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2[2];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _DitherTexture;
					uniform  sampler2D _ColorDownsampled;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					ivec2 u_xlati1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat3;
					ivec2 u_xlati3;
					vec4 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec2 u_xlat9;
					float u_xlat10;
					float u_xlat12;
					int u_xlati14;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat21;
					vec2 u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat32;
					void main()
					{
					    u_xlat0 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat9.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
					    u_xlat1 = u_xlat9.yyyy * ProjectionMatrixInverse[1];
					    u_xlat1 = ProjectionMatrixInverse[0] * u_xlat9.xxxx + u_xlat1;
					    u_xlat0 = ProjectionMatrixInverse[2] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = u_xlat0 + ProjectionMatrixInverse[3];
					    u_xlat0 = u_xlat0.xyzz / u_xlat0.wwww;
					    u_xlatb1 = u_xlat0.w<(-DrawDistance);
					    if(u_xlatb1){
					        SV_Target0 = vec4(1.0, 1.0, 1.0, 1.0);
					        return;
					    }
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = 2.0 / u_xlat19;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat19);
					    u_xlat2.z = u_xlat19 + -1.0;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_TexelSize.zw;
					    u_xlati3.x = PreserveDetails << 2;
					    u_xlati3.y = PreserveDetails << 1;
					    u_xlat19 = float(u_xlati3.y);
					    u_xlat19 = (-u_xlat19) + 5.0;
					    u_xlat28 = float(Downsamp);
					    u_xlat19 = u_xlat28 * u_xlat19 + u_xlat19;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat19);
					    u_xlat1 = textureLod(_DitherTexture, u_xlat1.xy, 0.0);
					    u_xlati1.xy = u_xlati3.xy + ivec2(8, 4);
					    u_xlati1.x = (-HalfSampling) * u_xlati1.y + u_xlati1.x;
					    u_xlat10 = (-u_xlat0.w) + 9.99999975e-05;
					    u_xlat19 = float(Orthographic);
					    u_xlat29 = (-u_xlat10) + 10.0;
					    u_xlat10 = u_xlat19 * u_xlat29 + u_xlat10;
					    u_xlat10 = Radius / u_xlat10;
					    u_xlat19 = float(u_xlati1.x);
					    u_xlat29 = u_xlat1.w * 6.0;
					    u_xlat3 = _ScreenParams.x / _ScreenParams.y;
					    u_xlat12 = log2(u_xlat1.w);
					    u_xlat12 = u_xlat12 * SampleDistributionCurve;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat21 = abs(u_xlat1.w) * ZThickness;
					    u_xlat21 = u_xlat10 * u_xlat21;
					    u_xlat21 = u_xlat21 * 25.5;
					    u_xlat30 = Bias + 1.0;
					    u_xlat28 = (-u_xlat1.w) + 2.0;
					    u_xlat4.x = float(0.0);
					    u_xlat4.y = float(0.0);
					    u_xlat4.z = float(0.0);
					    u_xlat4.w = float(0.0);
					    u_xlat5 = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati1.x ; u_xlati_loop_1++)
					    {
					        u_xlat23.x = float(u_xlati_loop_1);
					        u_xlat23.x = u_xlat23.x / u_xlat19;
					        u_xlat23.x = u_xlat23.x * 6.28318548 + u_xlat29;
					        u_xlat6.x = sin(u_xlat23.x);
					        u_xlat7.x = cos(u_xlat23.x);
					        u_xlat8.x = u_xlat3 * u_xlat7.x;
					        u_xlat8.y = u_xlat6.x;
					        u_xlat23.xy = vec2(u_xlat12) * u_xlat8.yx;
					        u_xlat8.z = u_xlat7.x;
					        u_xlat6.xy = u_xlat8.yz * vec2(0.00100000005, 0.00100000005);
					        u_xlat23.xy = u_xlat23.xy * vec2(u_xlat10) + u_xlat6.xy;
					        u_xlat23.xy = u_xlat23.xy + vs_TEXCOORD0.xy;
					        u_xlat6.xy = u_xlat23.xy;
					        u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					        u_xlat7 = textureLod(_CameraDepthTexture, u_xlat6.xy, 0.0);
					        u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					        u_xlat24 = u_xlat7.x * 2.0 + -1.0;
					        u_xlat7 = u_xlat6.yyyy * ProjectionMatrixInverse[1];
					        u_xlat7 = ProjectionMatrixInverse[0] * u_xlat6.xxxx + u_xlat7;
					        u_xlat6 = ProjectionMatrixInverse[2] * vec4(u_xlat24) + u_xlat7;
					        u_xlat6 = u_xlat6 + ProjectionMatrixInverse[3];
					        u_xlat6 = u_xlat6.xyzz / u_xlat6.wwww;
					        u_xlat6 = (-u_xlat0) + u_xlat6;
					        u_xlat7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat7.x = inversesqrt(u_xlat7.x);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xxx;
					        u_xlat6.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					        u_xlat15 = abs(u_xlat6.w) + -0.800000012;
					        u_xlat15 = max(u_xlat15, 0.0);
					        u_xlat15 = u_xlat15 / u_xlat21;
					        u_xlat15 = (-u_xlat15) + 1.0;
					        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					        u_xlat5 = u_xlat5 + u_xlat15;
					        u_xlat7 = textureLod(_ColorDownsampled, u_xlat23.xy, 0.0);
					        u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					        u_xlatb23 = Bias<u_xlat6.x;
					        u_xlat32 = u_xlat6.x * u_xlat30 + (-Bias);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat6.x = u_xlat15 * u_xlat32;
					        u_xlat8.x = u_xlat6.x * u_xlat28 + u_xlat4.x;
					        u_xlat6.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					        u_xlat8.yzw = u_xlat6.xyz * vec3(u_xlat32) + u_xlat4.yzw;
					        u_xlat4 = (bool(u_xlatb23)) ? u_xlat8 : u_xlat4;
					    }
					    u_xlatb0 = u_xlat5<0.00999999978;
					    u_xlat0.x = (u_xlatb0) ? 1.0 : u_xlat5;
					    u_xlat9.x = u_xlat4.x / u_xlat0.x;
					    u_xlat9.x = (-u_xlat9.x) * 1.20000005 + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * Intensity;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat18 = DrawDistance / DrawDistanceFadeSize;
					    u_xlat27 = u_xlat0.w / DrawDistanceFadeSize;
					    u_xlat18 = u_xlat27 + u_xlat18;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat9.x = u_xlat9.x + -1.0;
					    SV_Target0.w = u_xlat18 * u_xlat9.x + 1.0;
					    u_xlat0.xyz = u_xlat4.yzw / u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(9.99999975e-05, 9.99999975e-05, 9.99999975e-05);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 115133
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[15];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float Bias;
					//   int Downsamp;
					//   float DrawDistance;
					//   float DrawDistanceFadeSize;
					//   int HalfSampling;
					//   float Intensity;
					//   int Orthographic;
					//   int PreserveDetails;
					//   row_major float4x4 ProjectionMatrixInverse;
					//   float Radius;
					//   float SampleDistributionCurve;
					//   float ZThickness;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _DitherTexture;
					//   float4 _MainTex_TexelSize;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   ProjectionMatrixInverse    c0       4
					//   _ScreenParams              c4       1
					//   _MainTex_TexelSize         c5       1
					//   Radius                     c6       1
					//   Bias                       c7       1
					//   ZThickness                 c8       1
					//   Intensity                  c9       1
					//   SampleDistributionCurve    c10      1
					//   DrawDistance               c11      1
					//   DrawDistanceFadeSize       c12      1
					//   Downsamp                   c13      1
					//   HalfSampling               c14      1
					//   PreserveDetails            c15      1
					//   Orthographic               c16      1
					//   _CameraDepthNormalsTexture s0       1
					//   _CameraDepthTexture        s1       1
					//   _DitherTexture             s2       1
					//
					
					    ps_3_0
					    def c17, 3.55539989, 0, -1.77769995, 1
					    def c18, 5, 4, 8, 9.99999975e-005
					    def c19, 10, 6, 25.5, 0
					    def c20, 6.28318548, -3.14159274, -0.800000012, -0.00999999978
					    def c21, 194.778748, 0.159154937, 0.5, 0.00100000005
					    def c22, 1.20000005, 1, 0.577350259, 0
					    def c23, 1, 0, 2, -1
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mul r0, c23.xxyy, v0.xyxx
					    texldl r0, r0, s1
					    mad r0.z, r0.x, c23.z, c23.w
					    mad r0.xyw, v0.xyzx, c23.zzzy, c23.wwzx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r0.x, c3, r0
					    rcp r0.x, r0.x
					    mul r2, r0.x, r1.xyzz
					    texld r3, v0, s0
					    mad r0.yzw, r3.xxyz, c17.xxxy, c17.xzzw
					    dp3 r0.w, r0.yzww, r0.yzww
					    rcp r0.w, r0.w
					    add r1.x, r0.w, r0.w
					    mul r3.xy, r0.yzzw, r1.x
					    mad r3.z, r0.w, c23.z, c23.w
					    mul r0.yz, c5.xzww, v0.xxyw
					    add r0.w, c15.x, c15.x
					    add r1.x, -r0.w, c18.x
					    mad r1.x, c13.x, r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r4.xy, r0.yzzw, r1.x
					    mov r4.zw, c23.y
					    texldl r4, r4, s2
					    mov r0.yz, c18
					    mad r0.y, c15.x, r0.y, r0.z
					    add r0.z, r0.w, c18.y
					    mad r0.y, c14.x, -r0.z, r0.y
					    mad r0.x, r1.z, -r0.x, c18.w
					    add r0.z, -r0.x, c19.x
					    mad r0.x, c16.x, r0.z, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c6.x
					    rcp r0.z, r0.y
					    mul r0.w, r4.w, c19.y
					    rcp r1.x, c4.y
					    mul r1.x, r1.x, c4.x
					    pow r1.y, r4.w, c10.x
					    mul r1.z, r4_abs.w, c8.x
					    mul r1.z, r0.x, r1.z
					    mul r1.z, r1.z, c19.z
					    rcp r1.z, r1.z
					    mov r4.x, c23.x
					    add r1.w, -r4.w, c23.z
					    mov r5.zw, c23.y
					    mov r6.w, c23.x
					    mov r4.yz, c23.y
					    mov r3.w, c23.y
					    rep i0
					      mov r4.w, r0.y
					      break_ge r3.w, r4.w
					      mul r4.w, r0.z, r3.w
					      mad r4.w, r4.w, c21.x, r0.w
					      mad r4.w, r4.w, c21.y, c21.z
					      frc r4.w, r4.w
					      mad r4.w, r4.w, c20.x, c20.y
					      sincos r7.xy, r4.w
					      mul r8.y, r1.x, r7.x
					      mov r8.x, r7.y
					      mul r7.zw, r1.y, r8.xyxy
					      mul r7.xy, r7.yxzw, c21.w
					      mad r7.xy, r7.zwzw, r0.x, r7
					      add_sat r5.xy, r7, v0
					      texldl r7, r5, s1
					      mad r6.xy, r5, c23.z, c23.w
					      mad r6.z, r7.x, c23.z, c23.w
					      dp4 r7.x, c0, r6
					      dp4 r7.y, c1, r6
					      dp4 r7.z, c2, r6
					      dp4 r4.w, c3, r6
					      rcp r4.w, r4.w
					      mad r7, r7.xyzz, r4.w, -r2
					      nrm r6.xyz, r7
					      dp3 r4.w, r6, r3
					      add r5.x, r7_abs.w, c20.z
					      max r6.x, r5.x, c23.y
					      mad_sat r5.x, r6.x, -r1.z, c23.x
					      add r4.z, r4.z, r5.x
					      add r5.y, -r4.w, c7.x
					      lrp_sat r6.x, r4.w, r4.x, -c7.x
					      mul r4.w, r5.x, r6.x
					      mad r4.w, r4.w, r1.w, r4.y
					      cmp r4.y, r5.y, r4.y, r4.w
					      add r3.w, r3.w, c23.x
					    endrep
					    add r0.x, r4.z, c20.w
					    rcp r0.y, r4.z
					    cmp r0.x, r0.x, r0.y, c23.x
					    mul r0.x, r0.x, r4.y
					    mad_sat r0.x, r0.x, -c22.x, c22.y
					    pow r1.x, r0.x, c9.x
					    rcp r0.x, c12.x
					    mul r0.y, r0.x, r2.w
					    mad_sat r0.x, c11.x, r0.x, r0.y
					    add r0.y, r1.x, c23.w
					    mad oC0.w, r0.x, r0.y, c23.x
					    mov oC0.xyz, c22.z
					
					// approximately 119 instruction slots used (7 texture, 112 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						mat4x4 ProjectionMatrixInverse;
						vec4 unused_0_3[8];
						float Radius;
						float Bias;
						float ZThickness;
						float Intensity;
						float SampleDistributionCurve;
						float DrawDistance;
						float DrawDistanceFadeSize;
						int Downsamp;
						int HalfSampling;
						int PreserveDetails;
						int Orthographic;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2[2];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _DitherTexture;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					ivec2 u_xlati1;
					vec3 u_xlat2;
					float u_xlat3;
					ivec2 u_xlati3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat11;
					float u_xlat12;
					bool u_xlatb13;
					float u_xlat16;
					float u_xlat17;
					float u_xlat19;
					int u_xlati20;
					vec2 u_xlat21;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					float u_xlat28;
					bool u_xlatb28;
					void main()
					{
					    u_xlat0 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat8.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
					    u_xlat1 = u_xlat8.yyyy * ProjectionMatrixInverse[1];
					    u_xlat1 = ProjectionMatrixInverse[0] * u_xlat8.xxxx + u_xlat1;
					    u_xlat0 = ProjectionMatrixInverse[2] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = u_xlat0 + ProjectionMatrixInverse[3];
					    u_xlat0 = u_xlat0.xyzz / u_xlat0.wwww;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat17 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat17 = 2.0 / u_xlat17;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat17);
					    u_xlat2.z = u_xlat17 + -1.0;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_TexelSize.zw;
					    u_xlati3.x = PreserveDetails << 2;
					    u_xlati3.y = PreserveDetails << 1;
					    u_xlat17 = float(u_xlati3.y);
					    u_xlat17 = (-u_xlat17) + 5.0;
					    u_xlat25 = float(Downsamp);
					    u_xlat17 = u_xlat25 * u_xlat17 + u_xlat17;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat17);
					    u_xlat1 = textureLod(_DitherTexture, u_xlat1.xy, 0.0);
					    u_xlati1.xy = u_xlati3.xy + ivec2(8, 4);
					    u_xlati1.x = (-HalfSampling) * u_xlati1.y + u_xlati1.x;
					    u_xlat9 = (-u_xlat0.w) + 9.99999975e-05;
					    u_xlat17 = float(Orthographic);
					    u_xlat26 = (-u_xlat9) + 10.0;
					    u_xlat9 = u_xlat17 * u_xlat26 + u_xlat9;
					    u_xlat9 = Radius / u_xlat9;
					    u_xlat17 = float(u_xlati1.x);
					    u_xlat26 = u_xlat1.w * 6.0;
					    u_xlat3 = _ScreenParams.x / _ScreenParams.y;
					    u_xlat11 = log2(u_xlat1.w);
					    u_xlat11 = u_xlat11 * SampleDistributionCurve;
					    u_xlat11 = exp2(u_xlat11);
					    u_xlat19 = abs(u_xlat1.w) * ZThickness;
					    u_xlat19 = u_xlat9 * u_xlat19;
					    u_xlat19 = u_xlat19 * 25.5;
					    u_xlat27 = Bias + 1.0;
					    u_xlat25 = (-u_xlat1.w) + 2.0;
					    u_xlat4 = float(0.0);
					    u_xlat12 = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati1.x ; u_xlati_loop_1++)
					    {
					        u_xlat28 = float(u_xlati_loop_1);
					        u_xlat28 = u_xlat28 / u_xlat17;
					        u_xlat28 = u_xlat28 * 194.778748 + u_xlat26;
					        u_xlat5.x = sin(u_xlat28);
					        u_xlat6.x = cos(u_xlat28);
					        u_xlat7.x = u_xlat3 * u_xlat6.x;
					        u_xlat7.y = u_xlat5.x;
					        u_xlat5.xy = vec2(u_xlat11) * u_xlat7.yx;
					        u_xlat7.z = u_xlat6.x;
					        u_xlat21.xy = u_xlat7.yz * vec2(0.00100000005, 0.00100000005);
					        u_xlat5.xy = u_xlat5.xy * vec2(u_xlat9) + u_xlat21.xy;
					        u_xlat5.xy = u_xlat5.xy + vs_TEXCOORD0.xy;
					        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
					        u_xlat6 = textureLod(_CameraDepthTexture, u_xlat5.xy, 0.0);
					        u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					        u_xlat28 = u_xlat6.x * 2.0 + -1.0;
					        u_xlat6 = u_xlat5.yyyy * ProjectionMatrixInverse[1];
					        u_xlat5 = ProjectionMatrixInverse[0] * u_xlat5.xxxx + u_xlat6;
					        u_xlat5 = ProjectionMatrixInverse[2] * vec4(u_xlat28) + u_xlat5;
					        u_xlat5 = u_xlat5 + ProjectionMatrixInverse[3];
					        u_xlat5 = u_xlat5.xyzz / u_xlat5.wwww;
					        u_xlat5 = (-u_xlat0) + u_xlat5;
					        u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat28 = inversesqrt(u_xlat28);
					        u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					        u_xlat28 = dot(u_xlat5.xyz, u_xlat2.xyz);
					        u_xlat5.x = abs(u_xlat5.w) + -0.800000012;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x / u_xlat19;
					        u_xlat5.x = (-u_xlat5.x) + 1.0;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat12 = u_xlat12 + u_xlat5.x;
					        u_xlatb13 = Bias<u_xlat28;
					        u_xlat28 = u_xlat28 * u_xlat27 + (-Bias);
					        u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					        u_xlat28 = u_xlat5.x * u_xlat28;
					        u_xlat28 = u_xlat28 * u_xlat25 + u_xlat4;
					        u_xlat4 = (u_xlatb13) ? u_xlat28 : u_xlat4;
					    }
					    u_xlatb0 = u_xlat12<0.00999999978;
					    u_xlat0.x = (u_xlatb0) ? 1.0 : u_xlat12;
					    u_xlat0.x = u_xlat4 / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * 1.20000005 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * Intensity;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat8.x = DrawDistance / DrawDistanceFadeSize;
					    u_xlat16 = u_xlat0.w / DrawDistanceFadeSize;
					    u_xlat8.x = u_xlat16 + u_xlat8.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + -1.0;
					    SV_Target0.w = u_xlat8.x * u_xlat0.x + 1.0;
					    SV_Target0.xyz = vec3(0.577350259, 0.577350259, 0.577350259);
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 182534
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[16];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float DepthTolerance;
					//   float2 Kernel;
					//   int PreserveDetails;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _ZBufferParams             c0       1
					//   _MainTex_TexelSize         c1       1
					//   Kernel                     c2       1
					//   DepthTolerance             c3       1
					//   PreserveDetails            c4       1
					//   _CameraDepthNormalsTexture s0       1
					//   _CameraDepthTexture        s1       1
					//   _MainTex                   s2       1
					//
					
					    ps_3_0
					    def c5, 3.55539989, 0, -1.77769995, 1
					    def c6, 2, -1, 1, 5
					    def c7, 0, 5, -4, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s1
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    texld r1, v0, s0
					    mad r0.yzw, r1.xxyz, c5.xxxy, c5.xzzw
					    dp3 r0.w, r0.yzww, r0.yzww
					    rcp r0.w, r0.w
					    add r1.x, r0.w, r0.w
					    mul_pp r1.xy, r0.yzzw, r1.x
					    mad_pp r1.z, r0.w, c6.x, c6.y
					    dp2add_pp r0.y, r1, r1, c5.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    mad r0.y, r0.y, c6.x, c6.z
					    mul r0.y, r0.y, c3.x
					    mov r2.xw, c6
					    mad r0.z, c4.x, -r2.x, r2.w
					    rcp r0.y, r0.y
					    mov r2.zw, c5.y
					    mov r3, c5.y
					    mov r0.w, c5.y
					    mov r1.w, c5.y
					    rep i0
					      mov r4.x, r0.z
					      break_ge r1.w, r4.x
					      add r4.x, r1.w, c4.x
					      add r4.x, r4.x, -c6.x
					      mul r4.xy, r4.x, c2
					      mad r2.xy, r4, c1, v0
					      texldl r4, r2.xyww, s1
					      mad r4.x, c0.z, r4.x, c0.w
					      rcp r4.x, r4.x
					      texldl r5, r2.xyww, s0
					      mad r4.yzw, r5.xxyz, c5.xxxy, c5.xzzw
					      dp3 r4.w, r4.yzww, r4.yzww
					      rcp r4.w, r4.w
					      add r5.x, r4.w, r4.w
					      mul_pp r5.xy, r4.yzzw, r5.x
					      mad_pp r5.z, r4.w, c6.x, c6.y
					      add r4.x, r0.x, -r4.x
					      mad_sat r4.x, r4_abs.x, -r0.y, c5.w
					      dp3_pp r4.y, r5, r1
					      mad_sat r4.y, r4.y, c7.y, c7.z
					      mul r4.z, r4.y, r4.x
					      texldl r5, r2, s2
					      mad r3, r5, r4.z, r3
					      mad r0.w, r4.x, r4.y, r0.w
					      add r1.w, r1.w, c5.w
					    endrep
					    rcp r0.x, r0.w
					    mul oC0, r0.x, r3
					
					// approximately 60 instruction slots used (8 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[14];
						vec2 Kernel;
						float DepthTolerance;
						int PreserveDetails;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					int u_xlati12;
					float u_xlat15;
					float u_xlat18;
					int u_xlati19;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat6.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat18 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat1.xy = u_xlat6.xy * vec2(u_xlat18);
					    u_xlat1.z = u_xlat18 + -1.0;
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x * 2.0 + 1.0;
					    u_xlat6.x = u_xlat6.x * DepthTolerance;
					    u_xlati12 = PreserveDetails << 1;
					    u_xlati12 = (-u_xlati12) + 5;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat18 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati12 ; u_xlati_loop_1++)
					    {
					        u_xlati3 = u_xlati_loop_1 + PreserveDetails;
					        u_xlati3 = u_xlati3 + int(0xFFFFFFFEu);
					        u_xlat3.x = float(u_xlati3);
					        u_xlat3.xy = u_xlat3.xx * vec2(Kernel.x, Kernel.y);
					        u_xlat3.xy = u_xlat3.xy * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_CameraDepthTexture, u_xlat3.xy, 0.0);
					        u_xlat15 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					        u_xlat15 = float(1.0) / u_xlat15;
					        u_xlat4 = textureLod(_CameraDepthNormalsTexture, u_xlat3.xy, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					        u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat21 = 2.0 / u_xlat21;
					        u_xlat4.xy = u_xlat4.xy * vec2(u_xlat21);
					        u_xlat4.z = u_xlat21 + -1.0;
					        u_xlat15 = u_xlat0.x + (-u_xlat15);
					        u_xlat15 = abs(u_xlat15) / u_xlat6.x;
					        u_xlat15 = (-u_xlat15) + 1.0;
					        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					        u_xlat21 = dot(u_xlat4.xyz, u_xlat1.xyz);
					        u_xlat21 = u_xlat21 * 5.0 + -4.0;
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat4.x = u_xlat21 * u_xlat15;
					        u_xlat5 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat2 = u_xlat5 * u_xlat4.xxxx + u_xlat2;
					        u_xlat18 = u_xlat15 * u_xlat21 + u_xlat18;
					    }
					    SV_Target0 = u_xlat2 / vec4(u_xlat18);
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 257903
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[15];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float BrightnessThreshold;
					//   float ColorBleedAmount;
					//   float SelfBleedReduction;
					//   sampler2D _MainTex;
					//   sampler2D _SSAO;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   ColorBleedAmount    c0       1
					//   SelfBleedReduction  c1       1
					//   BrightnessThreshold c2       1
					//   _MainTex            s0       1
					//   _SSAO               s1       1
					//
					
					    ps_3_0
					    def c3, 0, 3, -1, 1
					    def c4, -0.577350259, 0.577350259, 0.5, 0
					    def c5, 2, -1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    max r1, r0, c3.x
					    texld r0, v1, s0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad r2.xyz, r0, r0.w, -r1
					    rcp r0.w, r0.w
					    mul_sat r0.w, r0.w, c2.x
					    lrp r2.w, r0.w, c3.w, r1.w
					    add r1.xyz, r1, c4.x
					    dp3 r0.w, r2, r2
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul_sat r0.w, r0.w, c3.y
					    add r0.w, r0.w, c3.z
					    mov r1.w, c3.w
					    mad r0.w, c1.x, r0.w, r1.w
					    mad r1.xyz, r0.w, r1, c4.y
					    add r0.w, r2.w, r2.w
					    mov_sat r0.w, r0.w
					    mul r2.xyz, r1, r0.w
					    mad_sat r0.w, r2.w, c5.x, c5.y
					    lrp r3.xyz, r0.w, c3.w, r1
					    add r0.w, -r2.w, c4.z
					    cmp r1.xyz, r0.w, r2, r3
					    lrp r3.xyz, c0.x, r1, r2.w
					    mul oC0.xyz, r0, r3
					    mov oC0.w, c3.w
					
					// approximately 28 instruction slots used (2 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[21];
						float ColorBleedAmount;
						float SelfBleedReduction;
						float BrightnessThreshold;
					};
					uniform  sampler2D _SSAO;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat9);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * BrightnessThreshold;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2 = texture(_SSAO, vs_TEXCOORD0.xy);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 3.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x + -1.0;
					    u_xlat1.x = SelfBleedReduction * u_xlat1.x + 1.0;
					    u_xlat4.xyz = u_xlat2.xyz + vec3(-0.577350259, -0.577350259, -0.577350259);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + vec3(0.577350259, 0.577350259, 0.577350259);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10 = (-u_xlat2.w) + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat10 + u_xlat2.w;
					    u_xlat10 = u_xlat9 * 2.0 + -1.0;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat10 = u_xlat9 + u_xlat9;
					    u_xlat10 = u_xlat10;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10);
					    u_xlatb10 = 0.5<u_xlat9;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(vec3(ColorBleedAmount, ColorBleedAmount, ColorBleedAmount)) * u_xlat1.xyz + vec3(u_xlat9);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 321699
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[15];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mov oC0.xyz, r0.x
					    mov oC0.w, c0.x
					
					// approximately 3 instruction slots used (1 texture, 2 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xxx;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 346738
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[15];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float ColorBleedAmount;
					//   float SelfBleedReduction;
					//   sampler2D _MainTex;
					//   sampler2D _SSAO;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   ColorBleedAmount   c0       1
					//   SelfBleedReduction c1       1
					//   _MainTex           s0       1
					//   _SSAO              s1       1
					//
					
					    ps_3_0
					    def c2, 3, -1, 1, -0.577350259
					    def c3, 0.5, 2, -1, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    texld r1, v0, s1
					    mad r0.xyz, r0, r0.w, -r1
					    dp3 r0.x, r0, r0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul_sat r0.x, r0.x, c2.x
					    add r0.x, r0.x, c2.y
					    mov r0.z, c2.z
					    mad r0.x, c1.x, r0.x, r0.z
					    lrp r2.xyz, r0.x, r1, -c2.w
					    add r0.x, r1.w, r1.w
					    mov_sat r0.x, r0.x
					    mul r0.xyz, r2, r0.x
					    mad_sat r0.w, r1.w, c3.y, c3.z
					    lrp r1.xyz, r0.w, c2.z, r2
					    add r0.w, -r1.w, c3.x
					    cmp r0.xyz, r0.w, r0, r1
					    add r0.xyz, -r1.w, r0
					    mad oC0.xyz, c0.x, r0, r1.w
					    mov oC0.w, c2.z
					
					// approximately 23 instruction slots used (2 texture, 21 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[21];
						float ColorBleedAmount;
						float SelfBleedReduction;
					};
					uniform  sampler2D _SSAO;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1 = texture(_SSAO, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = u_xlat0.x + -1.0;
					    u_xlat0.x = SelfBleedReduction * u_xlat0.x + 1.0;
					    u_xlat2.xyz = u_xlat1.xyz + vec3(-0.577350259, -0.577350259, -0.577350259);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + vec3(0.577350259, 0.577350259, 0.577350259);
					    u_xlat1.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat1.w * 2.0 + -1.0;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = u_xlat1.w + u_xlat1.w;
					    u_xlat6 = u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlatb6 = 0.5<u_xlat1.w;
					    u_xlat0.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat1.www) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(vec3(ColorBleedAmount, ColorBleedAmount, ColorBleedAmount)) * u_xlat0.xyz + u_xlat1.www;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 407759
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[16];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float DepthTolerance;
					//   float2 Kernel;
					//   int PreserveDetails;
					//   row_major float4x4 ProjectionMatrixInverse;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   ProjectionMatrixInverse    c0       3
					//   _MainTex_TexelSize         c3       1
					//   Kernel                     c4       1
					//   DepthTolerance             c5       1
					//   PreserveDetails            c6       1
					//   _CameraDepthNormalsTexture s0       1
					//   _CameraDepthTexture        s1       1
					//   _MainTex                   s2       1
					//
					
					    ps_3_0
					    def c7, 3.55539989, 0, -1.77769995, 1
					    def c8, 2, 5, 0, -4
					    def c9, 2, -1, 0, 1
					    def c10, 0.200000003, -1.10000002, 0, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s1
					    mad r0.x, r0.x, c9.x, c9.y
					    mad r0.x, c2.z, r0.x, c2.w
					    texld r1, v0, s0
					    mad r0.yzw, r1.xxyz, c7.xxxy, c7.xzzw
					    dp3 r0.w, r0.yzww, r0.yzww
					    rcp r0.w, r0.w
					    add r1.x, r0.w, r0.w
					    mul_pp r1.xy, r0.yzzw, r1.x
					    mad_pp r1.z, r0.w, c9.x, c9.y
					    dp2add_pp r0.y, r1, r1, c9.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    mad r0.y, r0.y, c9.x, c9.w
					    mul r0.y, r0.y, c5.x
					    mov r2.xy, c8
					    mad r0.z, c6.x, -r2.x, r2.y
					    rcp r0.y, r0.y
					    mov r2.zw, c9.z
					    mov r3, c9.z
					    mov r4, c9.z
					    mov r0.w, c9.z
					    mov r1.w, c9.z
					    rep i0
					      mov r5.x, r0.z
					      break_ge r1.w, r5.x
					      add r5.x, r1.w, c6.x
					      add r5.x, r5.x, -c9.x
					      mul r5.xy, r5.x, c4
					      mad r2.xy, r5, c3, v0
					      texldl r5, r2.xyww, s1
					      mad r5.x, r5.x, c9.x, c9.y
					      mad r5.x, c2.z, r5.x, c2.w
					      texldl r6, r2.xyww, s0
					      mad r5.yzw, r6.xxyz, c7.xxxy, c7.xzzw
					      dp3 r5.w, r5.yzww, r5.yzww
					      rcp r5.w, r5.w
					      add r6.x, r5.w, r5.w
					      mul_pp r6.xy, r5.yzzw, r6.x
					      mad_pp r6.z, r5.w, c9.x, c9.y
					      add r5.x, -r0.x, r5.x
					      mad_sat r5.x, r5_abs.x, -r0.y, c9.w
					      dp3_pp r5.y, r6, r1
					      mad_sat r5.y, r5.y, c8.y, c8.w
					      mul r5.z, r5.y, r5.x
					      texldl r6, r2, s2
					      add r4, r4, r6
					      mad r3, r6, r5.z, r3
					      mad r0.w, r5.x, r5.y, r0.w
					      add r1.w, r1.w, c9.w
					    endrep
					    mul r1, r4, c10.x
					    rcp r0.x, r0.w
					    mul r2, r0.x, r3
					    add r0.x, r0.w, c10.y
					    cmp oC0, r0.x, r2, r1
					
					// approximately 65 instruction slots used (8 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						mat4x4 ProjectionMatrixInverse;
						vec4 unused_0_3[10];
						vec2 Kernel;
						float DepthTolerance;
						int PreserveDetails;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					int u_xlati14;
					float u_xlat18;
					float u_xlat21;
					int u_xlati22;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
					    u_xlat0.x = ProjectionMatrixInverse[2].z * u_xlat0.x + ProjectionMatrixInverse[3].z;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat7.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat21 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat1.xy = u_xlat7.xy * vec2(u_xlat21);
					    u_xlat1.z = u_xlat21 + -1.0;
					    u_xlat7.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * 2.0 + 1.0;
					    u_xlat7.x = u_xlat7.x * DepthTolerance;
					    u_xlati14 = PreserveDetails << 1;
					    u_xlati14 = (-u_xlati14) + 5;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    u_xlat21 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati14 ; u_xlati_loop_1++)
					    {
					        u_xlati4 = u_xlati_loop_1 + PreserveDetails;
					        u_xlati4 = u_xlati4 + int(0xFFFFFFFEu);
					        u_xlat4.x = float(u_xlati4);
					        u_xlat4.xy = u_xlat4.xx * vec2(Kernel.x, Kernel.y);
					        u_xlat4.xy = u_xlat4.xy * _MainTex_TexelSize.xy + vs_TEXCOORD0.xy;
					        u_xlat5 = textureLod(_CameraDepthTexture, u_xlat4.xy, 0.0);
					        u_xlat18 = u_xlat5.x * 2.0 + -1.0;
					        u_xlat18 = ProjectionMatrixInverse[2].z * u_xlat18 + ProjectionMatrixInverse[3].z;
					        u_xlat5 = textureLod(_CameraDepthNormalsTexture, u_xlat4.xy, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					        u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat25 = 2.0 / u_xlat25;
					        u_xlat5.xy = u_xlat5.xy * vec2(u_xlat25);
					        u_xlat5.z = u_xlat25 + -1.0;
					        u_xlat18 = (-u_xlat0.x) + u_xlat18;
					        u_xlat18 = abs(u_xlat18) / u_xlat7.x;
					        u_xlat18 = (-u_xlat18) + 1.0;
					        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					        u_xlat25 = dot(u_xlat5.xyz, u_xlat1.xyz);
					        u_xlat25 = u_xlat25 * 5.0 + -4.0;
					        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					        u_xlat5.x = u_xlat25 * u_xlat18;
					        u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					        u_xlat3 = u_xlat3 + u_xlat6;
					        u_xlat2 = u_xlat6 * u_xlat5.xxxx + u_xlat2;
					        u_xlat21 = u_xlat18 * u_xlat25 + u_xlat21;
					    }
					    u_xlat1 = u_xlat3 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlatb0 = u_xlat21<1.10000002;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat1 : u_xlat2;
					    return;
					}"
}
}
 }
}
Fallback Off
}