Shader "Hidden/Dof/DepthOfFieldHdr" {
Properties {
 _MainTex ("-", 2D) = "black" { }
 _FgOverlap ("-", 2D) = "black" { }
 _LowRez ("-", 2D) = "black" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  ColorMask A
  GpuProgramID 11717
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CurveParams;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CurveParams        c1       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp r0.x, r0.x
					    add r0.y, r0.x, -c1.w
					    add r0.x, r0.x, c2.x
					    rcp r0.x, r0.x
					    mul r0.y, r0_abs.y, c1.z
					    mad r0.x, r0.y, r0.x, -c1.y
					    max r1.x, r0.x, c2.y
					    min oC0.w, c1.x, r1.x
					    mov oC0.xyz, c2.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1 = u_xlat0.x + (-_CurveParams.w);
					    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
					    u_xlat1 = abs(u_xlat1) * _CurveParams.z;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CurveParams.y);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    SV_Target0.w = min(u_xlat0.x, _CurveParams.x);
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 122024
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = 1.0;
					    u_xlat0.zw = _MainTex_TexelSize.xy;
					    u_xlat0 = u_xlat0.xxzw * _Offsets.xyxy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, -0.166666672, -0.166666672) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD2 = u_xlat0.zwzw * vec4(0.333333343, 0.333333343, -0.333333343, -0.333333343) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat0.zwzw * vec4(0.5, 0.5, -0.5, -0.5) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD4 = u_xlat0.zwzw * vec4(0.666666687, 0.666666687, -0.666666687, -0.666666687) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD5 = u_xlat0.zwzw * vec4(0.833333373, 0.833333373, -0.833333373, -0.833333373) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.800000012, 0.649999976, 0.5, 0.400000006
					    def c1, 0.200000003, 9.99999975e-005, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    texld r0, v1, s0
					    mul r1.x, r0.w, c0.x
					    mul r1, r0, r1.x
					    texld r2, v0, s0
					    mad r1, r2, r2.w, r1
					    mad r0.x, r0.w, c0.x, r2.w
					    texld r2, v1.zwzw, s0
					    mul r0.y, r2.w, c0.x
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.x, r0.x
					    texld r2, v2, s0
					    mul r0.y, r2.w, c0.y
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.y, r0.x
					    texld r2, v2.zwzw, s0
					    mul r0.y, r2.w, c0.y
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.y, r0.x
					    texld r2, v3, s0
					    mul r0.y, r2.w, c0.z
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.z, r0.x
					    texld r2, v3.zwzw, s0
					    mul r0.y, r2.w, c0.z
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.z, r0.x
					    texld r2, v4, s0
					    mul r0.y, r2.w, c0.w
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.w, r0.x
					    texld r2, v4.zwzw, s0
					    mul r0.y, r2.w, c0.w
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c0.w, r0.x
					    texld r2, v5, s0
					    mul r0.y, r2.w, c1.x
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c1.x, r0.x
					    texld r2, v5.zwzw, s0
					    mul r0.y, r2.w, c1.x
					    mad r1, r2, r0.y, r1
					    mad r0.x, r2.w, c1.x, r0.x
					    add r0.x, r0.x, c1.y
					    rcp r0.x, r0.x
					    mul oC0, r0.x, r1
					
					// approximately 45 instruction slots used (11 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat0.w * 0.800000012;
					    u_xlat1 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat2 * u_xlat2.wwww + u_xlat1;
					    u_xlat0.x = u_xlat0.w * 0.800000012 + u_xlat2.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat3 = u_xlat2.w * 0.800000012;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.800000012 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat3 = u_xlat2.w * 0.649999976;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.649999976 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat3 = u_xlat2.w * 0.649999976;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.649999976 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3 = u_xlat2.w * 0.5;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.5 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat3 = u_xlat2.w * 0.5;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.5 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat3 = u_xlat2.w * 0.400000006;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.400000006 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD4.zw);
					    u_xlat3 = u_xlat2.w * 0.400000006;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.400000006 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat3 = u_xlat2.w * 0.200000003;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.200000003 + u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD5.zw);
					    u_xlat3 = u_xlat2.w * 0.200000003;
					    u_xlat1 = u_xlat2 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0.x = u_xlat2.w * 0.200000003 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + 9.99999975e-05;
					    SV_Target0 = u_xlat1 / u_xlat0.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 180409
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = 1.0;
					    u_xlat0.zw = _MainTex_TexelSize.xy;
					    u_xlat0 = u_xlat0.xxzw * _Offsets.xyxy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, -0.166666672, -0.166666672) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD2 = u_xlat0.zwzw * vec4(0.333333343, 0.333333343, -0.333333343, -0.333333343) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat0.zwzw * vec4(0.5, 0.5, -0.5, -0.5) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD4 = u_xlat0.zwzw * vec4(0.666666687, 0.666666687, -0.666666687, -0.666666687) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD5 = u_xlat0.zwzw * vec4(0.833333373, 0.833333373, -0.833333373, -0.833333373) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.5, -2, 3, 0.800000012
					    def c1, 0.675000012, 0.200000003, 0.075000003, 9.99999975e-005
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    texld r0, v1.zwzw, s0
					    texld r1, v1, s0
					    texld r2, v0, s0
					    add r3.x, r1.w, -r2.w
					    add r3.x, r3.x, c0.x
					    add_sat r3.x, r3.x, r3.x
					    mad r3.y, r3.x, c0.y, c0.z
					    mul r3.x, r3.x, r3.x
					    mul r3.x, r3.x, r3.y
					    mul r3.y, r3.x, c0.w
					    mad r3.x, r3.x, c0.w, r2.w
					    mul r1, r1, r3.y
					    mad r1, r2, r2.w, r1
					    add r2.x, r0.w, -r2.w
					    add r2.x, r2.x, c0.x
					    add_sat r2.x, r2.x, r2.x
					    mad r2.y, r2.x, c0.y, c0.z
					    mul r2.x, r2.x, r2.x
					    mul r2.x, r2.x, r2.y
					    mul r2.y, r2.x, c0.w
					    mad r2.x, r2.x, c0.w, r3.x
					    mad r0, r0, r2.y, r1
					    texld r1, v2, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.x
					    mad r2.x, r2.y, c1.x, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v2.zwzw, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.x
					    mad r2.x, r2.y, c1.x, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v3, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c0.x
					    mad r2.x, r2.y, c0.x, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v3.zwzw, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c0.x
					    mad r2.x, r2.y, c0.x, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v4, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.y
					    mad r2.x, r2.y, c1.y, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v4.zwzw, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.y
					    mad r2.x, r2.y, c1.y, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v5, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.z
					    mad r2.x, r2.y, c1.z, r2.x
					    mad r0, r1, r2.z, r0
					    texld r1, v5.zwzw, s0
					    add r2.y, -r2.w, r1.w
					    add r2.y, r2.y, c0.x
					    add_sat r2.y, r2.y, r2.y
					    mad r2.z, r2.y, c0.y, c0.z
					    mul r2.y, r2.y, r2.y
					    mul r2.y, r2.y, r2.z
					    mul r2.z, r2.y, c1.z
					    mad r2.x, r2.y, c1.z, r2.x
					    add r2.x, r2.x, c1.w
					    rcp r2.x, r2.x
					    mad r0, r1, r2.z, r0
					    mul oC0, r2.x, r0
					
					// approximately 105 instruction slots used (11 texture, 94 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat1.w + (-u_xlat2.w);
					    u_xlat3 = u_xlat3 + 0.5;
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat7 = u_xlat3 * -2.0 + 3.0;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat7;
					    u_xlat7 = u_xlat3 * 0.800000012;
					    u_xlat3 = u_xlat3 * 0.800000012 + u_xlat2.w;
					    u_xlat1 = u_xlat1 * vec4(u_xlat7);
					    u_xlat1 = u_xlat2 * u_xlat2.wwww + u_xlat1;
					    u_xlat2.x = u_xlat0.w + (-u_xlat2.w);
					    u_xlat2.x = u_xlat2.x + 0.5;
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat6 = u_xlat2.x * -2.0 + 3.0;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat6;
					    u_xlat6 = u_xlat2.x * 0.800000012;
					    u_xlat2.x = u_xlat2.x * 0.800000012 + u_xlat3;
					    u_xlat0 = u_xlat0 * vec4(u_xlat6) + u_xlat1;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.675000012;
					    u_xlat2.x = u_xlat6 * 0.675000012 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.675000012;
					    u_xlat2.x = u_xlat6 * 0.675000012 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.5;
					    u_xlat2.x = u_xlat6 * 0.5 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.5;
					    u_xlat2.x = u_xlat6 * 0.5 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.200000003;
					    u_xlat2.x = u_xlat6 * 0.200000003 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD4.zw);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.200000003;
					    u_xlat2.x = u_xlat6 * 0.200000003 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.075000003;
					    u_xlat2.x = u_xlat6 * 0.075000003 + u_xlat2.x;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD5.zw);
					    u_xlat6 = (-u_xlat2.w) + u_xlat1.w;
					    u_xlat6 = u_xlat6 + 0.5;
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat10 = u_xlat6 * -2.0 + 3.0;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat10 = u_xlat6 * 0.075000003;
					    u_xlat2.x = u_xlat6 * 0.075000003 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-05;
					    u_xlat0 = u_xlat1 * vec4(u_xlat10) + u_xlat0;
					    SV_Target0 = u_xlat0 / u_xlat2.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend One One
 BlendOp Max
  ColorMask A
  GpuProgramID 246969
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld oC0, v0, s0
					
					// approximately 1 instruction slot used (1 texture, 0 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  ColorMask A
  GpuProgramID 303501
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CurveParams;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CurveParams        c1       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp r0.x, r0.x
					    add r0.y, -r0.x, c1.w
					    add r0.x, r0.x, c2.x
					    rcp r0.x, r0.x
					    mul r0.y, r0.y, c1.z
					    mad r0.x, r0.y, r0.x, -c1.y
					    max r1.x, r0.x, c2.y
					    min oC0.w, c1.x, r1.x
					    mov oC0.xyz, c2.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1 = (-u_xlat0.x) + _CurveParams.w;
					    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
					    u_xlat1 = u_xlat1 * _CurveParams.z;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CurveParams.y);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    SV_Target0.w = min(u_xlat0.x, _CurveParams.x);
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 338472
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.0909090936, 1, -1, 0
					    def c3, 0.400000006, 2.5, -2, 3
					    def c4, 9.99999975e-006, 0, 0, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul r1, r0.w, r0
					    mul r0.x, r0.w, c2.x
					    mov r2.xy, c1
					    mul r2, r2.xyxy, c0.xyxy
					    mul r2, r0.x, r2
					    mul r2, r2, c2.yyzz
					    mov r3, r1
					    mov r0.y, r0.w
					    mov r0.z, c2.y
					    rep i0
					      mad r4, r2, r0.z, v0.xyxy
					      texld r5, r4, s0
					      texld r4, r4.zwzw, s0
					      mov r6.x, r5.w
					      mov r6.y, r4.w
					      mad r6.xy, r0.x, -r0.z, r6
					      add r6.xy, r6, c3.x
					      mul_sat r6.xy, r6, c3.y
					      mad r6.zw, r6.xyxy, c3.z, c3.w
					      mul r6.xy, r6, r6
					      mul r6.xy, r6, r6.zwzw
					      mul r4, r4, r6.y
					      mad r4, r5, r6.x, r4
					      add r3, r3, r4
					      dp2add r0.y, r6, c2.y, r0.y
					      add r0.z, r0.z, c2.y
					    endrep
					    add r0.x, r0.y, c4.x
					    rcp r0.x, r0.x
					    mul oC0, r0.x, r3
					
					// approximately 35 instruction slots used (3 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					int u_xlati16;
					vec2 u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1 = u_xlat0.wwww * u_xlat0;
					    u_xlat0.x = u_xlat0.w * 0.0909090936;
					    u_xlat2 = _MainTex_TexelSize.xyxy * _Offsets.xyxy;
					    u_xlat2 = u_xlat0.xxxx * u_xlat2;
					    u_xlat2 = u_xlat2 * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat3 = u_xlat1;
					    u_xlat8 = u_xlat0.w;
					    for(int u_xlati_loop_1 = 1 ; u_xlati_loop_1<12 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlat5 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD1.xyxy;
					        u_xlat6 = texture(_MainTex, u_xlat5.xy);
					        u_xlat5 = texture(_MainTex, u_xlat5.zw);
					        u_xlat7.x = u_xlat6.w;
					        u_xlat7.y = u_xlat5.w;
					        u_xlat4.xy = (-u_xlat0.xx) * u_xlat4.xx + u_xlat7.xy;
					        u_xlat4.xy = u_xlat4.xy + vec2(0.400000006, 0.400000006);
					        u_xlat4.xy = u_xlat4.xy * vec2(2.5, 2.5);
					        u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					        u_xlat20.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					        u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					        u_xlat4.xy = u_xlat4.xy * u_xlat20.xy;
					        u_xlat5 = u_xlat4.yyyy * u_xlat5;
					        u_xlat5 = u_xlat6 * u_xlat4.xxxx + u_xlat5;
					        u_xlat3 = u_xlat3 + u_xlat5;
					        u_xlat4.x = dot(u_xlat4.xy, vec2(1.0, 1.0));
					        u_xlat8 = u_xlat8 + u_xlat4.x;
					    }
					    u_xlat0.x = u_xlat8 + 9.99999975e-06;
					    SV_Target0 = u_xlat3 / u_xlat0.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 445210
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 1.24999997e-006, 0, 0, 0
					    def c2, 0.75, -0.75, 10, 1
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mad r1, c0.xyxy, r0.xxxy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    mov r3.x, r2.w
					    mad r0, c0.xyxy, -r0.xxxy, v0.xyxy
					    texld r4, r0, s0
					    texld r0, r0.zwzw, s0
					    mov r3.y, r4.w
					    mov r3.z, r1.w
					    mov r3.w, r0.w
					    mul_sat r3, r3, c2.z
					    mul r4.xyz, r3.y, r4
					    mad r2.xyz, r2, r3.x, r4
					    mad r1.xyz, r1, r3.z, r2
					    mad r0.xyz, r0, r3.w, r1
					    dp4 r0.w, r3, c2.w
					    rcp r1.x, r0.w
					    mul r0.xyz, r0, r1.x
					    texld r1, v0, s0
					    mad r0.w, r1.w, -r0.w, c1.x
					    cmp oC0.xyz, r0.w, r1, r0
					    mov oC0.w, r1.w
					
					// approximately 23 instruction slots used (5 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.x = u_xlat1.w;
					    u_xlat3 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2.y = u_xlat4.w;
					    u_xlat2.z = u_xlat0.w;
					    u_xlat2.w = u_xlat3.w;
					    u_xlat2 = u_xlat2 * vec4(10.0, 10.0, 10.0, 10.0);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat2.www + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat15);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = u_xlat15 * u_xlat1.w;
					    u_xlatb15 = 1.24999997e-06<u_xlat15;
					    SV_Target0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask RGB
  GpuProgramID 494496
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 5, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul_sat r0.w, r0.w, c0.x
					    mov oC0.xyz, r0
					    add oC0.w, -r0.w, c0.y
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat0.w * 5.0;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = (-u_xlat3) + 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  ColorMask A
  GpuProgramID 529682
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CurveParams;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CurveParams        c1       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 0, 1, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp r0.x, r0.x
					    add r0.y, -r0.x, c1.w
					    add r0.x, r0.x, c2.x
					    rcp r0.x, r0.x
					    mul r0.y, r0.y, c1.z
					    mad r0.x, r0.y, r0.x, -c1.y
					    max r1.x, r0.x, c2.y
					    min r0.x, c1.x, r1.x
					    cmp oC0, -r0.x, c2.y, c2.z
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1 = (-u_xlat0.x) + _CurveParams.w;
					    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
					    u_xlat1 = u_xlat1 * _CurveParams.z;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CurveParams.y);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _CurveParams.x);
					    u_xlatb0 = 0.0<u_xlat0.x;
					    SV_Target0 = bool(u_xlatb0) ? vec4(1.0, 1.0, 1.0, 1.0) : vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 601509
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _FgOverlap;
					//   sampler2D _LowRez;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _FgOverlap   s1       1
					//   _LowRez      s2       1
					//
					
					    ps_3_0
					    def c0, 8, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s1
					    texld r1, v0, s0
					    max r2.x, r1.w, r0.w
					    mul_sat r0.x, r2.x, c0.x
					    texld r2, v0, s2
					    add r0.yzw, -r1.xxyz, r2.xxyz
					    mad oC0.xyz, r0.x, r0.yzww, r1
					    mov oC0.w, r1.w
					
					// approximately 8 instruction slots used (3 texture, 5 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LowRez;
					uniform  sampler2D _FgOverlap;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_FgOverlap, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = max(u_xlat0.w, u_xlat1.w);
					    u_xlat0.x = u_xlat0.x * 8.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2 = texture(_LowRez, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 711380
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CurveParams;
					//   sampler2D _MainTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CurveParams        c1       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 0, 1, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp r0.x, r0.x
					    add r0.y, r0.x, c2.x
					    add r0.x, r0.x, -c1.w
					    rcp r0.y, r0.y
					    mul r0.z, r0_abs.x, c1.z
					    mad r0.y, r0.z, r0.y, -c1.y
					    max r1.x, r0.y, c2.y
					    min r0.y, c1.x, r1.x
					    cmp r0.z, -r0.x, c2.y, c2.z
					    cmp r0.x, r0.x, -c2.y, -c2.z
					    add r0.x, r0.x, r0.z
					    mul oC0.w, r0.x, r0.y
					    texld r0, v0, s0
					    mov oC0.xyz, r0
					
					// approximately 16 instruction slots used (2 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					float u_xlat2;
					int u_xlati2;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1 = u_xlat0.x + 9.99999975e-06;
					    u_xlat0.x = u_xlat0.x + (-_CurveParams.w);
					    u_xlat2 = abs(u_xlat0.x) * _CurveParams.z;
					    u_xlat1 = u_xlat2 / u_xlat1;
					    u_xlat1 = u_xlat1 + (-_CurveParams.y);
					    u_xlat1 = max(u_xlat1, 0.0);
					    u_xlat1 = min(u_xlat1, _CurveParams.x);
					    u_xlati2 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati2) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    SV_Target0.w = u_xlat0.x * u_xlat1;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 775608
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.25, 0.827899992, 0.264999986, 3.77358508
					    def c3, -2, 3, 0.954349995, 0.582530022
					    def c4, 0.227779999, 0.232299998, 0.880999982, 0.588310003
					    def c5, 0.839450002, 0.538760006, 0.787039995, 0.526639998
					    def c6, 0.915470004, 0.570110023, 0.448379993, 0.555670023
					    def c7, 0.958580017, 0.919380009, 0.837679982, 0.267569989
					    def c8, 0.883040011, 0.245770007, 0.870270014, 0.956820011
					    def c9, 0.99326998, 0.620289981, 0.867039979, 0.542800009
					    def c10, 0.609820008, 0, 0, 0
					    def c11, 0.46430999, 0.281150013, -0.0721400008, 0.605539978
					    def c12, -0.222340003, -0.579069972, 0.550520003, -0.669839978
					    def c13, -0.758210003, 0.583630025, 0.992839992, -0.0290399995
					    def c14, 0.216659993, 0.116020001, 0.156959996, -0.856000006
					    def c15, -0.194240004, -0.184019998, -0.436670005, 0.767509997
					    def c16, -0.590009987, -0.705089986, -0.800650001, 0.246309996
					    def c17, 0.211789995, 0.51372999, 0.0548299998, 0.957009971
					    def c18, -0.488880008, -0.293300003, 0.440140009, -0.0855799988
					    def c19, -0.52609998, 0.0238600001, -0.882160008, -0.244709998
					    def c20, -0.366219997, 0.39515999, 0.755909979, 0.219160005
					    def c21, 0.107589997, -0.578390002, 0.282849997, 0.790359974
					    def c22, -0.203879997, 0.111330003, 0.831139982, -0.292180002
					    def c23, 0.387719989, -0.434749991, 0.121260002, -0.192819998
					    def c24, 0.624629974, 0.543370008, -0.13414, -0.944880009
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul r1, r0.w, c0.xyxy
					    mul r1, r1, c1.w
					    mad r2, r1.zwzw, c24, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mad r4.x, r0.w, -c2.y, r3.w
					    add r4.x, r4.x, c2.z
					    mul_sat r4.x, r4.x, c2.w
					    mad r4.y, r4.x, c3.x, c3.y
					    mul r4.x, r4.x, r4.x
					    mul r4.z, r4.x, r4.y
					    mul r4.w, r0.w, c2.x
					    max r5.w, r4.w, c1.z
					    mul r5.xyz, r0, r5.w
					    mad r6.xyz, r3, r4.z, r5
					    mad r6.w, r4.y, r4.x, r5.w
					    cmp r3, -r3.w, r5, r6
					    mad r0.x, r0.w, -c3.z, r2.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r3.w
					    mad r4.xyz, r2, r0.z, r3
					    cmp r2, -r2.w, r3, r4
					    mad r3, r1.zwzw, c23, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c3.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c4.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c22, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c4.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c4.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c21, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c4.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c5.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c20, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c5.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c5.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c19, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c5.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c6.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c18, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c6.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c6.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c17, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c6.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c7.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c16, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c7.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c7.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c15, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c7.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c8.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c14, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c8.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c8.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c13, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c8.w, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c9.x, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r3, r1.zwzw, c12, v0.xyxy
					    mad r1, r1, c11, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r0.x, r0.w, -c9.y, r4.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r5.w, r0.y, r0.x, r2.w
					    mad r5.xyz, r4, r0.z, r2
					    cmp r2, -r4.w, r2, r5
					    mad r0.x, r0.w, -c9.z, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    mad r0.x, r0.w, -c9.w, r3.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r4.w, r0.y, r0.x, r2.w
					    mad r4.xyz, r3, r0.z, r2
					    cmp r2, -r3.w, r2, r4
					    mad r0.x, r0.w, -c10.x, r1.w
					    mov oC0.w, r0.w
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.y, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul r0.z, r0.x, r0.y
					    mad r3.w, r0.y, r0.x, r2.w
					    mad r3.xyz, r1, r0.z, r2
					    cmp r0, -r1.w, r2, r3
					    rcp r0.w, r0.w
					    mul oC0.xyz, r0.w, r0
					
					// approximately 303 instruction slots used (29 texture, 274 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					float ImmCB_0_0_2[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat9;
					float u_xlat11;
					float u_xlat16;
					int u_xlati17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
						ImmCB_0_0_2[0] = 0.827899992;
						ImmCB_0_0_2[1] = 0.954349995;
						ImmCB_0_0_2[2] = 0.582530022;
						ImmCB_0_0_2[3] = 0.227779999;
						ImmCB_0_0_2[4] = 0.232299998;
						ImmCB_0_0_2[5] = 0.880999982;
						ImmCB_0_0_2[6] = 0.588310003;
						ImmCB_0_0_2[7] = 0.839450002;
						ImmCB_0_0_2[8] = 0.538760006;
						ImmCB_0_0_2[9] = 0.787039995;
						ImmCB_0_0_2[10] = 0.526639998;
						ImmCB_0_0_2[11] = 0.915470004;
						ImmCB_0_0_2[12] = 0.570110023;
						ImmCB_0_0_2[13] = 0.448379993;
						ImmCB_0_0_2[14] = 0.555670023;
						ImmCB_0_0_2[15] = 0.958580017;
						ImmCB_0_0_2[16] = 0.919380009;
						ImmCB_0_0_2[17] = 0.837679982;
						ImmCB_0_0_2[18] = 0.267569989;
						ImmCB_0_0_2[19] = 0.883040011;
						ImmCB_0_0_2[20] = 0.245770007;
						ImmCB_0_0_2[21] = 0.870270014;
						ImmCB_0_0_2[22] = 0.956820011;
						ImmCB_0_0_2[23] = 0.99326998;
						ImmCB_0_0_2[24] = 0.620289981;
						ImmCB_0_0_2[25] = 0.867039979;
						ImmCB_0_0_2[26] = 0.542800009;
						ImmCB_0_0_2[27] = 0.609820008;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat0.ww * _MainTex_TexelSize.xy;
					    u_xlat1.xy = u_xlat1.xy * _Offsets.ww;
					    u_xlat11 = u_xlat0.w * 0.25;
					    u_xlat11 = max(u_xlat11, _Offsets.z);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
					    u_xlat2.xyz = u_xlat0.xyz;
					    u_xlat16 = u_xlat11;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat1.xy + vs_TEXCOORD1.xy;
					        u_xlat3 = texture(_MainTex, u_xlat3.xy);
					        u_xlatb4 = 0.0<u_xlat3.w;
					        if(u_xlatb4){
					            u_xlat18 = (-u_xlat0.w) * ImmCB_0_0_2[u_xlati_loop_1] + u_xlat3.w;
					            u_xlat18 = u_xlat18 + 0.264999986;
					            u_xlat18 = u_xlat18 * 3.77358508;
					            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					            u_xlat4 = u_xlat18 * -2.0 + 3.0;
					            u_xlat18 = u_xlat18 * u_xlat18;
					            u_xlat9 = u_xlat18 * u_xlat4;
					            u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat9) + u_xlat2.xyz;
					            u_xlat16 = u_xlat4 * u_xlat18 + u_xlat16;
					        }
					    }
					    SV_Target0.xyz = u_xlat2.xyz / vec3(u_xlat16);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 787741
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _LowRez;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//   _LowRez            s1       1
					//
					
					    ps_3_0
					    def c2, 0.25, 0.100000001, 0.572735727, 0.264999986
					    def c3, 3.77358508, -2, 3, 0.92769593
					    def c4, 0.915891469, 0.718492448, 1.08008385, 0.741635561
					    def c5, 1.0190047, 1.00339437, 0.562654853, 1.08543336
					    def c6, 1.08528042, 1.09106636, 9.99999975e-006, 4.99999952
					    def c7, -0.400000006, -0.00999999978, 0, 0
					    def c8, -0.358833194, -0.446391016, -0.924158394, -0.0809379965
					    def c9, -0.765505373, 0.502850711, -0.223679513, 0.682787597
					    def c10, 1.05857396, -0.214481309, 0.520777404, -0.528028607
					    def c11, 0.571401656, 0.843724251, 0.204007104, -0.982436419
					    def c12, 0.558174074, 0.0708675012, 0.98606205, 0.453703821
					    def c13, -0.354134023, -1.02587652, -0.870714903, -0.657481015
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mul r1, r0.w, c0.xyxy
					    mul r1, r1, c1.w
					    mad r2, r1.zwzw, c8, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mad r3.w, r0.w, -c2.z, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mul r3.xyz, r3, r4.y
					    mul r4.y, r0.w, c2.x
					    max r5.x, r4.y, c2.y
					    mad r3.xyz, r0, r5.x, r3
					    mad r3.w, r4.x, r3.w, r5.x
					    mad r2.w, r0.w, -c3.w, r2.w
					    add r2.w, r2.w, c2.w
					    mul_sat r2.w, r2.w, c3.x
					    mad r4.x, r2.w, c3.y, c3.z
					    mul r2.w, r2.w, r2.w
					    mul r4.y, r2.w, r4.x
					    mad r2.w, r4.x, r2.w, r3.w
					    mad r2.xyz, r2, r4.y, r3
					    mad r3, r1.zwzw, c9, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c4.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c4.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c10, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c4.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c4.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c11, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c5.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c5.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c12, v0.xyxy
					    mad r1, r1, c13, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c5.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c5.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    mad r3.w, r0.w, -c6.x, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r1.w, r0.w, -c6.y, r1.w
					    add r1.w, r1.w, c2.w
					    mul_sat r1.w, r1.w, c3.x
					    mad r3.x, r1.w, c3.y, c3.z
					    mul r1.w, r1.w, r1.w
					    mul r3.y, r1.w, r3.x
					    mad r1.w, r3.x, r1.w, r2.w
					    add r1.w, r1.w, c6.z
					    rcp r1.w, r1.w
					    mad r1.xyz, r1, r3.y, r2
					    texld r2, v0, s1
					    mad r2.xyz, r1, -r1.w, r2
					    mul r1.xyz, r1.w, r1
					    add r3.xy, r0.w, c7
					    mul_sat r1.w, r3.x, c6.w
					    mad r2.w, r1.w, c3.y, c3.z
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, r2.w
					    mad r1.xyz, r1.w, r2, r1
					    mov r1.w, r0.w
					    cmp oC0, r3.y, r1, r0
					
					// approximately 133 instruction slots used (14 texture, 119 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[12];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _LowRez;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					int u_xlati23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(-0.326211989, -0.405809999);
						ImmCB_0_0_0[1] = vec2(-0.840143979, -0.0735799968);
						ImmCB_0_0_0[2] = vec2(-0.69591397, 0.457136989);
						ImmCB_0_0_0[3] = vec2(-0.203345001, 0.620715976);
						ImmCB_0_0_0[4] = vec2(0.962339997, -0.194983006);
						ImmCB_0_0_0[5] = vec2(0.473434001, -0.480026007);
						ImmCB_0_0_0[6] = vec2(0.519456029, 0.767022014);
						ImmCB_0_0_0[7] = vec2(0.185461, -0.893123984);
						ImmCB_0_0_0[8] = vec2(0.507430971, 0.0644249991);
						ImmCB_0_0_0[9] = vec2(0.896420002, 0.412458003);
						ImmCB_0_0_0[10] = vec2(-0.321940005, -0.932614982);
						ImmCB_0_0_0[11] = vec2(-0.791558981, -0.597710013);
					    u_xlat0 = texture(_LowRez, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xy = u_xlat1.ww * _MainTex_TexelSize.xy;
					    u_xlat2.xy = u_xlat2.xy * _Offsets.ww;
					    u_xlat21 = u_xlat1.w * 0.25;
					    u_xlat21 = max(u_xlat21, 0.100000001);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xyz;
					    u_xlat16 = u_xlat21;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<12 ; u_xlati_loop_1++)
					    {
					        u_xlat5.xy = u_xlat2.xy * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat5.xy = u_xlat5.xy * vec2(1.10000002, 1.10000002) + vs_TEXCOORD1.xy;
					        u_xlat5 = texture(_MainTex, u_xlat5.xy);
					        u_xlat6.xy = vec2(1.10000002, 1.10000002) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
					        u_xlat24 = sqrt(u_xlat24);
					        u_xlat24 = (-u_xlat1.w) * u_xlat24 + u_xlat5.w;
					        u_xlat24 = u_xlat24 + 0.264999986;
					        u_xlat24 = u_xlat24 * 3.77358508;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat25 = u_xlat24 * -2.0 + 3.0;
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat26 = u_xlat24 * u_xlat25;
					        u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26) + u_xlat4.xyz;
					        u_xlat16 = u_xlat25 * u_xlat24 + u_xlat16;
					    }
					    u_xlat21 = u_xlat16 + 9.99999975e-06;
					    u_xlat2.xyz = u_xlat4.xyz / vec3(u_xlat21);
					    u_xlat21 = u_xlat1.w + -0.400000006;
					    u_xlat21 = u_xlat21 * 4.99999952;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat23 = u_xlat21 * -2.0 + 3.0;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat23;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb2 = u_xlat1.w<0.00999999978;
					    u_xlat0.w = u_xlat1.w;
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  ColorMask A
  GpuProgramID 855560
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CurveParams;
					//   sampler2D _FgOverlap;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CurveParams        c1       1
					//   _CameraDepthTexture s0       1
					//   _FgOverlap          s1       1
					//
					
					    ps_3_0
					    def c2, 9.99999975e-006, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v1, s0
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp r0.x, r0.x
					    add r0.y, r0.x, -c1.w
					    add r0.x, r0.x, c2.x
					    rcp r0.x, r0.x
					    mul r0.y, r0_abs.y, c1.z
					    mad r0.x, r0.y, r0.x, -c1.y
					    max r1.x, r0.x, c2.y
					    min r0.x, c1.x, r1.x
					    texld r1, v0, s1
					    max oC0, r0.x, r1.w
					
					// approximately 12 instruction slots used (2 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _FgOverlap;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat2 = u_xlat0.x + (-_CurveParams.w);
					    u_xlat0.x = u_xlat0.x + 9.99999975e-06;
					    u_xlat2 = abs(u_xlat2) * _CurveParams.z;
					    u_xlat0.x = u_xlat2 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CurveParams.y);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _CurveParams.x);
					    u_xlat1 = texture(_FgOverlap, vs_TEXCOORD0.xy);
					    SV_Target0 = max(u_xlat0.xxxx, u_xlat1.wwww);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend One One
 BlendOp Max
  ColorMask A
  GpuProgramID 957244
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _FgOverlap;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _FgOverlap   s1       1
					//
					
					    ps_3_0
					    def c0, -0.00999999978, 0, 1, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.x, r0.w, c0.x
					    cmp r0.x, r0.x, c0.y, c0.z
					    texld r1, v0, s1
					    add_sat r0.y, -r0.w, r1.w
					    mul oC0, r0.y, r0.x
					
					// approximately 6 instruction slots used (2 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FgOverlap;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlatb0 = u_xlat0.w<0.00999999978;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1 = texture(_FgOverlap, vs_TEXCOORD1.xy);
					    u_xlat2 = (-u_xlat0.w) + u_xlat1.w;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    SV_Target0 = vec4(u_xlat2) * u_xlat0.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1038252
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.75, -0.75, 0.25, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    mov r0.xy, c1
					    mad r1, c0.xyxy, r0.xxxy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    mad r0, c0.xyxy, -r0.xxxy, v0.xyxy
					    texld r3, r0, s0
					    texld r0, r0.zwzw, s0
					    add r2, r2, r3
					    add r1, r1, r2
					    add r0, r0, r1
					    mul oC0, r0, c1.z
					
					// approximately 11 instruction slots used (4 texture, 7 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1052085
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _CurveParams;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _CurveParams c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    texld r1, v0, s0
					    mul r0.x, r0.x, r1.w
					    mov oC0.w, r1.w
					    mov_sat oC0.xyz, r0.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _CurveParams;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w / _CurveParams.x;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xxx;
					    SV_Target0.xyz = clamp(SV_Target0.xyz, 0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1162740
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.25, 0.68991667, 1, 0.264999986
					    def c3, 0.795291662, 1, 0.485441685, 0.189816669
					    def c4, 0.193583325, 1, 0.734166622, 0.490258336
					    def c5, 0.699541628, 1, 0.448966652, 0.655866623
					    def c6, 0.438866645, 1, 0.76289165, 0.475091666
					    def c7, 0.373649985, 1, 0.463058352, 0.798816681
					    def c8, 3.77358508, -2, 3, 0
					    def c9, 0.766149998, 1, 0.698066652, 0.222974986
					    def c10, 0.735866666, 1, 0.204808339, 0.725224972
					    def c11, 0.797349989, 1, 0.827724993, 0.516908288
					    def c12, 0.722533286, 1, 0.452333331, 0.5081833
					    def c13, 0.520524979, 0.452808321, 0.754475176, 0.656323254
					    def c14, -0.111783333, -0.787400007, -0.140556395, -0.990076959
					    def c15, 0.323099971, -0.362291664, 0.665579438, -0.746313453
					    def c16, 0.101049997, -0.160683334, 0.532355785, -0.846518576
					    def c17, -0.1699, 0.0927750021, -0.877658129, 0.479250968
					    def c18, 0.692616642, -0.243483335, 0.943405211, -0.331645846
					    def c19, 0.0896583274, -0.481991649, 0.182879776, -0.983138144
					    def c20, 0.235708326, 0.658633292, 0.336946815, 0.941521168
					    def c21, -0.305183321, 0.329299986, -0.679746091, 0.733461976
					    def c22, 0.629924953, 0.18263334, 0.960446775, 0.278461099
					    def c23, -0.43841663, 0.0198833328, -0.998974562, 0.0453060903
					    def c24, -0.73513335, -0.203924999, -0.963614345, -0.267305315
					    def c25, -0.407400012, -0.244416669, -0.857518733, -0.514462113
					    def c26, 0.366783321, -0.0713166669, 0.981622756, -0.190864891
					    def c27, 0.176491663, 0.428108305, 0.381143451, 0.924523473
					    def c28, 0.0456916653, 0.797508299, 0.0571991876, 0.998362064
					    def c29, -0.491674989, -0.587574959, -0.641747653, -0.766919017
					    def c30, -0.667208314, 0.205258325, -0.955794573, 0.294038296
					    def c31, -0.161866665, -0.153349996, -0.725940943, -0.687745273
					    def c32, -0.363891661, 0.639591634, -0.494507611, 0.869167864
					    def c33, 0.180549994, 0.0966833308, 0.881555855, 0.472067386
					    def c34, 0.130799994, -0.713333309, 0.180357814, -0.983602822
					    def c35, -0.63184166, 0.486358345, -0.792426944, 0.609968424
					    def c36, 0.82736665, -0.0241999999, 0.999567091, -0.0292367637
					    def c37, -0.185283333, -0.48255831, -0.358445257, -0.933547199
					    def c38, 0.458766669, -0.558199942, 0.634941936, -0.772559524
					    def c39, 0.386924982, 0.234291673, 0.85539788, 0.517962396
					    def c40, -0.0601166673, 0.504616618, -0.118297197, 0.992981434
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul r1, r0.w, c0.xyxy
					    mul r1, r1, c1.w
					    mad r2, r1.zwzw, c13, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mov r4.x, r3.w
					    mov r4.y, r2.w
					    mad r4.xy, r0.w, -c2.yzzw, r4
					    add r4.xy, r4, c2.w
					    mul_sat r4.xy, r4, c8.x
					    mad r4.zw, r4.xyxy, c8.y, c8.z
					    mul r4.xy, r4, r4
					    mul r4.xy, r4, r4.zwzw
					    mul r2.xyz, r2, r4.y
					    add r2.w, r2.w, r3.w
					    mad r2.xyz, r3, r4.x, r2
					    mul r3.x, r0.w, c2.x
					    max r5.w, r3.x, c1.z
					    mad r3.xyz, r0, r5.w, r2
					    dp2add r3.w, r4, c2.z, r5.w
					    mul r5.xyz, r0, r5.w
					    cmp r2, -r2.w, r5, r3
					    mad r3, r1.zwzw, c14, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c3, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c15, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c3.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c16, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c3.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c17, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c4, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c18, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c4.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c19, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c4.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c20, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c5, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c21, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c5.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c22, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c5.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c23, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c6, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c24, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c6.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c25, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c6.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c26, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c7, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c27, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c7.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c28, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c7.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c29, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c9, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c30, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c9.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c31, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c9.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c32, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c10, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c33, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c10.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c34, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c10.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c35, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c11, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c36, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c11.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c37, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c11.wyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c38, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c12, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    mad r3, r1.zwzw, c39, v0.xyxy
					    mad r1, r1, c40, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mov r0.x, r4.w
					    mov r0.y, r3.w
					    mad r0.xy, r0.w, -c12.zyzw, r0
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r5.xy, r0, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r5
					    mul r3.xyz, r0.y, r3
					    add r0.z, r3.w, r4.w
					    mad r3.xyz, r4, r0.x, r3
					    dp2add r4.w, r0, c2.z, r2.w
					    add r4.xyz, r2, r3
					    cmp r2, -r0.z, r2, r4
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    mov r0.x, r3.w
					    mov r0.y, r1.w
					    mad r0.xy, r0.w, -c12.wyzw, r0
					    mov oC0.w, r0.w
					    add r0.xy, r0, c2.w
					    mul_sat r0.xy, r0, c8.x
					    mad r0.zw, r0.xyxy, c8.y, c8.z
					    mul r0.xy, r0, r0
					    mul r0.xy, r0, r0.zwzw
					    mul r1.xyz, r0.y, r1
					    add r0.z, r1.w, r3.w
					    mad r1.xyz, r3, r0.x, r1
					    dp2add r3.w, r0, c2.z, r2.w
					    add r3.xyz, r1, r2
					    cmp r0, -r0.z, r2, r3
					    rcp r0.w, r0.w
					    mul oC0.xyz, r0.w, r0
					
					// approximately 513 instruction slots used (57 texture, 456 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					float ImmCB_0_0_2[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat10;
					vec2 u_xlat11;
					bool u_xlatb11;
					float u_xlat16;
					int u_xlati24;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
						ImmCB_0_0_2[0] = 0.827899992;
						ImmCB_0_0_2[1] = 0.954349995;
						ImmCB_0_0_2[2] = 0.582530022;
						ImmCB_0_0_2[3] = 0.227779999;
						ImmCB_0_0_2[4] = 0.232299998;
						ImmCB_0_0_2[5] = 0.880999982;
						ImmCB_0_0_2[6] = 0.588310003;
						ImmCB_0_0_2[7] = 0.839450002;
						ImmCB_0_0_2[8] = 0.538760006;
						ImmCB_0_0_2[9] = 0.787039995;
						ImmCB_0_0_2[10] = 0.526639998;
						ImmCB_0_0_2[11] = 0.915470004;
						ImmCB_0_0_2[12] = 0.570110023;
						ImmCB_0_0_2[13] = 0.448379993;
						ImmCB_0_0_2[14] = 0.555670023;
						ImmCB_0_0_2[15] = 0.958580017;
						ImmCB_0_0_2[16] = 0.919380009;
						ImmCB_0_0_2[17] = 0.837679982;
						ImmCB_0_0_2[18] = 0.267569989;
						ImmCB_0_0_2[19] = 0.883040011;
						ImmCB_0_0_2[20] = 0.245770007;
						ImmCB_0_0_2[21] = 0.870270014;
						ImmCB_0_0_2[22] = 0.956820011;
						ImmCB_0_0_2[23] = 0.99326998;
						ImmCB_0_0_2[24] = 0.620289981;
						ImmCB_0_0_2[25] = 0.867039979;
						ImmCB_0_0_2[26] = 0.542800009;
						ImmCB_0_0_2[27] = 0.609820008;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy).xwyz;
					    u_xlat1 = u_xlat0.yyyy * _MainTex_TexelSize.xyxy;
					    u_xlat1 = u_xlat1 * _Offsets.wwww;
					    u_xlat2 = u_xlat0.y * 0.25;
					    u_xlat2 = max(u_xlat2, _Offsets.z);
					    u_xlat10.xyz = u_xlat0.xzw * vec3(u_xlat2);
					    u_xlat3.x = 1.20000005;
					    u_xlat4.xyz = u_xlat10.xyz;
					    u_xlat16 = u_xlat2;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat5 = u_xlat1 * ImmCB_0_0_0[u_xlati_loop_1].xyxy;
					        u_xlat3.z = ImmCB_0_0_2[u_xlati_loop_1];
					        u_xlat5 = u_xlat5 / u_xlat3.xxzz;
					        u_xlat5 = u_xlat5 + vs_TEXCOORD1.xyxy;
					        u_xlat6 = texture(_MainTex, u_xlat5.xy);
					        u_xlat5 = texture(_MainTex, u_xlat5.zw);
					        u_xlat11.x = u_xlat5.w + u_xlat6.w;
					        u_xlatb11 = 0.0<u_xlat11.x;
					        if(u_xlatb11){
					            u_xlat0.x = u_xlat0.y * ImmCB_0_0_2[u_xlati_loop_1];
					            u_xlat7.x = u_xlat6.w;
					            u_xlat7.y = u_xlat5.w;
					            u_xlat11.xy = (-u_xlat0.xy) * vec2(0.833333313, 1.0) + u_xlat7.xy;
					            u_xlat11.xy = u_xlat11.xy + vec2(0.264999986, 0.264999986);
					            u_xlat11.xy = u_xlat11.xy * vec2(3.77358508, 3.77358508);
					            u_xlat11.xy = clamp(u_xlat11.xy, 0.0, 1.0);
					            u_xlat7.xy = u_xlat11.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat11.xy = u_xlat11.xy * u_xlat11.xy;
					            u_xlat11.xy = u_xlat11.xy * u_xlat7.xy;
					            u_xlat5.xyz = u_xlat11.yyy * u_xlat5.xyz;
					            u_xlat5.xyz = u_xlat6.xyz * u_xlat11.xxx + u_xlat5.xyz;
					            u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					            u_xlat0.x = dot(u_xlat11.xy, vec2(1.0, 1.0));
					            u_xlat16 = u_xlat0.x + u_xlat16;
					        }
					    }
					    SV_Target0.xyz = u_xlat4.xyz / vec3(u_xlat16);
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1227009
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _LowRez;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//   _LowRez            s1       1
					//
					
					    ps_3_0
					    def c2, 0.25, 0.100000001, 0.827899992, 0.264999986
					    def c3, 3.77358508, -2, 3, 0.954349995
					    def c4, 0.582530022, 0.227779999, 0.232299998, 0.880999982
					    def c5, 0.588310003, 0.839450002, 0.538760006, 0.787039995
					    def c6, 0.526639998, 0.915470004, 0.570110023, 0.448379993
					    def c7, 0.555670023, 0.958580017, 0.919380009, 0.837679982
					    def c8, 0.267569989, 0.883040011, 0.245770007, 0.870270014
					    def c9, 0.956820011, 0.99326998, 0.620289981, 0.867039979
					    def c10, 0.542800009, 0.609820008, 9.99999975e-006, 4.99999905
					    def c11, -0.649999976, -0.00999999978, 0, 0
					    def c12, 0.46430999, 0.281150013, -0.0721400008, 0.605539978
					    def c13, -0.222340003, -0.579069972, 0.550520003, -0.669839978
					    def c14, -0.758210003, 0.583630025, 0.992839992, -0.0290399995
					    def c15, 0.216659993, 0.116020001, 0.156959996, -0.856000006
					    def c16, -0.194240004, -0.184019998, -0.436670005, 0.767509997
					    def c17, -0.590009987, -0.705089986, -0.800650001, 0.246309996
					    def c18, 0.211789995, 0.51372999, 0.0548299998, 0.957009971
					    def c19, -0.488880008, -0.293300003, 0.440140009, -0.0855799988
					    def c20, -0.52609998, 0.0238600001, -0.882160008, -0.244709998
					    def c21, -0.366219997, 0.39515999, 0.755909979, 0.219160005
					    def c22, 0.107589997, -0.578390002, 0.282849997, 0.790359974
					    def c23, -0.203879997, 0.111330003, 0.831139982, -0.292180002
					    def c24, 0.387719989, -0.434749991, 0.121260002, -0.192819998
					    def c25, 0.624629974, 0.543370008, -0.13414, -0.944880009
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mul r1, r0.w, c0.xyxy
					    mul r1, r1, c1.w
					    mad r2, r1.zwzw, c25, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mad r3.w, r0.w, -c2.z, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mul r3.xyz, r3, r4.y
					    mul r4.y, r0.w, c2.x
					    max r5.x, r4.y, c2.y
					    mad r3.xyz, r0, r5.x, r3
					    mad r3.w, r4.x, r3.w, r5.x
					    mad r2.w, r0.w, -c3.w, r2.w
					    add r2.w, r2.w, c2.w
					    mul_sat r2.w, r2.w, c3.x
					    mad r4.x, r2.w, c3.y, c3.z
					    mul r2.w, r2.w, r2.w
					    mul r4.y, r2.w, r4.x
					    mad r2.w, r4.x, r2.w, r3.w
					    mad r2.xyz, r2, r4.y, r3
					    mad r3, r1.zwzw, c24, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c4.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c4.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c23, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c4.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c4.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c22, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c5.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c5.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c21, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c5.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c5.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c20, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c6.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c6.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c19, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c6.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c6.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c18, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c7.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c7.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c17, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c7.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c7.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c16, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c8.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c8.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c15, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c8.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c8.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c14, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c9.x, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c9.y, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r3, r1.zwzw, c13, v0.xyxy
					    mad r1, r1, c12, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r4.w, r0.w, -c9.z, r4.w
					    add r4.w, r4.w, c2.w
					    mul_sat r4.w, r4.w, c3.x
					    mad r5.x, r4.w, c3.y, c3.z
					    mul r4.w, r4.w, r4.w
					    mul r5.y, r4.w, r5.x
					    mad r2.w, r5.x, r4.w, r2.w
					    mad r2.xyz, r4, r5.y, r2
					    mad r3.w, r0.w, -c9.w, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    mad r3.w, r0.w, -c10.x, r3.w
					    add r3.w, r3.w, c2.w
					    mul_sat r3.w, r3.w, c3.x
					    mad r4.x, r3.w, c3.y, c3.z
					    mul r3.w, r3.w, r3.w
					    mul r4.y, r3.w, r4.x
					    mad r2.w, r4.x, r3.w, r2.w
					    mad r2.xyz, r3, r4.y, r2
					    mad r1.w, r0.w, -c10.y, r1.w
					    add r1.w, r1.w, c2.w
					    mul_sat r1.w, r1.w, c3.x
					    mad r3.x, r1.w, c3.y, c3.z
					    mul r1.w, r1.w, r1.w
					    mul r3.y, r1.w, r3.x
					    mad r1.w, r3.x, r1.w, r2.w
					    add r1.w, r1.w, c10.z
					    rcp r1.w, r1.w
					    mad r1.xyz, r1, r3.y, r2
					    texld r2, v0, s1
					    mad r2.xyz, r1, -r1.w, r2
					    mul r1.xyz, r1.w, r1
					    add r3.xy, r0.w, c11
					    mul_sat r1.w, r3.x, c10.w
					    mad r2.w, r1.w, c3.y, c3.z
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, r2.w
					    mad r1.xyz, r1.w, r2, r1
					    mov r1.w, r0.w
					    cmp oC0, r3.y, r1, r0
					
					// approximately 285 instruction slots used (30 texture, 255 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					float ImmCB_0_0_2[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _LowRez;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat14;
					float u_xlat18;
					float u_xlat20;
					int u_xlati20;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
						ImmCB_0_0_2[0] = 0.827899992;
						ImmCB_0_0_2[1] = 0.954349995;
						ImmCB_0_0_2[2] = 0.582530022;
						ImmCB_0_0_2[3] = 0.227779999;
						ImmCB_0_0_2[4] = 0.232299998;
						ImmCB_0_0_2[5] = 0.880999982;
						ImmCB_0_0_2[6] = 0.588310003;
						ImmCB_0_0_2[7] = 0.839450002;
						ImmCB_0_0_2[8] = 0.538760006;
						ImmCB_0_0_2[9] = 0.787039995;
						ImmCB_0_0_2[10] = 0.526639998;
						ImmCB_0_0_2[11] = 0.915470004;
						ImmCB_0_0_2[12] = 0.570110023;
						ImmCB_0_0_2[13] = 0.448379993;
						ImmCB_0_0_2[14] = 0.555670023;
						ImmCB_0_0_2[15] = 0.958580017;
						ImmCB_0_0_2[16] = 0.919380009;
						ImmCB_0_0_2[17] = 0.837679982;
						ImmCB_0_0_2[18] = 0.267569989;
						ImmCB_0_0_2[19] = 0.883040011;
						ImmCB_0_0_2[20] = 0.245770007;
						ImmCB_0_0_2[21] = 0.870270014;
						ImmCB_0_0_2[22] = 0.956820011;
						ImmCB_0_0_2[23] = 0.99326998;
						ImmCB_0_0_2[24] = 0.620289981;
						ImmCB_0_0_2[25] = 0.867039979;
						ImmCB_0_0_2[26] = 0.542800009;
						ImmCB_0_0_2[27] = 0.609820008;
					    u_xlat0 = texture(_LowRez, vs_TEXCOORD1.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xy = u_xlat1.ww * _MainTex_TexelSize.xy;
					    u_xlat2.xy = u_xlat2.xy * _Offsets.ww;
					    u_xlat18 = u_xlat1.w * 0.25;
					    u_xlat18 = max(u_xlat18, 0.100000001);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xyz;
					    u_xlat14 = u_xlat18;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat5.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat2.xy + vs_TEXCOORD1.xy;
					        u_xlat5 = texture(_MainTex, u_xlat5.xy);
					        u_xlat21 = (-u_xlat1.w) * ImmCB_0_0_2[u_xlati_loop_1] + u_xlat5.w;
					        u_xlat21 = u_xlat21 + 0.264999986;
					        u_xlat21 = u_xlat21 * 3.77358508;
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat22 = u_xlat21 * -2.0 + 3.0;
					        u_xlat21 = u_xlat21 * u_xlat21;
					        u_xlat23 = u_xlat21 * u_xlat22;
					        u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat23) + u_xlat4.xyz;
					        u_xlat14 = u_xlat22 * u_xlat21 + u_xlat14;
					    }
					    u_xlat18 = u_xlat14 + 9.99999975e-06;
					    u_xlat2.xyz = u_xlat4.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat1.w + -0.649999976;
					    u_xlat18 = u_xlat18 * 4.99999905;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlatb2 = u_xlat1.w<0.00999999978;
					    u_xlat0.w = u_xlat1.w;
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1297498
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _Offsets           c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0.166666672, -0.166666672
					    def c7, 0.333333343, -0.333333343, 0.5, -0.5
					    def c8, 0.666666687, -0.666666687, 0.833333373, -0.833333373
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mad r0, c4.xxxy, r0.xxyy, r0.yyxx
					    mul r0, r0, c5.xyxy
					    mul r0.xy, r0, c4
					    mad o2, r0, c6.zzww, v1.xyxy
					    mad o3, r0.zwzw, c7.xxyy, v1.xyxy
					    mad o4, r0.zwzw, c7.zzww, v1.xyxy
					    mad o5, r0.zwzw, c8.xxyy, v1.xyxy
					    mad o6, r0.zwzw, c8.zzww, v1.xyxy
					    mov o1.xy, v1
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = 1.0;
					    u_xlat0.zw = _MainTex_TexelSize.xy;
					    u_xlat0 = u_xlat0.xxzw * _Offsets.xyxy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, -0.166666672, -0.166666672) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD2 = u_xlat0.zwzw * vec4(0.333333343, 0.333333343, -0.333333343, -0.333333343) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD3 = u_xlat0.zwzw * vec4(0.5, 0.5, -0.5, -0.5) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD4 = u_xlat0.zwzw * vec4(0.666666687, 0.666666687, -0.666666687, -0.666666687) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD5 = u_xlat0.zwzw * vec4(0.833333373, 0.833333373, -0.833333373, -0.833333373) + in_TEXCOORD0.xyxy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.800000012, 0.675000012, 0.5, 0.200000003
					    def c1, 0.075000003, 9.99999975e-005, -0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    texld r0, v1.zwzw, s0
					    add_sat r0.w, r0.w, r0.w
					    mul r1.x, r0.w, c0.x
					    texld r2, v1, s0
					    add_sat r1.y, r2.w, r2.w
					    mul r1.z, r1.y, c0.x
					    mul r2.xyz, r1.z, r2
					    texld r3, v0, s0
					    mad r2.xyz, r3, r3.w, r2
					    mad r0.xyz, r0, r1.x, r2
					    texld r2, v2, s0
					    add_sat r1.x, r2.w, r2.w
					    mul r1.z, r1.x, c0.y
					    mad r0.xyz, r2, r1.z, r0
					    texld r2, v2.zwzw, s0
					    add_sat r1.z, r2.w, r2.w
					    mul r1.w, r1.z, c0.y
					    mad r0.xyz, r2, r1.w, r0
					    texld r2, v3, s0
					    add_sat r1.w, r2.w, r2.w
					    mul r2.w, r1.w, c0.z
					    mad r0.xyz, r2, r2.w, r0
					    texld r2, v3.zwzw, s0
					    add_sat r2.w, r2.w, r2.w
					    mul r4.x, r2.w, c0.z
					    mad r0.xyz, r2, r4.x, r0
					    texld r4, v4, s0
					    add_sat r2.x, r4.w, r4.w
					    mul r2.y, r2.x, c0.w
					    mad r0.xyz, r4, r2.y, r0
					    texld r4, v4.zwzw, s0
					    add_sat r2.y, r4.w, r4.w
					    mul r2.z, r2.y, c0.w
					    mad r0.xyz, r4, r2.z, r0
					    texld r4, v5, s0
					    add_sat r2.z, r4.w, r4.w
					    mul r4.w, r2.z, c1.x
					    mad r0.xyz, r4, r4.w, r0
					    texld r4, v5.zwzw, s0
					    add_sat r4.w, r4.w, r4.w
					    mul r5.x, r4.w, c1.x
					    mad r0.xyz, r4, r5.x, r0
					    mad r1.y, r1.y, c0.x, r3.w
					    mad r0.w, r0.w, c0.x, r1.y
					    mad r0.w, r1.x, c0.y, r0.w
					    mad r0.w, r1.z, c0.y, r0.w
					    mad r0.w, r1.w, c0.z, r0.w
					    mad r0.w, r2.w, c0.z, r0.w
					    mad r0.w, r2.x, c0.w, r0.w
					    mad r0.w, r2.y, c0.w, r0.w
					    mad r0.w, r2.z, c1.x, r0.w
					    mad r0.w, r4.w, c1.x, r0.w
					    add r0.w, r0.w, c1.y
					    rcp r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    add r0.w, r3.w, c1.z
					    cmp oC0.xyz, r0.w, r0, r3
					    mov oC0.w, r3.w
					
					// approximately 58 instruction slots used (11 texture, 47 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat7;
					float u_xlat8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat18 = u_xlat0.w + u_xlat0.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1 = u_xlat18 * 0.800000012;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat7 = u_xlat2.w + u_xlat2.w;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat13 = u_xlat7 * 0.800000012;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1) + u_xlat2.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat1 = u_xlat2.w + u_xlat2.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat13 = u_xlat1 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat13) + u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat13 = u_xlat2.w + u_xlat2.w;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat19 = u_xlat13 * 0.675000012;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat19 = u_xlat2.w + u_xlat2.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = u_xlat19 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat20) + u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD3.zw);
					    u_xlat20 = u_xlat2.w + u_xlat2.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.x = u_xlat20 * 0.5;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat2.x = u_xlat4.w + u_xlat4.w;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat2.x * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat8) + u_xlat0.xyz;
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD4.zw);
					    u_xlat8 = u_xlat4.w + u_xlat4.w;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat14 = u_xlat8 * 0.200000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat0.xyz;
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat14 = u_xlat4.w + u_xlat4.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat22 = u_xlat14 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD5.zw);
					    u_xlat22 = u_xlat4.w + u_xlat4.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat5 = u_xlat22 * 0.075000003;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat5) + u_xlat0.xyz;
					    u_xlat7 = u_xlat7 * 0.800000012 + u_xlat3.w;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat7;
					    u_xlat18 = u_xlat1 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat13 * 0.675000012 + u_xlat18;
					    u_xlat18 = u_xlat19 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat20 * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat2.x * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat8 * 0.200000003 + u_xlat18;
					    u_xlat18 = u_xlat14 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat22 * 0.075000003 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-05;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlatb18 = u_xlat3.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat3.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1354185
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 100, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul_sat oC0.w, r0.w, c0.x
					    mov oC0.xyz, r0
					
					// approximately 3 instruction slots used (1 texture, 2 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    SV_Target0.w = u_xlat0.w * 100.0;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend DstAlpha OneMinusDstAlpha, Zero One
  GpuProgramID 1426592
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mov o1.xy, r0
					    mov o2.xy, r0
					
					// approximately 11 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.yw = (bool(u_xlatb0)) ? vec2(u_xlat1) : in_TEXCOORD0.yy;
					    phase0_Output0_1.xz = in_TEXCOORD0.xx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _Offsets;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Offsets           c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0.0909090936, 1, -1, 0
					    def c3, 0.400000006, 2.5, -2, 3
					    def c4, 9.99999975e-006, 0, 0, 0
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul r1, r0.w, r0
					    mul r0.x, r0.w, c2.x
					    mov r2.xy, c1
					    mul r2, r2.xyxy, c0.xyxy
					    mul r2, r0.x, r2
					    mul r2, r2, c2.yyzz
					    mov r3, r1
					    mov r0.y, r0.w
					    mov r0.z, c2.y
					    rep i0
					      mad r4, r2, r0.z, v0.xyxy
					      texld r5, r4, s0
					      texld r4, r4.zwzw, s0
					      mov r6.x, r5.w
					      mov r6.y, r4.w
					      mad r6.xy, r0.x, -r0.z, r6
					      add r6.xy, r6, c3.x
					      mul_sat r6.xy, r6, c3.y
					      mad r6.zw, r6.xyxy, c3.z, c3.w
					      mul r6.xy, r6, r6
					      mul r6.xy, r6, r6.zwzw
					      mul r4, r4, r6.y
					      mad r4, r5, r6.x, r4
					      add r3, r3, r4
					      dp2add r0.y, r6, c2.y, r0.y
					      add r0.z, r0.z, c2.y
					    endrep
					    add r0.x, r0.y, c4.x
					    rcp r0.x, r0.x
					    mul oC0, r0.x, r3
					
					// approximately 35 instruction slots used (3 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 _Offsets;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat7;
					float u_xlat8;
					int u_xlati16;
					vec2 u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1 = u_xlat0.wwww * u_xlat0;
					    u_xlat0.x = u_xlat0.w * 0.0909090936;
					    u_xlat2 = _MainTex_TexelSize.xyxy * _Offsets.xyxy;
					    u_xlat2 = u_xlat0.xxxx * u_xlat2;
					    u_xlat2 = u_xlat2 * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat3 = u_xlat1;
					    u_xlat8 = u_xlat0.w;
					    for(int u_xlati_loop_1 = 1 ; u_xlati_loop_1<12 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlat5 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD1.xyxy;
					        u_xlat6 = texture(_MainTex, u_xlat5.xy);
					        u_xlat5 = texture(_MainTex, u_xlat5.zw);
					        u_xlat7.x = u_xlat6.w;
					        u_xlat7.y = u_xlat5.w;
					        u_xlat4.xy = (-u_xlat0.xx) * u_xlat4.xx + u_xlat7.xy;
					        u_xlat4.xy = u_xlat4.xy + vec2(0.400000006, 0.400000006);
					        u_xlat4.xy = u_xlat4.xy * vec2(2.5, 2.5);
					        u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					        u_xlat20.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					        u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					        u_xlat4.xy = u_xlat4.xy * u_xlat20.xy;
					        u_xlat5 = u_xlat4.yyyy * u_xlat5;
					        u_xlat5 = u_xlat6 * u_xlat4.xxxx + u_xlat5;
					        u_xlat3 = u_xlat3 + u_xlat5;
					        u_xlat4.x = dot(u_xlat4.xy, vec2(1.0, 1.0));
					        u_xlat8 = u_xlat8 + u_xlat4.x;
					    }
					    u_xlat0.x = u_xlat8 + 9.99999975e-06;
					    SV_Target0 = u_xlat3 / u_xlat0.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend DstAlpha One, Zero One
  GpuProgramID 1442662
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xy, v1
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xzw = in_TEXCOORD0.xxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld oC0, v0, s0
					
					// approximately 1 instruction slot used (1 texture, 0 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    return;
					}"
}
}
 }
}
Fallback Off
}