Shader "Hidden/FXAA II" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 24628
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0.5, 0.75
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad r0.xy, r0, c5.z, c5.z
					    mov r0.w, c5.w
					    mad o1.zw, c4.xyxy, -r0.w, r0.xyxy
					    mov o1.xy, v1
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    vs_TEXCOORD0.zw = (-_MainTex_TexelSize.xy) * vec2(0.75, 0.75) + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.298999995, 0.587000012, 0.114, -8
					    def c2, 1, 0, 0.03125, 0.0078125
					    def c3, -0.166666672, 0.166666672, 0.5, -0.5
					    def c4, 0.25, 0, 0, 0
					    dcl_texcoord v0
					    dcl_2d s0
					    mul r0, c2.xxyy, v0.zwzz
					    texldl r0, r0, s0
					    dp3 r0.x, r0, c1
					    mov r1.xy, c2
					    mad r1, c0.xyxy, r1.xyyx, v0.zwzw
					    mul r2, r1.xyxx, c2.xxyy
					    mul r1, r1.zwxx, c2.xxyy
					    texldl r1, r1, s0
					    dp3 r0.y, r1, c1
					    texldl r1, r2, s0
					    dp3 r0.z, r1, c1
					    add r0.w, r0.z, r0.x
					    add r1.xy, c0, v0.zwzw
					    mov r1.zw, c2.y
					    texldl r1, r1, s0
					    dp3 r1.x, r1, c1
					    add r1.y, r0.y, r1.x
					    add r1.y, r0.w, -r1.y
					    add r0.w, r0.y, r0.w
					    add r0.w, r1.x, r0.w
					    mul r0.w, r0.w, c2.z
					    max r1.z, r0.w, c2.w
					    mov r2.xz, -r1.y
					    cmp r0.w, r2.z, r2.z, r1.y
					    add r1.y, r0.z, r1.x
					    add r1.w, r0.y, r0.x
					    add r2.yw, -r1.y, r1.w
					    min r1.y, r2_abs.w, r0.w
					    add r0.w, r1.z, r1.y
					    rcp r0.w, r0.w
					    mul r3, r0.w, r2
					    mad r2, r2.zwzw, -r0.w, c1.w
					    cmp r2, r2, c1.w, r3
					    add r3, -r2.zwzw, -c1.w
					    cmp r2, r3, r2, -c1.w
					    mul r2, r2, c0.xyxy
					    mad r3, r2, c3.wwzz, v0.xyxy
					    mad r2, r2.zwzw, c3.xxyy, v0.xyxy
					    mul r4, r3.xyxx, c2.xxyy
					    mul r3, r3.zwxx, c2.xxyy
					    texldl r3, r3, s0
					    texldl r4, r4, s0
					    add r1.yzw, r3.xxyz, r4.xxyz
					    mul r1.yzw, r1, c4.x
					    mul r3, r2.xyxx, c2.xxyy
					    mul r2, r2.zwxx, c2.xxyy
					    texldl r2, r2, s0
					    texldl r3, r3, s0
					    add r2.xyz, r2, r3
					    mad r1.yzw, r2.xxyz, c4.x, r1
					    mul r2.xyz, r2, c3.z
					    dp3 r0.w, r1.yzww, c1
					    min r2.w, r1.x, r0.y
					    max r3.x, r0.y, r1.x
					    min r1.x, r0.z, r0.x
					    max r3.y, r0.x, r0.z
					    max r0.x, r3.y, r3.x
					    min r0.y, r2.w, r1.x
					    mul r3, c2.xxyy, v0.xyzz
					    texldl r3, r3, s0
					    dp3 r0.z, r3, c1
					    min r1.x, r0.y, r0.z
					    max r2.w, r0.z, r0.x
					    add r0.x, -r0.w, r2.w
					    add r0.y, r0.w, -r1.x
					    cmp r0.xy, r0, c2.y, c2.x
					    add r0.x, r0.x, r0.y
					    cmp oC0.xyz, -r0.x, r1.yzww, r2
					    mov oC0.w, c2.y
					
					// approximately 78 instruction slots used (18 texture, 60 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat10;
					float u_xlat11;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(1.0, 0.0, 0.0, 1.0) + vs_TEXCOORD0.zwzw;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat5 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat10.xy = vs_TEXCOORD0.zw + _MainTex_TexelSize.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					    u_xlat10.x = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat15 = u_xlat10.x + u_xlat5;
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.zw, 0.0);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat6.x = u_xlat0.x + u_xlat1.x;
					    u_xlat2.yw = (-vec2(u_xlat15)) + u_xlat6.xx;
					    u_xlat15 = u_xlat5 + u_xlat1.x;
					    u_xlat6.x = u_xlat10.x + u_xlat0.x;
					    u_xlat6.x = u_xlat15 + (-u_xlat6.x);
					    u_xlat15 = u_xlat0.x + u_xlat15;
					    u_xlat15 = u_xlat10.x + u_xlat15;
					    u_xlat15 = u_xlat15 * 0.03125;
					    u_xlat15 = max(u_xlat15, 0.0078125);
					    u_xlat11 = min(abs(u_xlat2.w), abs(u_xlat6.x));
					    u_xlat2.xz = (-u_xlat6.xx);
					    u_xlat15 = u_xlat15 + u_xlat11;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat2 = vec4(u_xlat15) * u_xlat2;
					    u_xlat2 = max(u_xlat2, vec4(-8.0, -8.0, -8.0, -8.0));
					    u_xlat2 = min(u_xlat2, vec4(8.0, 8.0, 8.0, 8.0));
					    u_xlat2 = u_xlat2 * _MainTex_TexelSize.xyxy;
					    u_xlat3 = u_xlat2 * vec4(-0.5, -0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2.zwzw * vec4(-0.166666672, -0.166666672, 0.166666672, 0.166666672) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat17 = min(u_xlat10.x, u_xlat0.x);
					    u_xlat0.x = max(u_xlat10.x, u_xlat0.x);
					    u_xlat10.x = min(u_xlat5, u_xlat1.x);
					    u_xlat5 = max(u_xlat5, u_xlat1.x);
					    u_xlat0.x = max(u_xlat0.x, u_xlat5);
					    u_xlat5 = min(u_xlat17, u_xlat10.x);
					    u_xlat3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10.x = dot(u_xlat3.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.y = min(u_xlat5, u_xlat10.x);
					    u_xlat0.x = max(u_xlat0.x, u_xlat10.x);
					    u_xlatb0.xy = lessThan(u_xlat0.xwxx, u_xlat0.wyww).xy;
					    u_xlatb0.x = u_xlatb0.x || u_xlatb0.y;
					    SV_Target0.xyz = (u_xlatb0.x) ? u_xlat2.xyz : u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
}
}
 }
}
Fallback Off
}