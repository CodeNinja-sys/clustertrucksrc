Shader "Hidden/FXAA III (Console)" {
Properties {
 _MainTex ("-", 2D) = "white" { }
 _EdgeThresholdMin ("Edge threshold min", Float) = 0.125
 _EdgeThreshold ("Edge Threshold", Float) = 0.25
 _EdgeSharpness ("Edge sharpness", Float) = 4
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 9027
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, -0.5, 0.5, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c4
					    mad o2.xy, r0, -c5.y, v1
					    mad o2.zw, r0.xyxy, c5.y, v1.xyxy
					    mul o4.xy, r0, c5.z
					    add o4.zw, c4.xyxy, c4.xyxy
					    mov o1.xy, v1
					    mul r0, r0.xyxy, c5.xxyy
					    mov o3, r0
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = (-_MainTex_TexelSize.xy) * vec2(0.5, 0.5) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = _MainTex_TexelSize.xy * vec2(0.5, 0.5) + in_TEXCOORD0.xy;
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.5, -0.5, 0.5, 0.5);
					    vs_TEXCOORD2 = u_xlat0;
					    vs_TEXCOORD3.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0);
					    vs_TEXCOORD3.zw = _MainTex_TexelSize.xy + _MainTex_TexelSize.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _EdgeSharpness;
					//   float _EdgeThreshold;
					//   float _EdgeThresholdMin;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _EdgeThresholdMin         c1       1
					//   _EdgeThreshold            c2       1
					//   _EdgeSharpness            c3       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0.00260416674, -2
					    def c5, 0.25, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.zw
					    dcl_texcoord3 v3.zw
					    dcl_2d s0
					    mul r0, c4.xxyy, v1.xyxx
					    texldl_pp r0, r0, s0
					    mul_pp r0.xyw, r0.xyzz, c0.xyzz
					    add_pp r0.xw, r0.yyzw, r0.x
					    mad_pp r0.x, r0.z, c0.z, r0.x
					    mul_pp r0.y, r0.w, r0.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    mul r1, c4.xxyy, v1.xwxx
					    texldl_pp r1, r1, s0
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mad_pp r0.y, r1.z, c0.z, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    mul r1, c4.xxyy, v1.zyxx
					    texldl_pp r1, r1, s0
					    mul_pp r1.xyw, r1.xyzz, c0.xyzz
					    add_pp r0.zw, r1.xyyw, r1.x
					    mad_pp r0.z, r1.z, c0.z, r0.z
					    mul_pp r0.w, r0.w, r1.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    dp2add_pp r0.z, c0.w, r0.w, r0.z
					    mul r1, c4.xxyy, v1.zwxx
					    texldl_pp r1, r1, s0
					    mul_pp r1.xyw, r1.xyzz, c0.xyzz
					    add_pp r1.xw, r1.yyzw, r1.x
					    mad_pp r0.w, r1.z, c0.z, r1.x
					    mul_pp r1.x, r1.w, r1.y
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    dp2add_pp r0.w, c0.w, r1.x, r0.w
					    mul r1, c4.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    mul_pp r2.xyz, r1, c0
					    add_pp r2.xz, r2.yyzw, r2.x
					    mad_pp r1.w, r1.z, c0.z, r2.x
					    mul_pp r2.x, r2.z, r2.y
					    rsq_pp r2.x, r2.x
					    rcp_pp r2.x, r2.x
					    dp2add_pp r1.w, c0.w, r2.x, r1.w
					    max_pp r2.x, r0.x, r0.y
					    add_pp r0.z, r0.z, c4.z
					    min_pp r2.y, r0.y, r0.x
					    max_pp r2.z, r0.z, r0.w
					    min_pp r2.w, r0.w, r0.z
					    max_pp r3.x, r2.z, r2.x
					    min_pp r3.y, r2.y, r2.w
					    mul_pp r2.x, r3.x, c2.x
					    min_pp r2.y, r1.w, r3.y
					    max_pp r3.z, c1.x, r2.x
					    max_pp r2.x, r3.x, r1.w
					    add_pp r1.w, -r2.y, r2.x
					    if_lt r1.w, r3.z
					    else
					      add_pp r0.xy, -r0.xzzw, r0.wyzw
					      add_pp r2.x, r0.x, r0.y
					      add_pp r2.y, -r0.x, r0.y
					      dp2add_pp r0.x, r2, r2, c4.y
					      rsq_pp r0.x, r0.x
					      mul_pp r0.xy, r0.x, r2
					      mov r2.xy, v0
					      mad r4.xy, r0, -v2.zwzw, r2
					      mov r4.zw, c4.y
					      texldl_pp r4, r4, s0
					      mad r5.xy, r0, v2.zwzw, r2
					      mov r5.zw, c4.y
					      texldl_pp r5, r5, s0
					      min_pp r1.w, r0_abs.y, r0_abs.x
					      mul_pp r0.z, r1.w, c3.x
					      rcp r0.z, r0.z
					      mul_pp r0.xy, r0.z, r0
					      max_pp r2.zw, r0.xyxy, c4.w
					      min_pp r0.xy, r2.zwzw, -c4.w
					      mad r6.xy, r0, -v3.zwzw, r2
					      mov r6.zw, c4.y
					      texldl_pp r6, r6, s0
					      mad r0.xy, r0, v3.zwzw, r2
					      mov r0.zw, c4.y
					      texldl_pp r0, r0, s0
					      add_pp r2.xyz, r4, r5
					      add_pp r0.xyz, r0, r6
					      mul_pp r4.xyz, r2, c5.x
					      mad_pp r0.xyz, r0, c5.x, r4
					      mul_pp r4.xyz, r2, c0
					      add_pp r3.zw, r4.xyyz, r4.x
					      mad_pp r0.w, r2.z, c0.z, r3.z
					      mul_pp r1.w, r3.w, r4.y
					      rsq_pp r1.w, r1.w
					      rcp_pp r1.w, r1.w
					      dp2add_pp r0.w, c0.w, r1.w, r0.w
					      add r0.w, -r3.y, r0.w
					      cmp r0.w, r0.w, c4.y, c4.x
					      mul_pp r3.yzw, r0.xxyz, c0.xxyz
					      add_pp r3.yw, r3.xzzw, r3.y
					      mad_pp r1.w, r0.z, c0.z, r3.y
					      mul_pp r2.w, r3.w, r3.z
					      rsq_pp r2.w, r2.w
					      rcp_pp r2.w, r2.w
					      dp2add_pp r1.w, c0.w, r2.w, r1.w
					      add r1.w, -r1.w, r3.x
					      cmp r1.w, r1.w, c4.y, c4.x
					      add r0.w, r0.w, r1.w
					      mul_pp r2.xyz, r2, c5.y
					      cmp_pp r1.xyz, -r0.w, r0, r2
					    endif
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c4.x
					
					// approximately 131 instruction slots used (18 texture, 113 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						float _EdgeThresholdMin;
						float _EdgeThreshold;
						float _EdgeSharpness;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat0.xyw = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat0.xw = u_xlat0.yw + u_xlat0.xx;
					    u_xlat0.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
					    u_xlat6.x = u_xlat0.w * u_xlat0.y;
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = dot(unity_ColorSpaceLuminance.ww, u_xlat6.xx);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.xw, 0.0);
					    u_xlat6.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat6.xz = u_xlat6.yz + u_xlat6.xx;
					    u_xlat6.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat6.x;
					    u_xlat12.x = u_xlat6.z * u_xlat6.y;
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat12.x = dot(unity_ColorSpaceLuminance.ww, u_xlat12.xx);
					    u_xlat6.x = u_xlat12.x + u_xlat6.x;
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.zy, 0.0);
					    u_xlat1.xyw = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat12.xy = u_xlat1.yw + u_xlat1.xx;
					    u_xlat12.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat12.x;
					    u_xlat18 = u_xlat12.y * u_xlat1.y;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat18));
					    u_xlat12.x = u_xlat18 + u_xlat12.x;
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat1.xyw = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xw = u_xlat1.yw + u_xlat1.xx;
					    u_xlat18 = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.w * u_xlat1.y;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(unity_ColorSpaceLuminance.ww, u_xlat1.xx);
					    u_xlat6.z = u_xlat18 + u_xlat1.x;
					    u_xlat1 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat2.xz = u_xlat2.yz + u_xlat2.xx;
					    u_xlat19 = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat2.x;
					    u_xlat2.x = u_xlat2.z * u_xlat2.y;
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = dot(unity_ColorSpaceLuminance.ww, u_xlat2.xx);
					    u_xlat19 = u_xlat19 + u_xlat2.x;
					    u_xlat0.z = u_xlat12.x + 0.00260416674;
					    u_xlat2.xz = max(u_xlat6.xz, u_xlat0.xz);
					    u_xlat8.xz = min(u_xlat6.xz, u_xlat0.xz);
					    u_xlat2.x = max(u_xlat2.x, u_xlat2.z);
					    u_xlat8.x = min(u_xlat8.x, u_xlat8.z);
					    u_xlat14.x = u_xlat2.x * _EdgeThreshold;
					    u_xlat20 = min(u_xlat19, u_xlat8.x);
					    u_xlat14.x = max(u_xlat14.x, _EdgeThresholdMin);
					    u_xlat19 = max(u_xlat19, u_xlat2.x);
					    u_xlat19 = (-u_xlat20) + u_xlat19;
					    u_xlatb19 = u_xlat19>=u_xlat14.x;
					    if(u_xlatb19){
					        u_xlat0.xy = (-u_xlat0.xz) + u_xlat6.zx;
					        u_xlat3.x = u_xlat0.x + u_xlat0.y;
					        u_xlat3.y = (-u_xlat0.x) + u_xlat0.y;
					        u_xlat0.x = dot(u_xlat3.xy, u_xlat3.xy);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xy = u_xlat0.xx * u_xlat3.xy;
					        u_xlat12.xy = (-u_xlat0.xy) * vs_TEXCOORD2.zw + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat12.xy = u_xlat0.xy * vs_TEXCOORD2.zw + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat12.x = min(abs(u_xlat0.y), abs(u_xlat0.x));
					        u_xlat12.x = u_xlat12.x * _EdgeSharpness;
					        u_xlat0.xy = u_xlat0.xy / u_xlat12.xx;
					        u_xlat0.xy = max(u_xlat0.xy, vec2(-2.0, -2.0));
					        u_xlat0.xy = min(u_xlat0.xy, vec2(2.0, 2.0));
					        u_xlat12.xy = (-u_xlat0.xy) * vs_TEXCOORD3.zw + vs_TEXCOORD0.xy;
					        u_xlat5 = textureLod(_MainTex, u_xlat12.xy, 0.0);
					        u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD3.zw + vs_TEXCOORD0.xy;
					        u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25);
					        u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25) + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat3.xyz * unity_ColorSpaceLuminance.xyz;
					        u_xlat14.xy = u_xlat4.yz + u_xlat4.xx;
					        u_xlat18 = u_xlat3.z * unity_ColorSpaceLuminance.z + u_xlat14.x;
					        u_xlat19 = u_xlat14.y * u_xlat4.y;
					        u_xlat19 = sqrt(u_xlat19);
					        u_xlat19 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat19));
					        u_xlat18 = u_xlat18 + u_xlat19;
					        u_xlatb18 = u_xlat18<u_xlat8.x;
					        u_xlat8.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					        u_xlat8.xz = u_xlat8.yz + u_xlat8.xx;
					        u_xlat19 = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat8.x;
					        u_xlat8.x = u_xlat8.z * u_xlat8.y;
					        u_xlat8.x = sqrt(u_xlat8.x);
					        u_xlat8.x = dot(unity_ColorSpaceLuminance.ww, u_xlat8.xx);
					        u_xlat19 = u_xlat19 + u_xlat8.x;
					        u_xlatb19 = u_xlat2.x<u_xlat19;
					        u_xlatb18 = u_xlatb18 || u_xlatb19;
					        u_xlat2.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5);
					        u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    }
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
}
Fallback Off
}