Shader "Skybox/Horizon With Sun Skybox" {
Properties {
 _SkyColor1 ("Top Color", Color) = (0.37,0.52,0.73,0)
 _SkyExponent1 ("Top Exponent", Float) = 8.5
 _SkyColor2 ("Horizon Color", Color) = (0.89,0.96,1,0)
 _SkyColor3 ("Bottom Color", Color) = (0.89,0.89,0.89,0)
 _SkyExponent2 ("Bottom Exponent", Float) = 3
 _SkyIntensity ("Sky Intensity", Float) = 1
 _SunColor ("Sun Color", Color) = (1,0.99,0.87,1)
 _SunIntensity ("Sun Intensity", Float) = 2
 _SunAlpha ("Sun Alpha", Float) = 550
 _SunBeta ("Sun Beta", Float) = 1
 _SunVector ("Sun Vector", Vector) = (0.269,0.615,0.74,0)
 _SunAzimuth ("Sun Azimuth (editor only)", Float) = 20
 _SunAltitude ("Sun Altitude (editor only)", Float) = 38
}
SubShader { 
 Tags { "QUEUE"="Background" "RenderType"="Background" }
 Pass {
  Tags { "QUEUE"="Background" "RenderType"="Background" }
  ZWrite Off
  Cull Off
  GpuProgramID 49275
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xyz, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _SkyColor1;
					//   float3 _SkyColor2;
					//   float3 _SkyColor3;
					//   float _SkyExponent1;
					//   float _SkyExponent2;
					//   float _SkyIntensity;
					//   float _SunAlpha;
					//   float _SunBeta;
					//   float3 _SunColor;
					//   float _SunIntensity;
					//   float3 _SunVector;
					//
					//
					// Registers:
					//
					//   Name          Reg   Size
					//   ------------- ----- ----
					//   _SkyColor1    c0       1
					//   _SkyExponent1 c1       1
					//   _SkyColor2    c2       1
					//   _SkyColor3    c3       1
					//   _SkyExponent2 c4       1
					//   _SkyIntensity c5       1
					//   _SunColor     c6       1
					//   _SunIntensity c7       1
					//   _SunAlpha     c8       1
					//   _SunBeta      c9       1
					//   _SunVector    c10      1
					//
					
					    ps_2_0
					    def c11, 1, 0, 0, 0
					    dcl t0.xyz
					    dp3 r0.w, t0, t0
					    rsq r0.x, r0.w
					    mad r0.y, t0.y, -r0.x, c11.x
					    pow r1.w, r0.y, c1.x
					    add r0.y, -r0.y, c11.x
					    add r0.z, -r1.w, c11.x
					    cmp r0.y, r0.y, r0.z, c11.y
					    add r0.z, -r0.y, c11.x
					    mad r0.w, t0.y, r0.x, c11.x
					    mul r1.xyz, r0.x, t0
					    dp3 r0.x, r1, c10
					    max r1.x, r0.x, c11.y
					    pow r0.x, r1.x, c8.x
					    mul r0.x, r0.x, c9.x
					    min r1.x, r0.x, c11.x
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r1, c7.x
					    pow r1.w, r0.w, c4.x
					    add r0.x, -r0.w, c11.x
					    add r0.w, -r1.w, c11.x
					    cmp r1.w, r0.x, r0.w, c11.y
					    add r0.x, r0.z, -r1.w
					    mul r2.xyz, r0.x, c2
					    mad r0.xyz, c0, r0.y, r2
					    mad_pp r0.xyz, c3, r1.w, r0
					    mad_pp r0.xyz, r0, c5.x, r1
					    mov r0.w, c11.y
					    mov_pp oC0, r0
					
					// approximately 34 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec3 _SkyColor1;
						float _SkyExponent1;
						vec3 _SkyColor2;
						vec3 _SkyColor3;
						float _SkyExponent2;
						float _SkyIntensity;
						vec3 _SunColor;
						float _SunIntensity;
						float _SunAlpha;
						float _SunBeta;
						vec3 _SunVector;
					};
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.x = (-vs_TEXCOORD0.y) * u_xlat0.x + 1.0;
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * _SkyExponent1;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat0.y = (-u_xlat3.x) + 1.0;
					    u_xlat9 = vs_TEXCOORD0.y * u_xlat0.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, _SunVector.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SunAlpha;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SunBeta;
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * vec3(_SunColor.x, _SunColor.y, _SunColor.z);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_SunIntensity);
					    u_xlat0.x = min(u_xlat9, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SkyExponent2;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xz = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat6 = (-u_xlat0.x) + u_xlat0.z;
					    u_xlat2.xyz = vec3(u_xlat6) * _SkyColor2.xyz;
					    u_xlat3.xyz = _SkyColor1.xyz * u_xlat0.yyy + u_xlat2.xyz;
					    u_xlat0.xyz = _SkyColor3.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(_SkyIntensity) + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec3 _SkyColor1;
						float _SkyExponent1;
						vec3 _SkyColor2;
						vec3 _SkyColor3;
						float _SkyExponent2;
						float _SkyIntensity;
						vec3 _SunColor;
						float _SunIntensity;
						float _SunAlpha;
						float _SunBeta;
						vec3 _SunVector;
					};
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.x = (-vs_TEXCOORD0.y) * u_xlat0.x + 1.0;
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * _SkyExponent1;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat0.y = (-u_xlat3.x) + 1.0;
					    u_xlat9 = vs_TEXCOORD0.y * u_xlat0.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, _SunVector.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SunAlpha;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SunBeta;
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * vec3(_SunColor.x, _SunColor.y, _SunColor.z);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_SunIntensity);
					    u_xlat0.x = min(u_xlat9, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _SkyExponent2;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xz = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat6 = (-u_xlat0.x) + u_xlat0.z;
					    u_xlat2.xyz = vec3(u_xlat6) * _SkyColor2.xyz;
					    u_xlat3.xyz = _SkyColor1.xyz * u_xlat0.yyy + u_xlat2.xyz;
					    u_xlat0.xyz = _SkyColor3.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(_SkyIntensity) + u_xlat1.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
}
}
 }
}
}