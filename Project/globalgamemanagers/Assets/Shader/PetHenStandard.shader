Shader "pethen/Standard" {
Properties {
 _Color ("Color", Color) = (1,1,1,1)
 _MainTex ("Albedo", 2D) = "white" { }
 _TranThreashold ("Invicibility Threashold", Float) = 0
 _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
 _Glossiness ("Smoothness", Range(0,1)) = 0.5
[Gamma]  _Metallic ("Metallic", Range(0,1)) = 0
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
 _BumpScale ("Scale", Float) = 1
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0,1)) = 1
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0,0,0,1)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
[HideInInspector]  _Mode ("__mode", Float) = 0
[HideInInspector]  _SrcBlend ("__src", Float) = 1
[HideInInspector]  _DstBlend ("__dst", Float) = 0
[HideInInspector]  _ZWrite ("__zw", Float) = 1
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 183
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o7.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o8.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 72 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    dp4 r0.x, c2, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 35 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o9.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o8.x, r0.z
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o8.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 68 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o9.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 73 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o7.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o8.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 72 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    dp4 r0.x, c2, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 35 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o9.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o8.x, r0.z
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o8.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 68 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o9.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 73 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o7.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o8.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 72 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    dp4 r0.x, c2, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 35 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o9.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o8.x, r0.z
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o8.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 68 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o9.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 73 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o7.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o8.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 72 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o8.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    dp4 r0.x, c2, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 35 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   _ProjectionParams    c11      1
					//   _ScreenParams        c12      1
					//   unity_SHBr           c13      1
					//   unity_SHBg           c14      1
					//   unity_SHBb           c15      1
					//   unity_SHC            c16      1
					//   _MainTex_ST          c17      1
					//   _DetailAlbedoMap_ST  c18      1
					//   _UVSec               c19      1
					//
					
					    vs_3_0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o9.xyz, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c20.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c20.x
					    mad o7.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    mov o5.xyz, r2
					    dp4 r2.x, c13, r3
					    dp4 r2.y, c14, r3
					    dp4 r2.z, c15, r3
					    mad o6.xyz, c16, r1.x, r2
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o7.zw, r0
					    mov o8.x, r0.z
					    mov o3, c20.y
					    mov o4, c20.y
					    mov o5.w, c20.y
					    mov o6.w, c20.y
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHBr                c19      1
					//   unity_SHBg                c20      1
					//   unity_SHBb                c21      1
					//   unity_SHC                 c22      1
					//   unity_ColorSpaceLuminance c23      1
					//   _MainTex_ST               c24      1
					//   _DetailAlbedoMap_ST       c25      1
					//   _UVSec                    c26      1
					//
					
					    vs_3_0
					    def c27, 0, 1, 0.305306017, 0.682171106
					    def c28, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8.xyz
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c24, c24.zwzw
					    abs r0.x, c26.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c25.xyxy, c25
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    add r1, -r0.z, c17
					    mov o8.xyz, r0
					    add r2, -r0.x, c15
					    add r0, -r0.y, c16
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r0, r4.y
					    mul r0, r0, r0
					    mad r0, r2, r2, r0
					    mad r2, r2, r4.x, r3
					    mad r2, r1, r4.z, r2
					    mad r0, r1, r1, r0
					    rsq r1.x, r0.x
					    rsq r1.y, r0.y
					    rsq r1.z, r0.z
					    rsq r1.w, r0.w
					    mov r3.y, c27.y
					    mad r0, r0, c18, r3.y
					    mul r1, r1, r2
					    max r1, r1, c27.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.z, c27.w
					    mad r1.xyz, r0, r1, c28.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c23.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o5.xyz, r4
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o6.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mov o3, c27.x
					    mov o4, c27.x
					    mov o5.w, c27.x
					    mov o6.w, c27.x
					
					// approximately 68 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz;
					    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _MainTex_ST               c26      1
					//   _DetailAlbedoMap_ST       c27      1
					//   _UVSec                    c28      1
					//
					
					    vs_3_0
					    def c29, 0.5, 0, 1, 0.0125228781
					    def c30, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9.xyz
					    mad o1.xy, v2, c26, c26.zwzw
					    abs r0.x, c28.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c27.xyxy, c27
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c14
					    dp4 r1.y, c5, v0
					    mul r0.w, r1.y, c15.x
					    mul r2.w, r0.w, c29.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r2.xz, r1.xyww, c29.x
					    mad o7.xy, r2.z, c16.zwzw, r2.xwzw
					    add r2, -r0.z, c19
					    mov o9.xyz, r0
					    add r3, -r0.x, c17
					    add r0, -r0.y, c18
					    mul r4.xyz, c12, v1.y
					    mad r4.xyz, c11, v1.x, r4
					    mad r4.xyz, c13, v1.z, r4
					    nrm r5.xyz, r4
					    mul r4, r0, r5.y
					    mul r0, r0, r0
					    mad r0, r3, r3, r0
					    mad r3, r3, r5.x, r4
					    mad r3, r2, r5.z, r3
					    mad r0, r2, r2, r0
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r4.z, c29.z
					    mad r0, r0, c20, r4.z
					    mul r2, r2, r3
					    max r2, r2, c29.y
					    rcp r3.x, r0.x
					    rcp r3.y, r0.y
					    rcp r3.z, r0.z
					    rcp r3.w, r0.w
					    mul r0, r2, r3
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mad r2.xyz, r0, c30.x, c30.y
					    mad r2.xyz, r0, r2, c29.w
					    mad r2.xyz, r0, r2, -r0
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r2, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.yzzx, r5.xyzz
					    mov o5.xyz, r5
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r2.xyz, c24, r0.w, r3
					    add o6.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3, c29.y
					    mov o4, c29.y
					    mov o5.w, c29.y
					    mov o6.w, c29.y
					
					// approximately 73 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[27];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    vs_TEXCOORD8.xyz = u_xlat1.xyz;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat3.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _TranThreashold                c19      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_3_0
					    def c20, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c21, 1, 0, 0.416666657, 6
					    def c22, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c23, -1, 1, 3.14159274, 1.00000001e-007
					    def c24, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c25, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord8_pp v4.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, c15, r0, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texld_pp r4, v0, s3
					    mov r5.xy, c21
					    add_pp r3.w, r5.x, -c18.x
					    mad_pp r3.w, r4.y, c18.x, r3.w
					    add_pp r4.x, r5.x, -c17.x
					    dp3_pp r4.y, r3, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3.xxyz
					    mov r2.w, c21.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r5.xzw, r6.xyyz, v3.xyyz
					    max_pp r6.xyz, r5.xzww, c21.y
					    abs r2.w, c13.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r5.xzw, r7.xyyz, c21.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.z
					    exp_pp r7.z, r5.w
					    mad_pp r5.xzw, r7.xyyz, c20.x, c20.y
					    max_pp r7.xyz, r5.xzww, c21.y
					    cmp_pp r5.xzw, -r2.w, r7.xyyz, r6.xyyz
					    if_lt -c6.w, r5.y
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c4, -v4
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c5, -v4
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r6.w, r7.y, r7.x
					      min_pp r8.x, r7.z, r6.w
					      add r7.xyz, -c6, v4
					      mad_pp r6.xyz, r6, r8.x, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r7.x, r4.x, -c20.z, c20.w
					    mul_pp r7.x, r4.x, r7.x
					    mul_pp r6.w, r7.x, c21.w
					    texldl_pp r7, r6, s0
					    pow_pp r8.x, r7.w, c7.y
					    mul_pp r7.w, r8.x, c7.x
					    mul_pp r8.xyz, r7, r7.w
					    mov r8.w, c5.w
					    if_lt r8.w, c22.x
					      if_lt -c10.w, r5.y
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c8, -v4
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c9, -v4
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r5.y, r10.y, r10.x
					        min_pp r8.w, r10.z, r5.y
					        add r10.xyz, -c10, v4
					        mad_pp r6.xyz, r9, r8.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r6, r6, s1
					      pow_pp r4.y, r6.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r6.xxyz, r4.y
					      mad r6.xyz, r7.w, r7, -r4.yzww
					      mad_pp r8.xyz, c5.w, r6, r4.yzww
					    endif
					    mul_pp r4.yzw, r3.w, r8.xxyz
					    mad_pp r6.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r6, r6
					    add r5.y, -r1.w, c22.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.y, c22.z, r1.w
					    mul_pp r6.xyz, r1.w, r6
					    dp3_pp r1.w, r2, -r3
					    add r5.y, -r1.w, c22.w
					    mad_pp r7.xyz, -r3, r5.y, r2
					    cmp_pp r2.xyz, r1.w, r2, r7
					    dp3_pp r1.w, r2, c0
					    max_pp r5.y, r1.w, c21.y
					    dp3_pp r1.w, r2, r6
					    max_pp r6.w, r1.w, c21.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c21.y
					    dp3_pp r1.w, c0, r6
					    max_pp r2.y, r1.w, c21.y
					    mul_pp r1.w, r4.x, r4.x
					    mad_pp r2.z, r4.x, -r4.x, c21.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.y, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.y, r3.x, r2.z
					    add r2.z, r2.z, c22.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.w, r6.w
					    mad r6.xy, r1.w, r1.w, c23
					    mad_pp r3.y, r3.y, r6.x, c21.x
					    mul r3.z, r3.y, c23.z
					    mad r3.y, r3.z, r3.y, c23.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.y, c21.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c21.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    mul_pp r3.z, r2.y, r2.y
					    dp2add_pp r3.z, r3.z, r4.x, c24.x
					    mad_pp r3.y, r3.z, r3.y, c21.x
					    mad_pp r3.z, r3.z, r2.x, c21.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c24.y
					    mad r2.z, r2.z, -c24.y, c24.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c24.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.y, r2.z
					    mul_pp r3.x, r5.y, r3.y
					    mul_pp r1.w, r1.w, r4.x
					    mad_pp r1.w, r1.w, -c25.x, c25.y
					    rcp_pp r3.y, r6.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c21.x
					    add_sat_pp r0.w, r0.w, c17.x
					    mul_pp r3.xyz, r3.x, c14
					    mad_pp r3.xyz, r5.xzww, r3.w, r3
					    mul_pp r5.xyz, r2.z, c14
					    cmp_pp r5.xyz, r2.z, r5, c21.y
					    add_pp r2.y, -r2.y, c21.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c21.x, r0
					    mul_pp r2.yzw, r5.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    add r1.x, c19.x, -v4.y
					    cmp r1.x, r1.x, c21.x, c21.y
					    mov r0.w, c21.x
					    mul_pp oC0, r0, r1.x
					
					// approximately 187 instruction slots used (6 texture, 181 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
					    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat4.y * _OcclusionStrength + u_xlat39;
					    u_xlat4.x = (-_Glossiness) + 1.0;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat2);
					    u_xlat5.y = dot(unity_SHAg, u_xlat2);
					    u_xlat5.z = dot(unity_SHAb, u_xlat2);
					    u_xlat5.xyz = u_xlat5.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb38 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb38)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb41){
					        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
					        u_xlat41 = inversesqrt(u_xlat41);
					        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
					        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat41 = min(u_xlat7.z, u_xlat41);
					        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat16.xyz;
					    }
					    u_xlat41 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
					    u_xlat41 = u_xlat4.x * u_xlat41;
					    u_xlat41 = u_xlat41 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
					    u_xlat42 = log2(u_xlat6.w);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb43){
					        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb43){
					            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
					            u_xlat43 = inversesqrt(u_xlat43);
					            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
					            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat43 = min(u_xlat9.z, u_xlat43);
					            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
					        u_xlat16.x = log2(u_xlat8.w);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.y;
					        u_xlat16.x = exp2(u_xlat16.x);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
					        u_xlat16.xyz = u_xlat8.xyz * u_xlat16.xxx;
					        u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz + (-u_xlat16.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
					    }
					    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat37 = max(u_xlat37, 0.00100000005);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb41 = u_xlat37<0.0;
					    u_xlat37 = (-u_xlat37) + 9.99999975e-06;
					    u_xlat7.xyz = (-u_xlat3.xyz) * vec3(u_xlat37) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat2.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat41 = max(u_xlat41, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat26 = u_xlat4.x * u_xlat4.x;
					    u_xlat3.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat37 * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat15.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat15.x = u_xlat26 * u_xlat26;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat6.x + 1.0;
					    u_xlat41 = u_xlat27 * 3.14159274;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.00000001e-07;
					    u_xlat15.x = u_xlat15.x / u_xlat27;
					    u_xlat27 = (-u_xlat37) + 1.0;
					    u_xlat41 = u_xlat27 * u_xlat27;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat41 = u_xlat2.x * u_xlat2.x;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat2.x = u_xlat2.x * u_xlat41;
					    u_xlat41 = u_xlat2.y * u_xlat2.y;
					    u_xlat41 = dot(vec2(u_xlat41), u_xlat4.xx);
					    u_xlat41 = u_xlat41 + -0.5;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.0;
					    u_xlat41 = u_xlat41 * u_xlat2.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat3.x = u_xlat15.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat15.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat3.x = (u_xlatb38) ? u_xlat15.x : u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat37 = u_xlat37 * u_xlat27;
					    u_xlat26 = u_xlat26 * u_xlat4.x;
					    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
					    u_xlat15.x = float(1.0) / u_xlat6.y;
					    u_xlat26 = (u_xlatb38) ? u_xlat26 : u_xlat15.x;
					    u_xlat36 = (-u_xlat36) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat37 = (-u_xlat2.y) + 1.0;
					    u_xlat14.x = u_xlat37 * u_xlat37;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat37 = u_xlat37 * u_xlat14.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _TranThreashold                c19      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c20, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c21, 1, 0, 0.416666657, 6
					    def c22, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c23, -1, 1, 3.14159274, 1.00000001e-007
					    def c24, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c25, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, c15, r0, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texldp_pp r4, v4, s4
					    texld_pp r5, v0, s3
					    mov r6.xy, c21
					    add_pp r3.w, r6.x, -c18.x
					    mad_pp r3.w, r5.y, c18.x, r3.w
					    add_pp r4.y, r6.x, -c17.x
					    dp3_pp r4.z, r3, r2
					    add_pp r4.z, r4.z, r4.z
					    mad_pp r5.xyz, r2, -r4.z, r3
					    mul_pp r4.xzw, r4.x, c14.xyyz
					    mov r2.w, c21.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r6.xzw, r7.xyyz, v3.xyyz
					    max_pp r7.xyz, r6.xzww, c21.y
					    abs r2.w, c13.w
					    log_pp r8.x, r7.x
					    log_pp r8.y, r7.y
					    log_pp r8.z, r7.z
					    mul_pp r6.xzw, r8.xyyz, c21.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.z
					    exp_pp r8.z, r6.w
					    mad_pp r6.xzw, r8.xyyz, c20.x, c20.y
					    max_pp r8.xyz, r6.xzww, c21.y
					    cmp_pp r6.xzw, -r2.w, r8.xyyz, r7.xyyz
					    if_lt -c6.w, r6.y
					      nrm_pp r7.xyz, r5
					      add r8.xyz, c4, -v5
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c5, -v5
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r5.w, r8.y, r8.x
					      min_pp r7.w, r8.z, r5.w
					      add r8.xyz, -c6, v5
					      mad_pp r7.xyz, r7, r7.w, r8
					    else
					      mov_pp r7.xyz, r5
					    endif
					    mad_pp r5.w, r4.y, -c20.z, c20.w
					    mul_pp r5.w, r4.y, r5.w
					    mul_pp r7.w, r5.w, c21.w
					    texldl_pp r8, r7, s0
					    pow_pp r5.w, r8.w, c7.y
					    mul_pp r5.w, r5.w, c7.x
					    mul_pp r9.xyz, r8, r5.w
					    mov r8.w, c5.w
					    if_lt r8.w, c22.x
					      if_lt -c10.w, r6.y
					        nrm_pp r10.xyz, r5
					        add r11.xyz, c8, -v5
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v5
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r6.y, r11.y, r11.x
					        min_pp r8.w, r11.z, r6.y
					        add r11.xyz, -c10, v5
					        mad_pp r7.xyz, r10, r8.w, r11
					      else
					        mov_pp r7.xyz, r5
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r5.x, r7.w, c11.y
					      mul_pp r5.x, r5.x, c11.x
					      mul_pp r5.xyz, r7, r5.x
					      mad r7.xyz, r5.w, r8, -r5
					      mad_pp r9.xyz, c5.w, r7, r5
					    endif
					    mul_pp r5.xyz, r3.w, r9
					    mad_pp r7.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r7, r7
					    add r5.w, -r1.w, c22.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.w, c22.z, r1.w
					    mul_pp r7.xyz, r1.w, r7
					    dp3_pp r1.w, r2, -r3
					    add r5.w, -r1.w, c22.w
					    mad_pp r8.xyz, -r3, r5.w, r2
					    cmp_pp r2.xyz, r1.w, r2, r8
					    dp3_pp r1.w, r2, c0
					    max_pp r5.w, r1.w, c21.y
					    dp3_pp r1.w, r2, r7
					    max_pp r6.y, r1.w, c21.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c21.y
					    dp3_pp r1.w, c0, r7
					    max_pp r2.y, r1.w, c21.y
					    mul_pp r1.w, r4.y, r4.y
					    mad_pp r2.z, r4.y, -r4.y, c21.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.w, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.w, r3.x, r2.z
					    add r2.z, r2.z, c22.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.y, r6.y
					    mad r7.xy, r1.w, r1.w, c23
					    mad_pp r3.y, r3.y, r7.x, c21.x
					    mul r3.z, r3.y, c23.z
					    mad r3.y, r3.z, r3.y, c23.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.w, c21.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c21.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    add_pp r3.z, r2.y, r2.y
					    mul_pp r3.z, r2.y, r3.z
					    mad_pp r3.z, r3.z, r4.y, c24.x
					    mad_pp r3.y, r3.z, r3.y, c21.x
					    mad_pp r3.z, r3.z, r2.x, c21.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c24.y
					    mad r2.z, r2.z, -c24.y, c24.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c24.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.w, r2.z
					    max_pp r3.x, r2.z, c21.y
					    mul_pp r2.z, r5.w, r3.y
					    mul_pp r1.w, r1.w, r4.y
					    mad_pp r1.w, r1.w, -c25.x, c25.y
					    rcp_pp r3.y, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c21.x
					    add_sat_pp r0.w, r0.w, c17.x
					    mul_pp r7.xyz, r2.z, r4.xzww
					    mad_pp r3.yzw, r6.xxzw, r3.w, r7.xxyz
					    mul_pp r4.xyz, r4.xzww, r3.x
					    add_pp r2.y, -r2.y, c21.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c21.x, r0
					    mul_pp r2.yzw, r4.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3.yzww, r2.yzww
					    mul_pp r2.yzw, r5.xxyz, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    add r1.x, c19.x, -v5.y
					    cmp r1.x, r1.x, c21.x, c21.y
					    mov r0.w, c21.x
					    mul_pp oC0, r0, r1.x
					
					// approximately 189 instruction slots used (7 texture, 182 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
					    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
					    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat5.y * _OcclusionStrength + u_xlat42;
					    u_xlat17 = (-_Glossiness) + 1.0;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb44){
					        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat44 = min(u_xlat8.z, u_xlat44);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat17 * u_xlat44;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
					    u_xlat45 = log2(u_xlat7.w);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.y;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat45);
					    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb46){
					        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb46){
					            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat46 = inversesqrt(u_xlat46);
					            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat46 = min(u_xlat10.z, u_xlat46);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
					        u_xlat44 = log2(u_xlat5.w);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.y;
					        u_xlat44 = exp2(u_xlat44);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat45) * u_xlat7.xyz + (-u_xlat5.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
					    }
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
					    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat40 = max(u_xlat40, 0.00100000005);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb44 = u_xlat40<0.0;
					    u_xlat40 = (-u_xlat40) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat3.xyz) * vec3(u_xlat40) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat17 * u_xlat17;
					    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
					    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat40 * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat16.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat16.x = u_xlat28 * u_xlat28;
					    u_xlat29 = u_xlat44 * u_xlat44;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat7.x + 1.0;
					    u_xlat44 = u_xlat29 * 3.14159274;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.00000001e-07;
					    u_xlat16.x = u_xlat16.x / u_xlat29;
					    u_xlat29 = (-u_xlat40) + 1.0;
					    u_xlat44 = u_xlat29 * u_xlat29;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat44 = u_xlat2.x * u_xlat2.x;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat2.x = u_xlat2.x * u_xlat44;
					    u_xlat44 = u_xlat2.y * u_xlat2.y;
					    u_xlat44 = dot(vec2(u_xlat44), vec2(u_xlat17));
					    u_xlat44 = u_xlat44 + -0.5;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.0;
					    u_xlat44 = u_xlat44 * u_xlat2.x + 1.0;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat3.x = u_xlat16.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat16.x = sqrt(u_xlat16.x);
					    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat40 = u_xlat40 * u_xlat29;
					    u_xlat28 = u_xlat28 * u_xlat17;
					    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
					    u_xlat16.x = float(1.0) / u_xlat7.y;
					    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
					    u_xlat39 = (-u_xlat39) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xzw;
					    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat4.xzw * u_xlat3.xxx;
					    u_xlat40 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat40 * u_xlat40;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat40 = u_xlat40 * u_xlat15.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _TranThreashold                c21      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_3_0
					    def c22, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c23, 1, 0, 0.416666657, 6
					    def c24, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c25, -1, 1, 3.14159274, 1.00000001e-007
					    def c26, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c27, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord7 v4.x
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, c17, r0, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texld_pp r4, v0, s3
					    mov r5.xy, c23
					    add_pp r3.w, r5.x, -c20.x
					    mad_pp r3.w, r4.y, c20.x, r3.w
					    add_pp r4.x, r5.x, -c19.x
					    dp3_pp r4.y, r3, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3.xxyz
					    mov r2.w, c23.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r5.xzw, r6.xyyz, v3.xyyz
					    max_pp r6.xyz, r5.xzww, c23.y
					    abs r2.w, c15.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r5.xzw, r7.xyyz, c23.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.z
					    exp_pp r7.z, r5.w
					    mad_pp r5.xzw, r7.xyyz, c22.x, c22.y
					    max_pp r7.xyz, r5.xzww, c23.y
					    cmp_pp r5.xzw, -r2.w, r7.xyyz, r6.xyyz
					    if_lt -c8.w, r5.y
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c6, -v5
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c7, -v5
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r6.w, r7.y, r7.x
					      min_pp r8.x, r7.z, r6.w
					      add r7.xyz, -c8, v5
					      mad_pp r6.xyz, r6, r8.x, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r7.x, r4.x, -c22.z, c22.w
					    mul_pp r7.x, r4.x, r7.x
					    mul_pp r6.w, r7.x, c23.w
					    texldl_pp r7, r6, s0
					    pow_pp r8.x, r7.w, c9.y
					    mul_pp r7.w, r8.x, c9.x
					    mul_pp r8.xyz, r7, r7.w
					    mov r8.w, c7.w
					    if_lt r8.w, c24.x
					      if_lt -c12.w, r5.y
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c10, -v5
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c11, -v5
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r5.y, r10.y, r10.x
					        min_pp r8.w, r10.z, r5.y
					        add r10.xyz, -c12, v5
					        mad_pp r6.xyz, r9, r8.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r6, r6, s1
					      pow_pp r4.y, r6.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r6.xxyz, r4.y
					      mad r6.xyz, r7.w, r7, -r4.yzww
					      mad_pp r8.xyz, c7.w, r6, r4.yzww
					    endif
					    mul_pp r4.yzw, r3.w, r8.xxyz
					    mad_pp r6.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r6, r6
					    add r5.y, -r1.w, c24.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.y, c24.z, r1.w
					    mul_pp r6.xyz, r1.w, r6
					    dp3_pp r1.w, r2, -r3
					    add r5.y, -r1.w, c24.w
					    mad_pp r7.xyz, -r3, r5.y, r2
					    cmp_pp r2.xyz, r1.w, r2, r7
					    dp3_pp r1.w, r2, c0
					    max_pp r5.y, r1.w, c23.y
					    dp3_pp r1.w, r2, r6
					    max_pp r6.w, r1.w, c23.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c23.y
					    dp3_pp r1.w, c0, r6
					    max_pp r2.y, r1.w, c23.y
					    mul_pp r1.w, r4.x, r4.x
					    mad_pp r2.z, r4.x, -r4.x, c23.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.y, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.y, r3.x, r2.z
					    add r2.z, r2.z, c24.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.w, r6.w
					    mad r6.xy, r1.w, r1.w, c25
					    mad_pp r3.y, r3.y, r6.x, c23.x
					    mul r3.z, r3.y, c25.z
					    mad r3.y, r3.z, r3.y, c25.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.y, c23.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c23.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    mul_pp r3.z, r2.y, r2.y
					    dp2add_pp r3.z, r3.z, r4.x, c26.x
					    mad_pp r3.y, r3.z, r3.y, c23.x
					    mad_pp r3.z, r3.z, r2.x, c23.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c26.y
					    mad r2.z, r2.z, -c26.y, c26.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c26.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.y, r2.z
					    mul_pp r3.x, r5.y, r3.y
					    mul_pp r1.w, r1.w, r4.x
					    mad_pp r1.w, r1.w, -c27.x, c27.y
					    rcp_pp r3.y, r6.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c23.x
					    add_sat_pp r0.w, r0.w, c19.x
					    mul_pp r3.xyz, r3.x, c16
					    mad_pp r3.xyz, r5.xzww, r3.w, r3
					    mul_pp r5.xyz, r2.z, c16
					    cmp_pp r5.xyz, r2.z, r5, c23.y
					    add_pp r2.y, -r2.y, c23.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c23.x, r0
					    mul_pp r2.yzw, r5.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    mul r0.w, c5.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r1.xyz, r0.w, r0, c4
					    add r0.x, c21.x, -v5.y
					    cmp r0.x, r0.x, c23.x, c23.y
					    mov r1.w, c23.x
					    mul_pp oC0, r0.x, r1
					
					// approximately 191 instruction slots used (6 texture, 185 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
					    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat4.y * _OcclusionStrength + u_xlat39;
					    u_xlat4.x = (-_Glossiness) + 1.0;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat2);
					    u_xlat5.y = dot(unity_SHAg, u_xlat2);
					    u_xlat5.z = dot(unity_SHAb, u_xlat2);
					    u_xlat5.xyz = u_xlat5.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb38 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb38)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb41){
					        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
					        u_xlat41 = inversesqrt(u_xlat41);
					        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
					        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat41 = min(u_xlat7.z, u_xlat41);
					        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat16.xyz;
					    }
					    u_xlat41 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
					    u_xlat41 = u_xlat4.x * u_xlat41;
					    u_xlat41 = u_xlat41 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
					    u_xlat42 = log2(u_xlat6.w);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb43){
					        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb43){
					            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
					            u_xlat43 = inversesqrt(u_xlat43);
					            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
					            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat43 = min(u_xlat9.z, u_xlat43);
					            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
					        u_xlat16.x = log2(u_xlat8.w);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.y;
					        u_xlat16.x = exp2(u_xlat16.x);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
					        u_xlat16.xyz = u_xlat8.xyz * u_xlat16.xxx;
					        u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz + (-u_xlat16.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
					    }
					    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat37 = max(u_xlat37, 0.00100000005);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb41 = u_xlat37<0.0;
					    u_xlat37 = (-u_xlat37) + 9.99999975e-06;
					    u_xlat7.xyz = (-u_xlat3.xyz) * vec3(u_xlat37) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat2.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat41 = max(u_xlat41, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat26 = u_xlat4.x * u_xlat4.x;
					    u_xlat3.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat37 * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat15.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat15.x = u_xlat26 * u_xlat26;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat6.x + 1.0;
					    u_xlat41 = u_xlat27 * 3.14159274;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.00000001e-07;
					    u_xlat15.x = u_xlat15.x / u_xlat27;
					    u_xlat27 = (-u_xlat37) + 1.0;
					    u_xlat41 = u_xlat27 * u_xlat27;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat41 = u_xlat2.x * u_xlat2.x;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat2.x = u_xlat2.x * u_xlat41;
					    u_xlat41 = u_xlat2.y * u_xlat2.y;
					    u_xlat41 = dot(vec2(u_xlat41), u_xlat4.xx);
					    u_xlat41 = u_xlat41 + -0.5;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.0;
					    u_xlat41 = u_xlat41 * u_xlat2.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat3.x = u_xlat15.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat15.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat3.x = (u_xlatb38) ? u_xlat15.x : u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat37 = u_xlat37 * u_xlat27;
					    u_xlat26 = u_xlat26 * u_xlat4.x;
					    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
					    u_xlat15.x = float(1.0) / u_xlat6.y;
					    u_xlat26 = (u_xlatb38) ? u_xlat26 : u_xlat15.x;
					    u_xlat36 = (-u_xlat36) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat37 = (-u_xlat2.y) + 1.0;
					    u_xlat14.x = u_xlat37 * u_xlat37;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat37 = u_xlat37 * u_xlat14.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat36 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _TranThreashold                c21      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c22, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c23, 1, 0, 0.416666657, 6
					    def c24, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c25, -1, 1, 3.14159274, 1.00000001e-007
					    def c26, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c27, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord7 v5.x
					    dcl_texcoord8_pp v6.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, c17, r0, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texldp_pp r4, v4, s4
					    texld_pp r5, v0, s3
					    mov r6.xy, c23
					    add_pp r3.w, r6.x, -c20.x
					    mad_pp r3.w, r5.y, c20.x, r3.w
					    add_pp r4.y, r6.x, -c19.x
					    dp3_pp r4.z, r3, r2
					    add_pp r4.z, r4.z, r4.z
					    mad_pp r5.xyz, r2, -r4.z, r3
					    mul_pp r4.xzw, r4.x, c16.xyyz
					    mov r2.w, c23.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r6.xzw, r7.xyyz, v3.xyyz
					    max_pp r7.xyz, r6.xzww, c23.y
					    abs r2.w, c15.w
					    log_pp r8.x, r7.x
					    log_pp r8.y, r7.y
					    log_pp r8.z, r7.z
					    mul_pp r6.xzw, r8.xyyz, c23.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.z
					    exp_pp r8.z, r6.w
					    mad_pp r6.xzw, r8.xyyz, c22.x, c22.y
					    max_pp r8.xyz, r6.xzww, c23.y
					    cmp_pp r6.xzw, -r2.w, r8.xyyz, r7.xyyz
					    if_lt -c8.w, r6.y
					      nrm_pp r7.xyz, r5
					      add r8.xyz, c6, -v6
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c7, -v6
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r5.w, r8.y, r8.x
					      min_pp r7.w, r8.z, r5.w
					      add r8.xyz, -c8, v6
					      mad_pp r7.xyz, r7, r7.w, r8
					    else
					      mov_pp r7.xyz, r5
					    endif
					    mad_pp r5.w, r4.y, -c22.z, c22.w
					    mul_pp r5.w, r4.y, r5.w
					    mul_pp r7.w, r5.w, c23.w
					    texldl_pp r8, r7, s0
					    pow_pp r5.w, r8.w, c9.y
					    mul_pp r5.w, r5.w, c9.x
					    mul_pp r9.xyz, r8, r5.w
					    mov r8.w, c7.w
					    if_lt r8.w, c24.x
					      if_lt -c12.w, r6.y
					        nrm_pp r10.xyz, r5
					        add r11.xyz, c10, -v6
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c11, -v6
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r6.y, r11.y, r11.x
					        min_pp r8.w, r11.z, r6.y
					        add r11.xyz, -c12, v6
					        mad_pp r7.xyz, r10, r8.w, r11
					      else
					        mov_pp r7.xyz, r5
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r5.x, r7.w, c13.y
					      mul_pp r5.x, r5.x, c13.x
					      mul_pp r5.xyz, r7, r5.x
					      mad r7.xyz, r5.w, r8, -r5
					      mad_pp r9.xyz, c7.w, r7, r5
					    endif
					    mul_pp r5.xyz, r3.w, r9
					    mad_pp r7.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r7, r7
					    add r5.w, -r1.w, c24.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.w, c24.z, r1.w
					    mul_pp r7.xyz, r1.w, r7
					    dp3_pp r1.w, r2, -r3
					    add r5.w, -r1.w, c24.w
					    mad_pp r8.xyz, -r3, r5.w, r2
					    cmp_pp r2.xyz, r1.w, r2, r8
					    dp3_pp r1.w, r2, c0
					    max_pp r5.w, r1.w, c23.y
					    dp3_pp r1.w, r2, r7
					    max_pp r6.y, r1.w, c23.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c23.y
					    dp3_pp r1.w, c0, r7
					    max_pp r2.y, r1.w, c23.y
					    mul_pp r1.w, r4.y, r4.y
					    mad_pp r2.z, r4.y, -r4.y, c23.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.w, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.w, r3.x, r2.z
					    add r2.z, r2.z, c24.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.y, r6.y
					    mad r7.xy, r1.w, r1.w, c25
					    mad_pp r3.y, r3.y, r7.x, c23.x
					    mul r3.z, r3.y, c25.z
					    mad r3.y, r3.z, r3.y, c25.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.w, c23.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c23.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    add_pp r3.z, r2.y, r2.y
					    mul_pp r3.z, r2.y, r3.z
					    mad_pp r3.z, r3.z, r4.y, c26.x
					    mad_pp r3.y, r3.z, r3.y, c23.x
					    mad_pp r3.z, r3.z, r2.x, c23.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c26.y
					    mad r2.z, r2.z, -c26.y, c26.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c26.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.w, r2.z
					    max_pp r3.x, r2.z, c23.y
					    mul_pp r2.z, r5.w, r3.y
					    mul_pp r1.w, r1.w, r4.y
					    mad_pp r1.w, r1.w, -c27.x, c27.y
					    rcp_pp r3.y, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c23.x
					    add_sat_pp r0.w, r0.w, c19.x
					    mul_pp r7.xyz, r2.z, r4.xzww
					    mad_pp r3.yzw, r6.xxzw, r3.w, r7.xxyz
					    mul_pp r4.xyz, r4.xzww, r3.x
					    add_pp r2.y, -r2.y, c23.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c23.x, r0
					    mul_pp r2.yzw, r4.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3.yzww, r2.yzww
					    mul_pp r2.yzw, r5.xxyz, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r1.xyz, r0.w, r0, c4
					    add r0.x, c21.x, -v6.y
					    cmp r0.x, r0.x, c23.x, c23.y
					    mov r1.w, c23.x
					    mul_pp oC0, r0.x, r1
					
					// approximately 193 instruction slots used (7 texture, 186 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
					    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
					    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat5.y * _OcclusionStrength + u_xlat42;
					    u_xlat17 = (-_Glossiness) + 1.0;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb44){
					        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat44 = min(u_xlat8.z, u_xlat44);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat17 * u_xlat44;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
					    u_xlat45 = log2(u_xlat7.w);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.y;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat45);
					    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb46){
					        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb46){
					            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat46 = inversesqrt(u_xlat46);
					            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat46 = min(u_xlat10.z, u_xlat46);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
					        u_xlat44 = log2(u_xlat5.w);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.y;
					        u_xlat44 = exp2(u_xlat44);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat45) * u_xlat7.xyz + (-u_xlat5.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
					    }
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
					    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat40 = max(u_xlat40, 0.00100000005);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb44 = u_xlat40<0.0;
					    u_xlat40 = (-u_xlat40) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat3.xyz) * vec3(u_xlat40) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat17 * u_xlat17;
					    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
					    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat40 * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat16.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat16.x = u_xlat28 * u_xlat28;
					    u_xlat29 = u_xlat44 * u_xlat44;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat7.x + 1.0;
					    u_xlat44 = u_xlat29 * 3.14159274;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.00000001e-07;
					    u_xlat16.x = u_xlat16.x / u_xlat29;
					    u_xlat29 = (-u_xlat40) + 1.0;
					    u_xlat44 = u_xlat29 * u_xlat29;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat44 = u_xlat2.x * u_xlat2.x;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat2.x = u_xlat2.x * u_xlat44;
					    u_xlat44 = u_xlat2.y * u_xlat2.y;
					    u_xlat44 = dot(vec2(u_xlat44), vec2(u_xlat17));
					    u_xlat44 = u_xlat44 + -0.5;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.0;
					    u_xlat44 = u_xlat44 * u_xlat2.x + 1.0;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat3.x = u_xlat16.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat16.x = sqrt(u_xlat16.x);
					    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat40 = u_xlat40 * u_xlat29;
					    u_xlat28 = u_xlat28 * u_xlat17;
					    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
					    u_xlat16.x = float(1.0) / u_xlat7.y;
					    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
					    u_xlat39 = (-u_xlat39) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xzw;
					    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat4.xzw * u_xlat3.xxx;
					    u_xlat40 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat40 * u_xlat40;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat40 = u_xlat40 * u_xlat15.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat39 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _EmissionColor                 c19      1
					//   _TranThreashold                c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 1, 0, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord8_pp v4.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, c15, r0, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texld_pp r4, v0, s3
					    mov r5.xy, c22
					    add_pp r3.w, r5.x, -c18.x
					    mad_pp r3.w, r4.y, c18.x, r3.w
					    add_pp r4.x, r5.x, -c17.x
					    dp3_pp r4.y, r3, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3.xxyz
					    mov r2.w, c22.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r5.xzw, r6.xyyz, v3.xyyz
					    max_pp r6.xyz, r5.xzww, c22.y
					    abs r2.w, c13.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r5.xzw, r7.xyyz, c22.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.z
					    exp_pp r7.z, r5.w
					    mad_pp r5.xzw, r7.xyyz, c21.x, c21.y
					    max_pp r7.xyz, r5.xzww, c22.y
					    cmp_pp r5.xzw, -r2.w, r7.xyyz, r6.xyyz
					    if_lt -c6.w, r5.y
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c4, -v4
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c5, -v4
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r6.w, r7.y, r7.x
					      min_pp r8.x, r7.z, r6.w
					      add r7.xyz, -c6, v4
					      mad_pp r6.xyz, r6, r8.x, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r7.x, r4.x, -c21.z, c21.w
					    mul_pp r7.x, r4.x, r7.x
					    mul_pp r6.w, r7.x, c22.w
					    texldl_pp r7, r6, s0
					    pow_pp r8.x, r7.w, c7.y
					    mul_pp r7.w, r8.x, c7.x
					    mul_pp r8.xyz, r7, r7.w
					    mov r8.w, c5.w
					    if_lt r8.w, c23.x
					      if_lt -c10.w, r5.y
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c8, -v4
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c9, -v4
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r5.y, r10.y, r10.x
					        min_pp r8.w, r10.z, r5.y
					        add r10.xyz, -c10, v4
					        mad_pp r6.xyz, r9, r8.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r6, r6, s1
					      pow_pp r4.y, r6.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r6.xxyz, r4.y
					      mad r6.xyz, r7.w, r7, -r4.yzww
					      mad_pp r8.xyz, c5.w, r6, r4.yzww
					    endif
					    mul_pp r4.yzw, r3.w, r8.xxyz
					    mad_pp r6.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r6, r6
					    add r5.y, -r1.w, c23.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.y, c23.z, r1.w
					    mul_pp r6.xyz, r1.w, r6
					    dp3_pp r1.w, r2, -r3
					    add r5.y, -r1.w, c23.w
					    mad_pp r7.xyz, -r3, r5.y, r2
					    cmp_pp r2.xyz, r1.w, r2, r7
					    dp3_pp r1.w, r2, c0
					    max_pp r5.y, r1.w, c22.y
					    dp3_pp r1.w, r2, r6
					    max_pp r6.w, r1.w, c22.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c22.y
					    dp3_pp r1.w, c0, r6
					    max_pp r2.y, r1.w, c22.y
					    mul_pp r1.w, r4.x, r4.x
					    mad_pp r2.z, r4.x, -r4.x, c22.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.y, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.y, r3.x, r2.z
					    add r2.z, r2.z, c23.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.w, r6.w
					    mad r6.xy, r1.w, r1.w, c24
					    mad_pp r3.y, r3.y, r6.x, c22.x
					    mul r3.z, r3.y, c24.z
					    mad r3.y, r3.z, r3.y, c24.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.y, c22.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c22.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    mul_pp r3.z, r2.y, r2.y
					    dp2add_pp r3.z, r3.z, r4.x, c25.x
					    mad_pp r3.y, r3.z, r3.y, c22.x
					    mad_pp r3.z, r3.z, r2.x, c22.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c25.y
					    mad r2.z, r2.z, -c25.y, c25.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c25.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.y, r2.z
					    mul_pp r3.x, r5.y, r3.y
					    mul_pp r1.w, r1.w, r4.x
					    mad_pp r1.w, r1.w, -c26.x, c26.y
					    rcp_pp r3.y, r6.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c22.x
					    add_sat_pp r0.w, r0.w, c17.x
					    mul_pp r3.xyz, r3.x, c14
					    mad_pp r3.xyz, r5.xzww, r3.w, r3
					    mul_pp r5.xyz, r2.z, c14
					    cmp_pp r5.xyz, r2.z, r5, c22.y
					    add_pp r2.y, -r2.y, c22.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c22.x, r0
					    mul_pp r2.yzw, r5.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c19, r0
					    add r1.x, c20.x, -v4.y
					    cmp r1.x, r1.x, c22.x, c22.y
					    mov r0.w, c22.x
					    mul_pp oC0, r0, r1.x
					
					// approximately 189 instruction slots used (7 texture, 182 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
					    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat4.y * _OcclusionStrength + u_xlat39;
					    u_xlat4.x = (-_Glossiness) + 1.0;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat2);
					    u_xlat5.y = dot(unity_SHAg, u_xlat2);
					    u_xlat5.z = dot(unity_SHAb, u_xlat2);
					    u_xlat5.xyz = u_xlat5.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb38 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb38)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb41){
					        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
					        u_xlat41 = inversesqrt(u_xlat41);
					        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
					        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat41 = min(u_xlat7.z, u_xlat41);
					        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat16.xyz;
					    }
					    u_xlat41 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
					    u_xlat41 = u_xlat4.x * u_xlat41;
					    u_xlat41 = u_xlat41 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
					    u_xlat42 = log2(u_xlat6.w);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb43){
					        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb43){
					            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
					            u_xlat43 = inversesqrt(u_xlat43);
					            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
					            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat43 = min(u_xlat9.z, u_xlat43);
					            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
					        u_xlat16.x = log2(u_xlat8.w);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.y;
					        u_xlat16.x = exp2(u_xlat16.x);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
					        u_xlat16.xyz = u_xlat8.xyz * u_xlat16.xxx;
					        u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz + (-u_xlat16.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
					    }
					    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat37 = max(u_xlat37, 0.00100000005);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb41 = u_xlat37<0.0;
					    u_xlat37 = (-u_xlat37) + 9.99999975e-06;
					    u_xlat7.xyz = (-u_xlat3.xyz) * vec3(u_xlat37) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat2.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat41 = max(u_xlat41, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat26 = u_xlat4.x * u_xlat4.x;
					    u_xlat3.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat37 * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat15.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat15.x = u_xlat26 * u_xlat26;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat6.x + 1.0;
					    u_xlat41 = u_xlat27 * 3.14159274;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.00000001e-07;
					    u_xlat15.x = u_xlat15.x / u_xlat27;
					    u_xlat27 = (-u_xlat37) + 1.0;
					    u_xlat41 = u_xlat27 * u_xlat27;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat41 = u_xlat2.x * u_xlat2.x;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat2.x = u_xlat2.x * u_xlat41;
					    u_xlat41 = u_xlat2.y * u_xlat2.y;
					    u_xlat41 = dot(vec2(u_xlat41), u_xlat4.xx);
					    u_xlat41 = u_xlat41 + -0.5;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.0;
					    u_xlat41 = u_xlat41 * u_xlat2.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat3.x = u_xlat15.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat15.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat3.x = (u_xlatb38) ? u_xlat15.x : u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat37 = u_xlat37 * u_xlat27;
					    u_xlat26 = u_xlat26 * u_xlat4.x;
					    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
					    u_xlat15.x = float(1.0) / u_xlat6.y;
					    u_xlat26 = (u_xlatb38) ? u_xlat26 : u_xlat15.x;
					    u_xlat36 = (-u_xlat36) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat37 = (-u_xlat2.y) + 1.0;
					    u_xlat14.x = u_xlat37 * u_xlat37;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat37 = u_xlat37 * u_xlat14.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _EmissionColor                 c19      1
					//   _TranThreashold                c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 1, 0, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, c15, r0, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texldp_pp r4, v4, s5
					    texld_pp r5, v0, s3
					    mov r6.xy, c22
					    add_pp r3.w, r6.x, -c18.x
					    mad_pp r3.w, r5.y, c18.x, r3.w
					    add_pp r4.y, r6.x, -c17.x
					    dp3_pp r4.z, r3, r2
					    add_pp r4.z, r4.z, r4.z
					    mad_pp r5.xyz, r2, -r4.z, r3
					    mul_pp r4.xzw, r4.x, c14.xyyz
					    mov r2.w, c22.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r6.xzw, r7.xyyz, v3.xyyz
					    max_pp r7.xyz, r6.xzww, c22.y
					    abs r2.w, c13.w
					    log_pp r8.x, r7.x
					    log_pp r8.y, r7.y
					    log_pp r8.z, r7.z
					    mul_pp r6.xzw, r8.xyyz, c22.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.z
					    exp_pp r8.z, r6.w
					    mad_pp r6.xzw, r8.xyyz, c21.x, c21.y
					    max_pp r8.xyz, r6.xzww, c22.y
					    cmp_pp r6.xzw, -r2.w, r8.xyyz, r7.xyyz
					    if_lt -c6.w, r6.y
					      nrm_pp r7.xyz, r5
					      add r8.xyz, c4, -v5
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c5, -v5
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r5.w, r8.y, r8.x
					      min_pp r7.w, r8.z, r5.w
					      add r8.xyz, -c6, v5
					      mad_pp r7.xyz, r7, r7.w, r8
					    else
					      mov_pp r7.xyz, r5
					    endif
					    mad_pp r5.w, r4.y, -c21.z, c21.w
					    mul_pp r5.w, r4.y, r5.w
					    mul_pp r7.w, r5.w, c22.w
					    texldl_pp r8, r7, s0
					    pow_pp r5.w, r8.w, c7.y
					    mul_pp r5.w, r5.w, c7.x
					    mul_pp r9.xyz, r8, r5.w
					    mov r8.w, c5.w
					    if_lt r8.w, c23.x
					      if_lt -c10.w, r6.y
					        nrm_pp r10.xyz, r5
					        add r11.xyz, c8, -v5
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v5
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r6.y, r11.y, r11.x
					        min_pp r8.w, r11.z, r6.y
					        add r11.xyz, -c10, v5
					        mad_pp r7.xyz, r10, r8.w, r11
					      else
					        mov_pp r7.xyz, r5
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r5.x, r7.w, c11.y
					      mul_pp r5.x, r5.x, c11.x
					      mul_pp r5.xyz, r7, r5.x
					      mad r7.xyz, r5.w, r8, -r5
					      mad_pp r9.xyz, c5.w, r7, r5
					    endif
					    mul_pp r5.xyz, r3.w, r9
					    mad_pp r7.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r7, r7
					    add r5.w, -r1.w, c23.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.w, c23.z, r1.w
					    mul_pp r7.xyz, r1.w, r7
					    dp3_pp r1.w, r2, -r3
					    add r5.w, -r1.w, c23.w
					    mad_pp r8.xyz, -r3, r5.w, r2
					    cmp_pp r2.xyz, r1.w, r2, r8
					    dp3_pp r1.w, r2, c0
					    max_pp r5.w, r1.w, c22.y
					    dp3_pp r1.w, r2, r7
					    max_pp r6.y, r1.w, c22.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c22.y
					    dp3_pp r1.w, c0, r7
					    max_pp r2.y, r1.w, c22.y
					    mul_pp r1.w, r4.y, r4.y
					    mad_pp r2.z, r4.y, -r4.y, c22.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.w, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.w, r3.x, r2.z
					    add r2.z, r2.z, c23.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.y, r6.y
					    mad r7.xy, r1.w, r1.w, c24
					    mad_pp r3.y, r3.y, r7.x, c22.x
					    mul r3.z, r3.y, c24.z
					    mad r3.y, r3.z, r3.y, c24.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.w, c22.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c22.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    add_pp r3.z, r2.y, r2.y
					    mul_pp r3.z, r2.y, r3.z
					    mad_pp r3.z, r3.z, r4.y, c25.x
					    mad_pp r3.y, r3.z, r3.y, c22.x
					    mad_pp r3.z, r3.z, r2.x, c22.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c25.y
					    mad r2.z, r2.z, -c25.y, c25.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c25.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.w, r2.z
					    max_pp r3.x, r2.z, c22.y
					    mul_pp r2.z, r5.w, r3.y
					    mul_pp r1.w, r1.w, r4.y
					    mad_pp r1.w, r1.w, -c26.x, c26.y
					    rcp_pp r3.y, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c22.x
					    add_sat_pp r0.w, r0.w, c17.x
					    mul_pp r7.xyz, r2.z, r4.xzww
					    mad_pp r3.yzw, r6.xxzw, r3.w, r7.xxyz
					    mul_pp r4.xyz, r4.xzww, r3.x
					    add_pp r2.y, -r2.y, c22.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c22.x, r0
					    mul_pp r2.yzw, r4.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3.yzww, r2.yzww
					    mul_pp r2.yzw, r5.xxyz, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c19, r0
					    add r1.x, c20.x, -v5.y
					    cmp r1.x, r1.x, c22.x, c22.y
					    mov r0.w, c22.x
					    mul_pp oC0, r0, r1.x
					
					// approximately 191 instruction slots used (8 texture, 183 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
					    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
					    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat5.y * _OcclusionStrength + u_xlat42;
					    u_xlat17 = (-_Glossiness) + 1.0;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb44){
					        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat44 = min(u_xlat8.z, u_xlat44);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat17 * u_xlat44;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
					    u_xlat45 = log2(u_xlat7.w);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.y;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat45);
					    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb46){
					        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb46){
					            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat46 = inversesqrt(u_xlat46);
					            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat46 = min(u_xlat10.z, u_xlat46);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
					        u_xlat44 = log2(u_xlat5.w);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.y;
					        u_xlat44 = exp2(u_xlat44);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat45) * u_xlat7.xyz + (-u_xlat5.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
					    }
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
					    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat40 = max(u_xlat40, 0.00100000005);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb44 = u_xlat40<0.0;
					    u_xlat40 = (-u_xlat40) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat3.xyz) * vec3(u_xlat40) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat17 * u_xlat17;
					    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
					    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat40 * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat16.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat16.x = u_xlat28 * u_xlat28;
					    u_xlat29 = u_xlat44 * u_xlat44;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat7.x + 1.0;
					    u_xlat44 = u_xlat29 * 3.14159274;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.00000001e-07;
					    u_xlat16.x = u_xlat16.x / u_xlat29;
					    u_xlat29 = (-u_xlat40) + 1.0;
					    u_xlat44 = u_xlat29 * u_xlat29;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat44 = u_xlat2.x * u_xlat2.x;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat2.x = u_xlat2.x * u_xlat44;
					    u_xlat44 = u_xlat2.y * u_xlat2.y;
					    u_xlat44 = dot(vec2(u_xlat44), vec2(u_xlat17));
					    u_xlat44 = u_xlat44 + -0.5;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.0;
					    u_xlat44 = u_xlat44 * u_xlat2.x + 1.0;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat3.x = u_xlat16.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat16.x = sqrt(u_xlat16.x);
					    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat40 = u_xlat40 * u_xlat29;
					    u_xlat28 = u_xlat28 * u_xlat17;
					    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
					    u_xlat16.x = float(1.0) / u_xlat7.y;
					    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
					    u_xlat39 = (-u_xlat39) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xzw;
					    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat4.xzw * u_xlat3.xxx;
					    u_xlat40 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat40 * u_xlat40;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat40 = u_xlat40 * u_xlat15.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _EmissionColor                 c21      1
					//   _TranThreashold                c22      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_3_0
					    def c23, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c24, 1, 0, 0.416666657, 6
					    def c25, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c26, -1, 1, 3.14159274, 1.00000001e-007
					    def c27, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c28, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord7 v4.x
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, c17, r0, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texld_pp r4, v0, s3
					    mov r5.xy, c24
					    add_pp r3.w, r5.x, -c20.x
					    mad_pp r3.w, r4.y, c20.x, r3.w
					    add_pp r4.x, r5.x, -c19.x
					    dp3_pp r4.y, r3, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3.xxyz
					    mov r2.w, c24.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r5.xzw, r6.xyyz, v3.xyyz
					    max_pp r6.xyz, r5.xzww, c24.y
					    abs r2.w, c15.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r5.xzw, r7.xyyz, c24.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.z
					    exp_pp r7.z, r5.w
					    mad_pp r5.xzw, r7.xyyz, c23.x, c23.y
					    max_pp r7.xyz, r5.xzww, c24.y
					    cmp_pp r5.xzw, -r2.w, r7.xyyz, r6.xyyz
					    if_lt -c8.w, r5.y
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c6, -v5
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c7, -v5
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r6.w, r7.y, r7.x
					      min_pp r8.x, r7.z, r6.w
					      add r7.xyz, -c8, v5
					      mad_pp r6.xyz, r6, r8.x, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r7.x, r4.x, -c23.z, c23.w
					    mul_pp r7.x, r4.x, r7.x
					    mul_pp r6.w, r7.x, c24.w
					    texldl_pp r7, r6, s0
					    pow_pp r8.x, r7.w, c9.y
					    mul_pp r7.w, r8.x, c9.x
					    mul_pp r8.xyz, r7, r7.w
					    mov r8.w, c7.w
					    if_lt r8.w, c25.x
					      if_lt -c12.w, r5.y
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c10, -v5
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c11, -v5
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r5.y, r10.y, r10.x
					        min_pp r8.w, r10.z, r5.y
					        add r10.xyz, -c12, v5
					        mad_pp r6.xyz, r9, r8.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r6, r6, s1
					      pow_pp r4.y, r6.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r6.xxyz, r4.y
					      mad r6.xyz, r7.w, r7, -r4.yzww
					      mad_pp r8.xyz, c7.w, r6, r4.yzww
					    endif
					    mul_pp r4.yzw, r3.w, r8.xxyz
					    mad_pp r6.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r6, r6
					    add r5.y, -r1.w, c25.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.y, c25.z, r1.w
					    mul_pp r6.xyz, r1.w, r6
					    dp3_pp r1.w, r2, -r3
					    add r5.y, -r1.w, c25.w
					    mad_pp r7.xyz, -r3, r5.y, r2
					    cmp_pp r2.xyz, r1.w, r2, r7
					    dp3_pp r1.w, r2, c0
					    max_pp r5.y, r1.w, c24.y
					    dp3_pp r1.w, r2, r6
					    max_pp r6.w, r1.w, c24.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c24.y
					    dp3_pp r1.w, c0, r6
					    max_pp r2.y, r1.w, c24.y
					    mul_pp r1.w, r4.x, r4.x
					    mad_pp r2.z, r4.x, -r4.x, c24.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.y, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.y, r3.x, r2.z
					    add r2.z, r2.z, c25.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.w, r6.w
					    mad r6.xy, r1.w, r1.w, c26
					    mad_pp r3.y, r3.y, r6.x, c24.x
					    mul r3.z, r3.y, c26.z
					    mad r3.y, r3.z, r3.y, c26.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.y, c24.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c24.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    mul_pp r3.z, r2.y, r2.y
					    dp2add_pp r3.z, r3.z, r4.x, c27.x
					    mad_pp r3.y, r3.z, r3.y, c24.x
					    mad_pp r3.z, r3.z, r2.x, c24.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c27.y
					    mad r2.z, r2.z, -c27.y, c27.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c27.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.y, r2.z
					    mul_pp r3.x, r5.y, r3.y
					    mul_pp r1.w, r1.w, r4.x
					    mad_pp r1.w, r1.w, -c28.x, c28.y
					    rcp_pp r3.y, r6.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c24.x
					    add_sat_pp r0.w, r0.w, c19.x
					    mul_pp r3.xyz, r3.x, c16
					    mad_pp r3.xyz, r5.xzww, r3.w, r3
					    mul_pp r5.xyz, r2.z, c16
					    cmp_pp r5.xyz, r2.z, r5, c24.y
					    add_pp r2.y, -r2.y, c24.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c24.x, r0
					    mul_pp r2.yzw, r5.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c21, r0
					    mul r0.w, c5.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r1.xyz, r0.w, r0, c4
					    add r0.x, c22.x, -v5.y
					    cmp r0.x, r0.x, c24.x, c24.y
					    mov r1.w, c24.x
					    mul_pp oC0, r0.x, r1
					
					// approximately 193 instruction slots used (7 texture, 186 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat26;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb38;
					float u_xlat39;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
					    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat4.y * _OcclusionStrength + u_xlat39;
					    u_xlat4.x = (-_Glossiness) + 1.0;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat2);
					    u_xlat5.y = dot(unity_SHAg, u_xlat2);
					    u_xlat5.z = dot(unity_SHAb, u_xlat2);
					    u_xlat5.xyz = u_xlat5.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb38 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb38)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb41){
					        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
					        u_xlat41 = inversesqrt(u_xlat41);
					        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
					        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat41 = min(u_xlat7.z, u_xlat41);
					        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat16.xyz;
					    }
					    u_xlat41 = (-u_xlat4.x) * 0.699999988 + 1.70000005;
					    u_xlat41 = u_xlat4.x * u_xlat41;
					    u_xlat41 = u_xlat41 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
					    u_xlat42 = log2(u_xlat6.w);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb43){
					        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb43){
					            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
					            u_xlat43 = inversesqrt(u_xlat43);
					            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
					            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat43 = min(u_xlat9.z, u_xlat43);
					            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
					        u_xlat16.x = log2(u_xlat8.w);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.y;
					        u_xlat16.x = exp2(u_xlat16.x);
					        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
					        u_xlat16.xyz = u_xlat8.xyz * u_xlat16.xxx;
					        u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz + (-u_xlat16.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
					    }
					    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat37 = max(u_xlat37, 0.00100000005);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb41 = u_xlat37<0.0;
					    u_xlat37 = (-u_xlat37) + 9.99999975e-06;
					    u_xlat7.xyz = (-u_xlat3.xyz) * vec3(u_xlat37) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat2.xyz;
					    u_xlat37 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat41 = max(u_xlat41, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat26 = u_xlat4.x * u_xlat4.x;
					    u_xlat3.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat37 * u_xlat3.x + u_xlat26;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat15.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat15.x = u_xlat26 * u_xlat26;
					    u_xlat27 = u_xlat41 * u_xlat41;
					    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat6.x + 1.0;
					    u_xlat41 = u_xlat27 * 3.14159274;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.00000001e-07;
					    u_xlat15.x = u_xlat15.x / u_xlat27;
					    u_xlat27 = (-u_xlat37) + 1.0;
					    u_xlat41 = u_xlat27 * u_xlat27;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat41 = u_xlat2.x * u_xlat2.x;
					    u_xlat41 = u_xlat41 * u_xlat41;
					    u_xlat2.x = u_xlat2.x * u_xlat41;
					    u_xlat41 = u_xlat2.y * u_xlat2.y;
					    u_xlat41 = dot(vec2(u_xlat41), u_xlat4.xx);
					    u_xlat41 = u_xlat41 + -0.5;
					    u_xlat27 = u_xlat41 * u_xlat27 + 1.0;
					    u_xlat41 = u_xlat41 * u_xlat2.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat41;
					    u_xlat3.x = u_xlat15.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat15.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat15.x = sqrt(u_xlat15.x);
					    u_xlat3.x = (u_xlatb38) ? u_xlat15.x : u_xlat3.x;
					    u_xlat3.x = u_xlat37 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat37 = u_xlat37 * u_xlat27;
					    u_xlat26 = u_xlat26 * u_xlat4.x;
					    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
					    u_xlat15.x = float(1.0) / u_xlat6.y;
					    u_xlat26 = (u_xlatb38) ? u_xlat26 : u_xlat15.x;
					    u_xlat36 = (-u_xlat36) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat37 = (-u_xlat2.y) + 1.0;
					    u_xlat14.x = u_xlat37 * u_xlat37;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat37 = u_xlat37 * u_xlat14.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _EmissionColor                 c21      1
					//   _TranThreashold                c22      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_3_0
					    def c23, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c24, 1, 0, 0.416666657, 6
					    def c25, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c26, -1, 1, 3.14159274, 1.00000001e-007
					    def c27, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c28, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord7 v5.x
					    dcl_texcoord8_pp v6.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld r0, v0, s2
					    mul_pp r1.xyz, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, c17, r0, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r1.w, v1, v1
					    rsq_pp r1.w, r1.w
					    mul_pp r3.xyz, r1.w, v1
					    texldp_pp r4, v4, s5
					    texld_pp r5, v0, s3
					    mov r6.xy, c24
					    add_pp r3.w, r6.x, -c20.x
					    mad_pp r3.w, r5.y, c20.x, r3.w
					    add_pp r4.y, r6.x, -c19.x
					    dp3_pp r4.z, r3, r2
					    add_pp r4.z, r4.z, r4.z
					    mad_pp r5.xyz, r2, -r4.z, r3
					    mul_pp r4.xzw, r4.x, c16.xyyz
					    mov r2.w, c24.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r6.xzw, r7.xyyz, v3.xyyz
					    max_pp r7.xyz, r6.xzww, c24.y
					    abs r2.w, c15.w
					    log_pp r8.x, r7.x
					    log_pp r8.y, r7.y
					    log_pp r8.z, r7.z
					    mul_pp r6.xzw, r8.xyyz, c24.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.z
					    exp_pp r8.z, r6.w
					    mad_pp r6.xzw, r8.xyyz, c23.x, c23.y
					    max_pp r8.xyz, r6.xzww, c24.y
					    cmp_pp r6.xzw, -r2.w, r8.xyyz, r7.xyyz
					    if_lt -c8.w, r6.y
					      nrm_pp r7.xyz, r5
					      add r8.xyz, c6, -v6
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c7, -v6
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r5.w, r8.y, r8.x
					      min_pp r7.w, r8.z, r5.w
					      add r8.xyz, -c8, v6
					      mad_pp r7.xyz, r7, r7.w, r8
					    else
					      mov_pp r7.xyz, r5
					    endif
					    mad_pp r5.w, r4.y, -c23.z, c23.w
					    mul_pp r5.w, r4.y, r5.w
					    mul_pp r7.w, r5.w, c24.w
					    texldl_pp r8, r7, s0
					    pow_pp r5.w, r8.w, c9.y
					    mul_pp r5.w, r5.w, c9.x
					    mul_pp r9.xyz, r8, r5.w
					    mov r8.w, c7.w
					    if_lt r8.w, c25.x
					      if_lt -c12.w, r6.y
					        nrm_pp r10.xyz, r5
					        add r11.xyz, c10, -v6
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c11, -v6
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r6.y, r11.y, r11.x
					        min_pp r8.w, r11.z, r6.y
					        add r11.xyz, -c12, v6
					        mad_pp r7.xyz, r10, r8.w, r11
					      else
					        mov_pp r7.xyz, r5
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r5.x, r7.w, c13.y
					      mul_pp r5.x, r5.x, c13.x
					      mul_pp r5.xyz, r7, r5.x
					      mad r7.xyz, r5.w, r8, -r5
					      mad_pp r9.xyz, c7.w, r7, r5
					    endif
					    mul_pp r5.xyz, r3.w, r9
					    mad_pp r7.xyz, v1, -r1.w, c0
					    dp3_pp r1.w, r7, r7
					    add r5.w, -r1.w, c25.y
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r5.w, c25.z, r1.w
					    mul_pp r7.xyz, r1.w, r7
					    dp3_pp r1.w, r2, -r3
					    add r5.w, -r1.w, c25.w
					    mad_pp r8.xyz, -r3, r5.w, r2
					    cmp_pp r2.xyz, r1.w, r2, r8
					    dp3_pp r1.w, r2, c0
					    max_pp r5.w, r1.w, c24.y
					    dp3_pp r1.w, r2, r7
					    max_pp r6.y, r1.w, c24.y
					    dp3_pp r1.w, r2, -r3
					    max_pp r2.x, r1.w, c24.y
					    dp3_pp r1.w, c0, r7
					    max_pp r2.y, r1.w, c24.y
					    mul_pp r1.w, r4.y, r4.y
					    mad_pp r2.z, r4.y, -r4.y, c24.x
					    mad_pp r3.x, r2.x, r2.z, r1.w
					    mad_pp r2.z, r5.w, r2.z, r1.w
					    mul_pp r2.z, r2.z, r2.x
					    mad r2.z, r5.w, r3.x, r2.z
					    add r2.z, r2.z, c25.w
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul_pp r3.x, r1.w, r1.w
					    mul r3.y, r6.y, r6.y
					    mad r7.xy, r1.w, r1.w, c26
					    mad_pp r3.y, r3.y, r7.x, c24.x
					    mul r3.z, r3.y, c26.z
					    mad r3.y, r3.z, r3.y, c26.w
					    rcp r3.y, r3.y
					    mul_pp r3.x, r3.y, r3.x
					    add_pp r3.y, -r5.w, c24.x
					    mul_pp r3.z, r3.y, r3.y
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r3.y, r3.y, r3.z
					    add_pp r2.x, -r2.x, c24.x
					    mul_pp r3.z, r2.x, r2.x
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r2.x, r2.x, r3.z
					    add_pp r3.z, r2.y, r2.y
					    mul_pp r3.z, r2.y, r3.z
					    mad_pp r3.z, r3.z, r4.y, c27.x
					    mad_pp r3.y, r3.z, r3.y, c24.x
					    mad_pp r3.z, r3.z, r2.x, c24.x
					    mul_pp r3.y, r3.z, r3.y
					    mul r2.z, r2.z, r3.x
					    mul_pp r3.x, r2.z, c27.y
					    mad r2.z, r2.z, -c27.y, c27.z
					    rsq r3.z, r3.x
					    rcp_pp r3.z, r3.z
					    cmp_pp r2.z, r2.z, c27.w, r3.z
					    cmp_pp r2.z, -r2.w, r2.z, r3.x
					    mul_pp r2.z, r5.w, r2.z
					    max_pp r3.x, r2.z, c24.y
					    mul_pp r2.z, r5.w, r3.y
					    mul_pp r1.w, r1.w, r4.y
					    mad_pp r1.w, r1.w, -c28.x, c28.y
					    rcp_pp r3.y, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r3.y
					    add_pp r0.w, -r0.w, c24.x
					    add_sat_pp r0.w, r0.w, c19.x
					    mul_pp r7.xyz, r2.z, r4.xzww
					    mad_pp r3.yzw, r6.xxzw, r3.w, r7.xxyz
					    mul_pp r4.xyz, r4.xzww, r3.x
					    add_pp r2.y, -r2.y, c24.x
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r2.z, r2.z, r2.z
					    mul_pp r2.y, r2.y, r2.z
					    lrp_pp r6.xyz, r2.y, c24.x, r0
					    mul_pp r2.yzw, r4.xxyz, r6.xxyz
					    mad_pp r1.xyz, r1, r3.yzww, r2.yzww
					    mul_pp r2.yzw, r5.xxyz, r1.w
					    lrp_pp r3.xyz, r2.x, r0.w, r0
					    mad_pp r0.xyz, r2.yzww, r3, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c21, r0
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r1.xyz, r0.w, r0, c4
					    add r0.x, c22.x, -v6.y
					    cmp r0.x, r0.x, c24.x, c24.y
					    mov r1.w, c24.x
					    mul_pp oC0, r0.x, r1
					
					// approximately 195 instruction slots used (8 texture, 187 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
					    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
					    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat5.y * _OcclusionStrength + u_xlat42;
					    u_xlat17 = (-_Glossiness) + 1.0;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb44){
					        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat44 = min(u_xlat8.z, u_xlat44);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat17 * u_xlat44;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
					    u_xlat45 = log2(u_xlat7.w);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.y;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat45);
					    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb46){
					        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb46){
					            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat46 = inversesqrt(u_xlat46);
					            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat46 = min(u_xlat10.z, u_xlat46);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
					        u_xlat44 = log2(u_xlat5.w);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.y;
					        u_xlat44 = exp2(u_xlat44);
					        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat45) * u_xlat7.xyz + (-u_xlat5.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
					    }
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
					    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat40 = max(u_xlat40, 0.00100000005);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlatb44 = u_xlat40<0.0;
					    u_xlat40 = (-u_xlat40) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat3.xyz) * vec3(u_xlat40) + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat17 * u_xlat17;
					    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
					    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat40 * u_xlat3.x + u_xlat28;
					    u_xlat3.x = u_xlat2.x * u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat16.x + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 2.0 / u_xlat3.x;
					    u_xlat16.x = u_xlat28 * u_xlat28;
					    u_xlat29 = u_xlat44 * u_xlat44;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat7.x + 1.0;
					    u_xlat44 = u_xlat29 * 3.14159274;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.00000001e-07;
					    u_xlat16.x = u_xlat16.x / u_xlat29;
					    u_xlat29 = (-u_xlat40) + 1.0;
					    u_xlat44 = u_xlat29 * u_xlat29;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat44 = u_xlat2.x * u_xlat2.x;
					    u_xlat44 = u_xlat44 * u_xlat44;
					    u_xlat2.x = u_xlat2.x * u_xlat44;
					    u_xlat44 = u_xlat2.y * u_xlat2.y;
					    u_xlat44 = dot(vec2(u_xlat44), vec2(u_xlat17));
					    u_xlat44 = u_xlat44 + -0.5;
					    u_xlat29 = u_xlat44 * u_xlat29 + 1.0;
					    u_xlat44 = u_xlat44 * u_xlat2.x + 1.0;
					    u_xlat29 = u_xlat29 * u_xlat44;
					    u_xlat3.x = u_xlat16.x * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 0.785398185;
					    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat16.x = sqrt(u_xlat16.x);
					    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
					    u_xlat3.x = u_xlat40 * u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat40 = u_xlat40 * u_xlat29;
					    u_xlat28 = u_xlat28 * u_xlat17;
					    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
					    u_xlat16.x = float(1.0) / u_xlat7.y;
					    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
					    u_xlat39 = (-u_xlat39) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xzw;
					    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat4.xzw * u_xlat3.xxx;
					    u_xlat40 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat40 * u_xlat40;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat40 = u_xlat40 * u_xlat15.x;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb1 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat0.w = 1.0;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _TranThreashold                c19      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_3_0
					    def c20, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c21, 1, 0, 0.416666657, 6
					    def c22, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c23, -1, 1, 3.14159274, 1.00000001e-007
					    def c24, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c25, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord8_pp v4.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    texld r0, v0, s2
					    mul_pp r1, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, r0, c15, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c21.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texld_pp r6, v0, s3
					    mov r7.xy, c21
					    add_pp r0.w, r7.x, -c18.x
					    mad_pp r0.w, r6.y, c18.x, r0.w
					    add_pp r1.w, r7.x, -c17.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mov r2.w, c21.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r6.xyz, r6, v3
					    max_pp r7.xzw, r6.xyyz, c21.y
					    abs r2.w, c13.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.z
					    log_pp r6.z, r7.w
					    mul_pp r6.xyz, r6, c21.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c20.x, c20.y
					    max_pp r8.xyz, r6, c21.y
					    cmp_pp r6.xyz, -r2.w, r8, r7.xzww
					    if_lt -c6.w, r7.y
					      nrm_pp r8.xyz, r4.yzww
					      add r7.xzw, c4.xyyz, -v4.xyyz
					      rcp r9.x, r8.x
					      rcp r9.y, r8.y
					      rcp r9.z, r8.z
					      mul_pp r7.xzw, r7, r9.xyyz
					      add r10.xyz, c5, -v4
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r7.xzw, -r8.xyyz, r9.xyyz, r7
					      min_pp r6.w, r7.z, r7.x
					      min_pp r8.w, r7.w, r6.w
					      add r7.xzw, -c6.xyyz, v4.xyyz
					      mad_pp r8.xyz, r8, r8.w, r7.xzww
					    else
					      mov_pp r8.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c20.z, c20.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r8.w, r6.w, c21.w
					    texldl_pp r9, r8, s0
					    pow_pp r6.w, r9.w, c7.y
					    mul_pp r6.w, r6.w, c7.x
					    mul_pp r7.xzw, r9.xyyz, r6.w
					    mov r9.w, c5.w
					    if_lt r9.w, c22.x
					      if_lt -c10.w, r7.y
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c8, -v4
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v4
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r7.y, r11.y, r11.x
					        min_pp r9.w, r11.z, r7.y
					        add r11.xyz, -c10, v4
					        mad_pp r8.xyz, r10, r9.w, r11
					      else
					        mov_pp r8.xyz, r4.yzww
					      endif
					      texldl_pp r8, r8, s1
					      pow_pp r4.y, r8.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r8.xxyz, r4.y
					      mad r8.xyz, r6.w, r9, -r4.yzww
					      mad_pp r7.xzw, c5.w, r8.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r7.xxzw
					    mad_pp r7.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r7, r7
					    add r6.w, -r3.x, c22.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c22.z, r3.x
					    mul_pp r7.xyz, r3.x, r7
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c22.w
					    mad_pp r8.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r8
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c21.y
					    dp3_pp r3.x, r2, r7
					    max_pp r7.w, r3.x, c21.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c21.y
					    dp3_pp r2.x, c0, r7
					    max_pp r3.y, r2.x, c21.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c21.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c22.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r7.xy, r2.x, r2.x, c23
					    mad_pp r3.z, r3.z, r7.x, c21.x
					    mul r3.w, r3.z, c23.z
					    mad r3.z, r3.w, r3.z, c23.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c21.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c21.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c24.x
					    mad_pp r3.z, r3.w, r3.z, c21.x
					    mad_pp r3.w, r3.w, r3.x, c21.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c24.y
					    mad r2.y, r2.y, -c24.y, c24.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c24.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    mul_pp r2.z, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c25.x, c25.y
					    rcp_pp r2.x, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c17.x
					    mul_pp r7.xyz, r2.z, c14
					    mad_pp r6.xyz, r6, r0.w, r7
					    mul_pp r7.xyz, r2.y, c14
					    cmp_pp r2.yzw, r2.y, r7.xxyz, c21.y
					    add_pp r0.w, -r3.y, c21.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c21.x, r0.xxyz
					    mul_pp r2.yzw, r2, r3
					    mad_pp r1.xyz, r1, r6, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r5.xyz, r2.yzww, r4, r1
					    add r0.x, c19.x, -v4.y
					    cmp r0.x, r0.x, c21.x, c21.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 188 instruction slots used (6 texture, 182 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat39) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat39 + u_xlat4;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat6.y * _OcclusionStrength + u_xlat39;
					    u_xlat40 = (-_Glossiness) + 1.0;
					    u_xlat17.x = dot(u_xlat16.xyz, u_xlat2.xyz);
					    u_xlat17.x = u_xlat17.x + u_xlat17.x;
					    u_xlat17.xyz = u_xlat2.xyz * (-u_xlat17.xxx) + u_xlat16.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb45){
					        u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat45 = inversesqrt(u_xlat45);
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat45);
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat45 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat45 = min(u_xlat8.z, u_xlat45);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat45 = (-u_xlat40) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat40 * u_xlat45;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat45);
					    u_xlat46 = log2(u_xlat7.w);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat47);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat47 = min(u_xlat10.z, u_xlat47);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat45);
					        u_xlat17.x = log2(u_xlat9.w);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.y;
					        u_xlat17.x = exp2(u_xlat17.x);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * u_xlat17.xxx;
					        u_xlat7.xyz = vec3(u_xlat46) * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat17.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlatb45 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat16.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb45)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat40 * u_xlat40;
					    u_xlat16.x = (-u_xlat40) * u_xlat40 + 1.0;
					    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat2.x * u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat29 + u_xlat16.x;
					    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
					    u_xlat16.x = 2.0 / u_xlat16.x;
					    u_xlat29 = u_xlat28 * u_xlat28;
					    u_xlat42 = u_xlat45 * u_xlat45;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat7.x + 1.0;
					    u_xlat45 = u_xlat42 * 3.14159274;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.00000001e-07;
					    u_xlat29 = u_xlat29 / u_xlat42;
					    u_xlat42 = (-u_xlat3.x) + 1.0;
					    u_xlat45 = u_xlat42 * u_xlat42;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat45 = u_xlat2.x * u_xlat2.x;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat2.x = u_xlat2.x * u_xlat45;
					    u_xlat45 = u_xlat2.y * u_xlat2.y;
					    u_xlat45 = dot(vec2(u_xlat45), vec2(u_xlat40));
					    u_xlat45 = u_xlat45 + -0.5;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat2.x + 1.0;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat16.x = u_xlat29 * u_xlat16.x;
					    u_xlat16.x = u_xlat16.x * 0.785398185;
					    u_xlat29 = max(u_xlat16.x, 9.99999975e-05);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat16.x = (u_xlatb41) ? u_xlat29 : u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat42;
					    u_xlat40 = u_xlat40 * u_xlat28;
					    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;
					    u_xlat28 = float(1.0) / u_xlat7.y;
					    u_xlat40 = (u_xlatb41) ? u_xlat40 : u_xlat28;
					    u_xlat28 = u_xlat4 + _Glossiness;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = u_xlat6.xyz * vec3(u_xlat39) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat16.xxx * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat39 * u_xlat39;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat39 = u_xlat39 * u_xlat15.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat17.xyz * vec3(u_xlat40);
					    u_xlat15.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat15.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _TranThreashold                c19      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c20, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c21, 1, 0, 0.416666657, 6
					    def c22, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c23, -1, 1, 3.14159274, 1.00000001e-007
					    def c24, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c25, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, r0, c15, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c21.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texldp_pp r6, v4, s4
					    texld_pp r7, v0, s3
					    mov r8.xy, c21
					    add_pp r0.w, r8.x, -c18.x
					    mad_pp r0.w, r7.y, c18.x, r0.w
					    add_pp r1.w, r8.x, -c17.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mul_pp r6.xyz, r6.x, c14
					    mov r2.w, c21.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r7.xyz, r7, v3
					    max_pp r8.xzw, r7.xyyz, c21.y
					    abs r2.w, c13.w
					    log_pp r7.x, r8.x
					    log_pp r7.y, r8.z
					    log_pp r7.z, r8.w
					    mul_pp r7.xyz, r7, c21.z
					    exp_pp r9.x, r7.x
					    exp_pp r9.y, r7.y
					    exp_pp r9.z, r7.z
					    mad_pp r7.xyz, r9, c20.x, c20.y
					    max_pp r9.xyz, r7, c21.y
					    cmp_pp r7.xyz, -r2.w, r9, r8.xzww
					    if_lt -c6.w, r8.y
					      nrm_pp r9.xyz, r4.yzww
					      add r8.xzw, c4.xyyz, -v5.xyyz
					      rcp r10.x, r9.x
					      rcp r10.y, r9.y
					      rcp r10.z, r9.z
					      mul_pp r8.xzw, r8, r10.xyyz
					      add r11.xyz, c5, -v5
					      mul_pp r10.xyz, r10, r11
					      cmp_pp r8.xzw, -r9.xyyz, r10.xyyz, r8
					      min_pp r6.w, r8.z, r8.x
					      min_pp r7.w, r8.w, r6.w
					      add r8.xzw, -c6.xyyz, v5.xyyz
					      mad_pp r9.xyz, r9, r7.w, r8.xzww
					    else
					      mov_pp r9.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c20.z, c20.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r9.w, r6.w, c21.w
					    texldl_pp r10, r9, s0
					    pow_pp r6.w, r10.w, c7.y
					    mul_pp r6.w, r6.w, c7.x
					    mul_pp r8.xzw, r10.xyyz, r6.w
					    mov r7.w, c5.w
					    if_lt r7.w, c22.x
					      if_lt -c10.w, r8.y
					        nrm_pp r11.xyz, r4.yzww
					        add r12.xyz, c8, -v5
					        rcp r13.x, r11.x
					        rcp r13.y, r11.y
					        rcp r13.z, r11.z
					        mul_pp r12.xyz, r12, r13
					        add r14.xyz, c9, -v5
					        mul_pp r13.xyz, r13, r14
					        cmp_pp r12.xyz, -r11, r13, r12
					        min_pp r7.w, r12.y, r12.x
					        min_pp r8.y, r12.z, r7.w
					        add r12.xyz, -c10, v5
					        mad_pp r9.xyz, r11, r8.y, r12
					      else
					        mov_pp r9.xyz, r4.yzww
					      endif
					      texldl_pp r9, r9, s1
					      pow_pp r4.y, r9.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r9.xxyz, r4.y
					      mad r9.xyz, r6.w, r10, -r4.yzww
					      mad_pp r8.xzw, c5.w, r9.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r8.xxzw
					    mad_pp r8.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r8, r8
					    add r6.w, -r3.x, c22.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c22.z, r3.x
					    mul_pp r8.xyz, r3.x, r8
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c22.w
					    mad_pp r9.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r9
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c21.y
					    dp3_pp r3.x, r2, r8
					    max_pp r7.w, r3.x, c21.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c21.y
					    dp3_pp r2.x, c0, r8
					    max_pp r3.y, r2.x, c21.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c21.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c22.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r8.xy, r2.x, r2.x, c23
					    mad_pp r3.z, r3.z, r8.x, c21.x
					    mul r3.w, r3.z, c23.z
					    mad r3.z, r3.w, r3.z, c23.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c21.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c21.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    add_pp r3.w, r3.y, r3.y
					    mul_pp r3.w, r3.y, r3.w
					    mad_pp r3.w, r3.w, r1.w, c24.x
					    mad_pp r3.z, r3.w, r3.z, c21.x
					    mad_pp r3.w, r3.w, r3.x, c21.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c24.y
					    mad r2.y, r2.y, -c24.y, c24.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c24.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    max_pp r3.w, r2.y, c21.y
					    mul_pp r2.y, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c25.x, c25.y
					    rcp_pp r2.x, r8.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c17.x
					    mul_pp r2.yzw, r2.y, r6.xxyz
					    mad_pp r2.yzw, r7.xxyz, r0.w, r2
					    mul_pp r6.xyz, r6, r3.w
					    add_pp r0.w, -r3.y, c21.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c21.x, r0.xxyz
					    mul_pp r3.yzw, r3, r6.xxyz
					    mad_pp r1.xyz, r1, r2.yzww, r3.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r5.xyz, r2.yzww, r4, r1
					    add r0.x, c19.x, -v5.y
					    cmp r0.x, r0.x, c21.x, c21.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 190 instruction slots used (7 texture, 183 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec3 u_xlat18;
					float u_xlat30;
					float u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat42) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat42 + u_xlat4;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat18.xy);
					    u_xlat7 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat7.y * _OcclusionStrength + u_xlat42;
					    u_xlat43 = (-_Glossiness) + 1.0;
					    u_xlat18.x = dot(u_xlat17.xyz, u_xlat2.xyz);
					    u_xlat18.x = u_xlat18.x + u_xlat18.x;
					    u_xlat18.xyz = u_xlat2.xyz * (-u_xlat18.xxx) + u_xlat17.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat7.x = dot(unity_SHAr, u_xlat2);
					    u_xlat7.y = dot(unity_SHAg, u_xlat2);
					    u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    u_xlat7.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat8.xyz = log2(u_xlat7.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat18.xyz, u_xlat18.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat8.xyz = u_xlat18.xyz * vec3(u_xlat48);
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat48 = min(u_xlat9.z, u_xlat48);
					        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat48) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat18.xyz;
					    }
					    u_xlat48 = (-u_xlat43) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat43 * u_xlat48;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat48);
					    u_xlat49 = log2(u_xlat8.w);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat18.xyz, u_xlat18.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat50);
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat50 = min(u_xlat11.z, u_xlat50);
					            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat18.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					        }
					        u_xlat10 = textureLod(unity_SpecCube1, u_xlat18.xyz, u_xlat48);
					        u_xlat18.x = log2(u_xlat10.w);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.y;
					        u_xlat18.x = exp2(u_xlat18.x);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.x;
					        u_xlat18.xyz = u_xlat10.xyz * u_xlat18.xxx;
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat8.xyz + (-u_xlat18.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat18.xyz;
					    }
					    u_xlat18.xyz = vec3(u_xlat42) * u_xlat9.xyz;
					    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlatb48 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat9.xyz = (-u_xlat17.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat48 = dot(u_xlat2.xyz, u_xlat8.xyz);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat30 = u_xlat43 * u_xlat43;
					    u_xlat17.x = (-u_xlat43) * u_xlat43 + 1.0;
					    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat2.x * u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat31 + u_xlat17.x;
					    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
					    u_xlat17.x = 2.0 / u_xlat17.x;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat45 = u_xlat48 * u_xlat48;
					    u_xlat8.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat8.x + 1.0;
					    u_xlat48 = u_xlat45 * 3.14159274;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.00000001e-07;
					    u_xlat31 = u_xlat31 / u_xlat45;
					    u_xlat45 = (-u_xlat3.x) + 1.0;
					    u_xlat48 = u_xlat45 * u_xlat45;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat48 = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat48;
					    u_xlat48 = u_xlat2.y * u_xlat2.y;
					    u_xlat48 = dot(vec2(u_xlat48), vec2(u_xlat43));
					    u_xlat48 = u_xlat48 + -0.5;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.0;
					    u_xlat48 = u_xlat48 * u_xlat2.x + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat17.x = u_xlat31 * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * 0.785398185;
					    u_xlat31 = max(u_xlat17.x, 9.99999975e-05);
					    u_xlat31 = sqrt(u_xlat31);
					    u_xlat17.x = (u_xlatb44) ? u_xlat31 : u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat45;
					    u_xlat43 = u_xlat43 * u_xlat30;
					    u_xlat43 = (-u_xlat43) * 0.280000001 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat8.y;
					    u_xlat43 = (u_xlatb44) ? u_xlat43 : u_xlat30;
					    u_xlat30 = u_xlat4 + _Glossiness;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat3.xzw = u_xlat7.xyz * vec3(u_xlat42) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xxx;
					    u_xlat42 = (-u_xlat2.y) + 1.0;
					    u_xlat16.x = u_xlat42 * u_xlat42;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat42 = u_xlat42 * u_xlat16.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat18.xyz * vec3(u_xlat43);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _TranThreashold                c21      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_3_0
					    def c22, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c23, 1, 0, 0.416666657, 6
					    def c24, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c25, -1, 1, 3.14159274, 1.00000001e-007
					    def c26, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c27, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord7 v4.x
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    texld r0, v0, s2
					    mul_pp r1, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, r0, c17, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c23.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texld_pp r6, v0, s3
					    mov r7.xy, c23
					    add_pp r0.w, r7.x, -c20.x
					    mad_pp r0.w, r6.y, c20.x, r0.w
					    add_pp r1.w, r7.x, -c19.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mov r2.w, c23.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r6.xyz, r6, v3
					    max_pp r7.xzw, r6.xyyz, c23.y
					    abs r2.w, c15.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.z
					    log_pp r6.z, r7.w
					    mul_pp r6.xyz, r6, c23.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c22.x, c22.y
					    max_pp r8.xyz, r6, c23.y
					    cmp_pp r6.xyz, -r2.w, r8, r7.xzww
					    if_lt -c8.w, r7.y
					      nrm_pp r8.xyz, r4.yzww
					      add r7.xzw, c6.xyyz, -v5.xyyz
					      rcp r9.x, r8.x
					      rcp r9.y, r8.y
					      rcp r9.z, r8.z
					      mul_pp r7.xzw, r7, r9.xyyz
					      add r10.xyz, c7, -v5
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r7.xzw, -r8.xyyz, r9.xyyz, r7
					      min_pp r6.w, r7.z, r7.x
					      min_pp r8.w, r7.w, r6.w
					      add r7.xzw, -c8.xyyz, v5.xyyz
					      mad_pp r8.xyz, r8, r8.w, r7.xzww
					    else
					      mov_pp r8.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c22.z, c22.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r8.w, r6.w, c23.w
					    texldl_pp r9, r8, s0
					    pow_pp r6.w, r9.w, c9.y
					    mul_pp r6.w, r6.w, c9.x
					    mul_pp r7.xzw, r9.xyyz, r6.w
					    mov r9.w, c7.w
					    if_lt r9.w, c24.x
					      if_lt -c12.w, r7.y
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c10, -v5
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c11, -v5
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r7.y, r11.y, r11.x
					        min_pp r9.w, r11.z, r7.y
					        add r11.xyz, -c12, v5
					        mad_pp r8.xyz, r10, r9.w, r11
					      else
					        mov_pp r8.xyz, r4.yzww
					      endif
					      texldl_pp r8, r8, s1
					      pow_pp r4.y, r8.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r8.xxyz, r4.y
					      mad r8.xyz, r6.w, r9, -r4.yzww
					      mad_pp r7.xzw, c7.w, r8.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r7.xxzw
					    mad_pp r7.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r7, r7
					    add r6.w, -r3.x, c24.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c24.z, r3.x
					    mul_pp r7.xyz, r3.x, r7
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c24.w
					    mad_pp r8.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r8
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c23.y
					    dp3_pp r3.x, r2, r7
					    max_pp r7.w, r3.x, c23.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c23.y
					    dp3_pp r2.x, c0, r7
					    max_pp r3.y, r2.x, c23.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c23.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c24.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r7.xy, r2.x, r2.x, c25
					    mad_pp r3.z, r3.z, r7.x, c23.x
					    mul r3.w, r3.z, c25.z
					    mad r3.z, r3.w, r3.z, c25.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c23.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c23.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c26.x
					    mad_pp r3.z, r3.w, r3.z, c23.x
					    mad_pp r3.w, r3.w, r3.x, c23.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c26.y
					    mad r2.y, r2.y, -c26.y, c26.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c26.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    mul_pp r2.z, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c27.x, c27.y
					    rcp_pp r2.x, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c19.x
					    mul_pp r7.xyz, r2.z, c16
					    mad_pp r6.xyz, r6, r0.w, r7
					    mul_pp r7.xyz, r2.y, c16
					    cmp_pp r2.yzw, r2.y, r7.xxyz, c23.y
					    add_pp r0.w, -r3.y, c23.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c23.x, r0.xxyz
					    mul_pp r2.yzw, r2, r3
					    mad_pp r1.xyz, r1, r6, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    mul r0.w, c5.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r5.xyz, r0.w, r0, c4
					    add r0.x, c21.x, -v5.y
					    cmp r0.x, r0.x, c23.x, c23.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 192 instruction slots used (6 texture, 186 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat39) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat39 + u_xlat4;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat6.y * _OcclusionStrength + u_xlat39;
					    u_xlat40 = (-_Glossiness) + 1.0;
					    u_xlat17.x = dot(u_xlat16.xyz, u_xlat2.xyz);
					    u_xlat17.x = u_xlat17.x + u_xlat17.x;
					    u_xlat17.xyz = u_xlat2.xyz * (-u_xlat17.xxx) + u_xlat16.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb45){
					        u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat45 = inversesqrt(u_xlat45);
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat45);
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat45 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat45 = min(u_xlat8.z, u_xlat45);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat45 = (-u_xlat40) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat40 * u_xlat45;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat45);
					    u_xlat46 = log2(u_xlat7.w);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat47);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat47 = min(u_xlat10.z, u_xlat47);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat45);
					        u_xlat17.x = log2(u_xlat9.w);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.y;
					        u_xlat17.x = exp2(u_xlat17.x);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * u_xlat17.xxx;
					        u_xlat7.xyz = vec3(u_xlat46) * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat17.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlatb45 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat16.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb45)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat40 * u_xlat40;
					    u_xlat16.x = (-u_xlat40) * u_xlat40 + 1.0;
					    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat2.x * u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat29 + u_xlat16.x;
					    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
					    u_xlat16.x = 2.0 / u_xlat16.x;
					    u_xlat29 = u_xlat28 * u_xlat28;
					    u_xlat42 = u_xlat45 * u_xlat45;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat7.x + 1.0;
					    u_xlat45 = u_xlat42 * 3.14159274;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.00000001e-07;
					    u_xlat29 = u_xlat29 / u_xlat42;
					    u_xlat42 = (-u_xlat3.x) + 1.0;
					    u_xlat45 = u_xlat42 * u_xlat42;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat45 = u_xlat2.x * u_xlat2.x;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat2.x = u_xlat2.x * u_xlat45;
					    u_xlat45 = u_xlat2.y * u_xlat2.y;
					    u_xlat45 = dot(vec2(u_xlat45), vec2(u_xlat40));
					    u_xlat45 = u_xlat45 + -0.5;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat2.x + 1.0;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat16.x = u_xlat29 * u_xlat16.x;
					    u_xlat16.x = u_xlat16.x * 0.785398185;
					    u_xlat29 = max(u_xlat16.x, 9.99999975e-05);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat16.x = (u_xlatb41) ? u_xlat29 : u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat42;
					    u_xlat40 = u_xlat40 * u_xlat28;
					    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;
					    u_xlat28 = float(1.0) / u_xlat7.y;
					    u_xlat40 = (u_xlatb41) ? u_xlat40 : u_xlat28;
					    u_xlat28 = u_xlat4 + _Glossiness;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = u_xlat6.xyz * vec3(u_xlat39) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat16.xxx * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat39 * u_xlat39;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat39 = u_xlat39 * u_xlat15.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat17.xyz * vec3(u_xlat40);
					    u_xlat15.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat15.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat39 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _TranThreashold                c21      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c22, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c23, 1, 0, 0.416666657, 6
					    def c24, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c25, -1, 1, 3.14159274, 1.00000001e-007
					    def c26, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c27, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord7 v5.x
					    dcl_texcoord8_pp v6.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, r0, c17, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c23.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texldp_pp r6, v4, s4
					    texld_pp r7, v0, s3
					    mov r8.xy, c23
					    add_pp r0.w, r8.x, -c20.x
					    mad_pp r0.w, r7.y, c20.x, r0.w
					    add_pp r1.w, r8.x, -c19.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mul_pp r6.xyz, r6.x, c16
					    mov r2.w, c23.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r7.xyz, r7, v3
					    max_pp r8.xzw, r7.xyyz, c23.y
					    abs r2.w, c15.w
					    log_pp r7.x, r8.x
					    log_pp r7.y, r8.z
					    log_pp r7.z, r8.w
					    mul_pp r7.xyz, r7, c23.z
					    exp_pp r9.x, r7.x
					    exp_pp r9.y, r7.y
					    exp_pp r9.z, r7.z
					    mad_pp r7.xyz, r9, c22.x, c22.y
					    max_pp r9.xyz, r7, c23.y
					    cmp_pp r7.xyz, -r2.w, r9, r8.xzww
					    if_lt -c8.w, r8.y
					      nrm_pp r9.xyz, r4.yzww
					      add r8.xzw, c6.xyyz, -v6.xyyz
					      rcp r10.x, r9.x
					      rcp r10.y, r9.y
					      rcp r10.z, r9.z
					      mul_pp r8.xzw, r8, r10.xyyz
					      add r11.xyz, c7, -v6
					      mul_pp r10.xyz, r10, r11
					      cmp_pp r8.xzw, -r9.xyyz, r10.xyyz, r8
					      min_pp r6.w, r8.z, r8.x
					      min_pp r7.w, r8.w, r6.w
					      add r8.xzw, -c8.xyyz, v6.xyyz
					      mad_pp r9.xyz, r9, r7.w, r8.xzww
					    else
					      mov_pp r9.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c22.z, c22.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r9.w, r6.w, c23.w
					    texldl_pp r10, r9, s0
					    pow_pp r6.w, r10.w, c9.y
					    mul_pp r6.w, r6.w, c9.x
					    mul_pp r8.xzw, r10.xyyz, r6.w
					    mov r7.w, c7.w
					    if_lt r7.w, c24.x
					      if_lt -c12.w, r8.y
					        nrm_pp r11.xyz, r4.yzww
					        add r12.xyz, c10, -v6
					        rcp r13.x, r11.x
					        rcp r13.y, r11.y
					        rcp r13.z, r11.z
					        mul_pp r12.xyz, r12, r13
					        add r14.xyz, c11, -v6
					        mul_pp r13.xyz, r13, r14
					        cmp_pp r12.xyz, -r11, r13, r12
					        min_pp r7.w, r12.y, r12.x
					        min_pp r8.y, r12.z, r7.w
					        add r12.xyz, -c12, v6
					        mad_pp r9.xyz, r11, r8.y, r12
					      else
					        mov_pp r9.xyz, r4.yzww
					      endif
					      texldl_pp r9, r9, s1
					      pow_pp r4.y, r9.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r9.xxyz, r4.y
					      mad r9.xyz, r6.w, r10, -r4.yzww
					      mad_pp r8.xzw, c7.w, r9.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r8.xxzw
					    mad_pp r8.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r8, r8
					    add r6.w, -r3.x, c24.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c24.z, r3.x
					    mul_pp r8.xyz, r3.x, r8
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c24.w
					    mad_pp r9.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r9
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c23.y
					    dp3_pp r3.x, r2, r8
					    max_pp r7.w, r3.x, c23.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c23.y
					    dp3_pp r2.x, c0, r8
					    max_pp r3.y, r2.x, c23.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c23.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c24.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r8.xy, r2.x, r2.x, c25
					    mad_pp r3.z, r3.z, r8.x, c23.x
					    mul r3.w, r3.z, c25.z
					    mad r3.z, r3.w, r3.z, c25.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c23.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c23.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c26.x
					    mad_pp r3.z, r3.w, r3.z, c23.x
					    mad_pp r3.w, r3.w, r3.x, c23.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c26.y
					    mad r2.y, r2.y, -c26.y, c26.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c26.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    max_pp r3.w, r2.y, c23.y
					    mul_pp r2.y, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c27.x, c27.y
					    rcp_pp r2.x, r8.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c19.x
					    mul_pp r2.yzw, r2.y, r6.xxyz
					    mad_pp r2.yzw, r7.xxyz, r0.w, r2
					    mul_pp r6.xyz, r6, r3.w
					    add_pp r0.w, -r3.y, c23.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c23.x, r0.xxyz
					    mul_pp r3.yzw, r3, r6.xxyz
					    mad_pp r1.xyz, r1, r2.yzww, r3.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r5.xyz, r0.w, r0, c4
					    add r0.x, c21.x, -v6.y
					    cmp r0.x, r0.x, c23.x, c23.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 194 instruction slots used (7 texture, 187 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_11;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec3 u_xlat18;
					float u_xlat30;
					float u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat42) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat42 + u_xlat4;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat18.xy);
					    u_xlat7 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat7.y * _OcclusionStrength + u_xlat42;
					    u_xlat43 = (-_Glossiness) + 1.0;
					    u_xlat18.x = dot(u_xlat17.xyz, u_xlat2.xyz);
					    u_xlat18.x = u_xlat18.x + u_xlat18.x;
					    u_xlat18.xyz = u_xlat2.xyz * (-u_xlat18.xxx) + u_xlat17.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat7.x = dot(unity_SHAr, u_xlat2);
					    u_xlat7.y = dot(unity_SHAg, u_xlat2);
					    u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    u_xlat7.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat8.xyz = log2(u_xlat7.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat18.xyz, u_xlat18.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat8.xyz = u_xlat18.xyz * vec3(u_xlat48);
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat48 = min(u_xlat9.z, u_xlat48);
					        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat48) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat18.xyz;
					    }
					    u_xlat48 = (-u_xlat43) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat43 * u_xlat48;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat48);
					    u_xlat49 = log2(u_xlat8.w);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat18.xyz, u_xlat18.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat50);
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat50 = min(u_xlat11.z, u_xlat50);
					            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat18.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					        }
					        u_xlat10 = textureLod(unity_SpecCube1, u_xlat18.xyz, u_xlat48);
					        u_xlat18.x = log2(u_xlat10.w);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.y;
					        u_xlat18.x = exp2(u_xlat18.x);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.x;
					        u_xlat18.xyz = u_xlat10.xyz * u_xlat18.xxx;
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat8.xyz + (-u_xlat18.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat18.xyz;
					    }
					    u_xlat18.xyz = vec3(u_xlat42) * u_xlat9.xyz;
					    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlatb48 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat9.xyz = (-u_xlat17.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat48 = dot(u_xlat2.xyz, u_xlat8.xyz);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat30 = u_xlat43 * u_xlat43;
					    u_xlat17.x = (-u_xlat43) * u_xlat43 + 1.0;
					    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat2.x * u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat31 + u_xlat17.x;
					    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
					    u_xlat17.x = 2.0 / u_xlat17.x;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat45 = u_xlat48 * u_xlat48;
					    u_xlat8.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat8.x + 1.0;
					    u_xlat48 = u_xlat45 * 3.14159274;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.00000001e-07;
					    u_xlat31 = u_xlat31 / u_xlat45;
					    u_xlat45 = (-u_xlat3.x) + 1.0;
					    u_xlat48 = u_xlat45 * u_xlat45;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat48 = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat48;
					    u_xlat48 = u_xlat2.y * u_xlat2.y;
					    u_xlat48 = dot(vec2(u_xlat48), vec2(u_xlat43));
					    u_xlat48 = u_xlat48 + -0.5;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.0;
					    u_xlat48 = u_xlat48 * u_xlat2.x + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat17.x = u_xlat31 * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * 0.785398185;
					    u_xlat31 = max(u_xlat17.x, 9.99999975e-05);
					    u_xlat31 = sqrt(u_xlat31);
					    u_xlat17.x = (u_xlatb44) ? u_xlat31 : u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat45;
					    u_xlat43 = u_xlat43 * u_xlat30;
					    u_xlat43 = (-u_xlat43) * 0.280000001 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat8.y;
					    u_xlat43 = (u_xlatb44) ? u_xlat43 : u_xlat30;
					    u_xlat30 = u_xlat4 + _Glossiness;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat3.xzw = u_xlat7.xyz * vec3(u_xlat42) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xxx;
					    u_xlat42 = (-u_xlat2.y) + 1.0;
					    u_xlat16.x = u_xlat42 * u_xlat42;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat42 = u_xlat42 * u_xlat16.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat18.xyz * vec3(u_xlat43);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat42 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _EmissionColor                 c19      1
					//   _TranThreashold                c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 1, 0, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord8_pp v4.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, r0, c15, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c22.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texld_pp r6, v0, s3
					    mov r7.xy, c22
					    add_pp r0.w, r7.x, -c18.x
					    mad_pp r0.w, r6.y, c18.x, r0.w
					    add_pp r1.w, r7.x, -c17.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mov r2.w, c22.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r6.xyz, r6, v3
					    max_pp r7.xzw, r6.xyyz, c22.y
					    abs r2.w, c13.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.z
					    log_pp r6.z, r7.w
					    mul_pp r6.xyz, r6, c22.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c21.x, c21.y
					    max_pp r8.xyz, r6, c22.y
					    cmp_pp r6.xyz, -r2.w, r8, r7.xzww
					    if_lt -c6.w, r7.y
					      nrm_pp r8.xyz, r4.yzww
					      add r7.xzw, c4.xyyz, -v4.xyyz
					      rcp r9.x, r8.x
					      rcp r9.y, r8.y
					      rcp r9.z, r8.z
					      mul_pp r7.xzw, r7, r9.xyyz
					      add r10.xyz, c5, -v4
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r7.xzw, -r8.xyyz, r9.xyyz, r7
					      min_pp r6.w, r7.z, r7.x
					      min_pp r8.w, r7.w, r6.w
					      add r7.xzw, -c6.xyyz, v4.xyyz
					      mad_pp r8.xyz, r8, r8.w, r7.xzww
					    else
					      mov_pp r8.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c21.z, c21.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r8.w, r6.w, c22.w
					    texldl_pp r9, r8, s0
					    pow_pp r6.w, r9.w, c7.y
					    mul_pp r6.w, r6.w, c7.x
					    mul_pp r7.xzw, r9.xyyz, r6.w
					    mov r9.w, c5.w
					    if_lt r9.w, c23.x
					      if_lt -c10.w, r7.y
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c8, -v4
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v4
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r7.y, r11.y, r11.x
					        min_pp r9.w, r11.z, r7.y
					        add r11.xyz, -c10, v4
					        mad_pp r8.xyz, r10, r9.w, r11
					      else
					        mov_pp r8.xyz, r4.yzww
					      endif
					      texldl_pp r8, r8, s1
					      pow_pp r4.y, r8.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r8.xxyz, r4.y
					      mad r8.xyz, r6.w, r9, -r4.yzww
					      mad_pp r7.xzw, c5.w, r8.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r7.xxzw
					    mad_pp r7.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r7, r7
					    add r6.w, -r3.x, c23.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c23.z, r3.x
					    mul_pp r7.xyz, r3.x, r7
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c23.w
					    mad_pp r8.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r8
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c22.y
					    dp3_pp r3.x, r2, r7
					    max_pp r7.w, r3.x, c22.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c22.y
					    dp3_pp r2.x, c0, r7
					    max_pp r3.y, r2.x, c22.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c22.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c23.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r7.xy, r2.x, r2.x, c24
					    mad_pp r3.z, r3.z, r7.x, c22.x
					    mul r3.w, r3.z, c24.z
					    mad r3.z, r3.w, r3.z, c24.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c22.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c22.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c25.x
					    mad_pp r3.z, r3.w, r3.z, c22.x
					    mad_pp r3.w, r3.w, r3.x, c22.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c25.y
					    mad r2.y, r2.y, -c25.y, c25.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c25.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    mul_pp r2.z, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c26.x, c26.y
					    rcp_pp r2.x, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c17.x
					    mul_pp r7.xyz, r2.z, c14
					    mad_pp r6.xyz, r6, r0.w, r7
					    mul_pp r7.xyz, r2.y, c14
					    cmp_pp r2.yzw, r2.y, r7.xxyz, c22.y
					    add_pp r0.w, -r3.y, c22.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c22.x, r0.xxyz
					    mul_pp r2.yzw, r2, r3
					    mad_pp r1.xyz, r1, r6, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    texld r1, v0, s4
					    mad_pp r5.xyz, r1, c19, r0
					    add r0.x, c20.x, -v4.y
					    cmp r0.x, r0.x, c22.x, c22.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 190 instruction slots used (7 texture, 183 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat39) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat39 + u_xlat4;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat6.y * _OcclusionStrength + u_xlat39;
					    u_xlat40 = (-_Glossiness) + 1.0;
					    u_xlat17.x = dot(u_xlat16.xyz, u_xlat2.xyz);
					    u_xlat17.x = u_xlat17.x + u_xlat17.x;
					    u_xlat17.xyz = u_xlat2.xyz * (-u_xlat17.xxx) + u_xlat16.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb45){
					        u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat45 = inversesqrt(u_xlat45);
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat45);
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat45 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat45 = min(u_xlat8.z, u_xlat45);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat45 = (-u_xlat40) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat40 * u_xlat45;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat45);
					    u_xlat46 = log2(u_xlat7.w);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat47);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat47 = min(u_xlat10.z, u_xlat47);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat45);
					        u_xlat17.x = log2(u_xlat9.w);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.y;
					        u_xlat17.x = exp2(u_xlat17.x);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * u_xlat17.xxx;
					        u_xlat7.xyz = vec3(u_xlat46) * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat17.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlatb45 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat16.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb45)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat40 * u_xlat40;
					    u_xlat16.x = (-u_xlat40) * u_xlat40 + 1.0;
					    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat2.x * u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat29 + u_xlat16.x;
					    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
					    u_xlat16.x = 2.0 / u_xlat16.x;
					    u_xlat29 = u_xlat28 * u_xlat28;
					    u_xlat42 = u_xlat45 * u_xlat45;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat7.x + 1.0;
					    u_xlat45 = u_xlat42 * 3.14159274;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.00000001e-07;
					    u_xlat29 = u_xlat29 / u_xlat42;
					    u_xlat42 = (-u_xlat3.x) + 1.0;
					    u_xlat45 = u_xlat42 * u_xlat42;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat45 = u_xlat2.x * u_xlat2.x;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat2.x = u_xlat2.x * u_xlat45;
					    u_xlat45 = u_xlat2.y * u_xlat2.y;
					    u_xlat45 = dot(vec2(u_xlat45), vec2(u_xlat40));
					    u_xlat45 = u_xlat45 + -0.5;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat2.x + 1.0;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat16.x = u_xlat29 * u_xlat16.x;
					    u_xlat16.x = u_xlat16.x * 0.785398185;
					    u_xlat29 = max(u_xlat16.x, 9.99999975e-05);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat16.x = (u_xlatb41) ? u_xlat29 : u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat42;
					    u_xlat40 = u_xlat40 * u_xlat28;
					    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;
					    u_xlat28 = float(1.0) / u_xlat7.y;
					    u_xlat40 = (u_xlatb41) ? u_xlat40 : u_xlat28;
					    u_xlat28 = u_xlat4 + _Glossiness;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = u_xlat6.xyz * vec3(u_xlat39) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat16.xxx * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat39 * u_xlat39;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat39 = u_xlat39 * u_xlat15.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat17.xyz * vec3(u_xlat40);
					    u_xlat15.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat15.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Color                         c15      1
					//   _Metallic                      c16      1
					//   _Glossiness                    c17      1
					//   _OcclusionStrength             c18      1
					//   _EmissionColor                 c19      1
					//   _TranThreashold                c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 1, 0, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld r0, v0, s2
					    mul_pp r1, r0, c15
					    mov r2, c12
					    mad_pp r0.xyz, r0, c15, -r2
					    mad_pp r0.xyz, c16.x, r0, r2
					    mad_pp r0.w, c16.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c22.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texldp_pp r6, v4, s5
					    texld_pp r7, v0, s3
					    mov r8.xy, c22
					    add_pp r0.w, r8.x, -c18.x
					    mad_pp r0.w, r7.y, c18.x, r0.w
					    add_pp r1.w, r8.x, -c17.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mul_pp r6.xyz, r6.x, c14
					    mov r2.w, c22.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r7.xyz, r7, v3
					    max_pp r8.xzw, r7.xyyz, c22.y
					    abs r2.w, c13.w
					    log_pp r7.x, r8.x
					    log_pp r7.y, r8.z
					    log_pp r7.z, r8.w
					    mul_pp r7.xyz, r7, c22.z
					    exp_pp r9.x, r7.x
					    exp_pp r9.y, r7.y
					    exp_pp r9.z, r7.z
					    mad_pp r7.xyz, r9, c21.x, c21.y
					    max_pp r9.xyz, r7, c22.y
					    cmp_pp r7.xyz, -r2.w, r9, r8.xzww
					    if_lt -c6.w, r8.y
					      nrm_pp r9.xyz, r4.yzww
					      add r8.xzw, c4.xyyz, -v5.xyyz
					      rcp r10.x, r9.x
					      rcp r10.y, r9.y
					      rcp r10.z, r9.z
					      mul_pp r8.xzw, r8, r10.xyyz
					      add r11.xyz, c5, -v5
					      mul_pp r10.xyz, r10, r11
					      cmp_pp r8.xzw, -r9.xyyz, r10.xyyz, r8
					      min_pp r6.w, r8.z, r8.x
					      min_pp r7.w, r8.w, r6.w
					      add r8.xzw, -c6.xyyz, v5.xyyz
					      mad_pp r9.xyz, r9, r7.w, r8.xzww
					    else
					      mov_pp r9.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c21.z, c21.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r9.w, r6.w, c22.w
					    texldl_pp r10, r9, s0
					    pow_pp r6.w, r10.w, c7.y
					    mul_pp r6.w, r6.w, c7.x
					    mul_pp r8.xzw, r10.xyyz, r6.w
					    mov r7.w, c5.w
					    if_lt r7.w, c23.x
					      if_lt -c10.w, r8.y
					        nrm_pp r11.xyz, r4.yzww
					        add r12.xyz, c8, -v5
					        rcp r13.x, r11.x
					        rcp r13.y, r11.y
					        rcp r13.z, r11.z
					        mul_pp r12.xyz, r12, r13
					        add r14.xyz, c9, -v5
					        mul_pp r13.xyz, r13, r14
					        cmp_pp r12.xyz, -r11, r13, r12
					        min_pp r7.w, r12.y, r12.x
					        min_pp r8.y, r12.z, r7.w
					        add r12.xyz, -c10, v5
					        mad_pp r9.xyz, r11, r8.y, r12
					      else
					        mov_pp r9.xyz, r4.yzww
					      endif
					      texldl_pp r9, r9, s1
					      pow_pp r4.y, r9.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r9.xxyz, r4.y
					      mad r9.xyz, r6.w, r10, -r4.yzww
					      mad_pp r8.xzw, c5.w, r9.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r8.xxzw
					    mad_pp r8.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r8, r8
					    add r6.w, -r3.x, c23.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c23.z, r3.x
					    mul_pp r8.xyz, r3.x, r8
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c23.w
					    mad_pp r9.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r9
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c22.y
					    dp3_pp r3.x, r2, r8
					    max_pp r7.w, r3.x, c22.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c22.y
					    dp3_pp r2.x, c0, r8
					    max_pp r3.y, r2.x, c22.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c22.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c23.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r8.xy, r2.x, r2.x, c24
					    mad_pp r3.z, r3.z, r8.x, c22.x
					    mul r3.w, r3.z, c24.z
					    mad r3.z, r3.w, r3.z, c24.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c22.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c22.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    add_pp r3.w, r3.y, r3.y
					    mul_pp r3.w, r3.y, r3.w
					    mad_pp r3.w, r3.w, r1.w, c25.x
					    mad_pp r3.z, r3.w, r3.z, c22.x
					    mad_pp r3.w, r3.w, r3.x, c22.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c25.y
					    mad r2.y, r2.y, -c25.y, c25.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c25.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    max_pp r3.w, r2.y, c22.y
					    mul_pp r2.y, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c26.x, c26.y
					    rcp_pp r2.x, r8.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c17.x
					    mul_pp r2.yzw, r2.y, r6.xxyz
					    mad_pp r2.yzw, r7.xxyz, r0.w, r2
					    mul_pp r6.xyz, r6, r3.w
					    add_pp r0.w, -r3.y, c22.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c22.x, r0.xxyz
					    mul_pp r3.yzw, r3, r6.xxyz
					    mad_pp r1.xyz, r1, r2.yzww, r3.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    texld r1, v0, s4
					    mad_pp r5.xyz, r1, c19, r0
					    add r0.x, c20.x, -v5.y
					    cmp r0.x, r0.x, c22.x, c22.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 192 instruction slots used (8 texture, 184 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec3 u_xlat18;
					float u_xlat30;
					float u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat42) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat42 + u_xlat4;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat18.xy);
					    u_xlat7 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat7.y * _OcclusionStrength + u_xlat42;
					    u_xlat43 = (-_Glossiness) + 1.0;
					    u_xlat18.x = dot(u_xlat17.xyz, u_xlat2.xyz);
					    u_xlat18.x = u_xlat18.x + u_xlat18.x;
					    u_xlat18.xyz = u_xlat2.xyz * (-u_xlat18.xxx) + u_xlat17.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat7.x = dot(unity_SHAr, u_xlat2);
					    u_xlat7.y = dot(unity_SHAg, u_xlat2);
					    u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    u_xlat7.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat8.xyz = log2(u_xlat7.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat18.xyz, u_xlat18.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat8.xyz = u_xlat18.xyz * vec3(u_xlat48);
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat48 = min(u_xlat9.z, u_xlat48);
					        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat48) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat18.xyz;
					    }
					    u_xlat48 = (-u_xlat43) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat43 * u_xlat48;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat48);
					    u_xlat49 = log2(u_xlat8.w);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat18.xyz, u_xlat18.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat50);
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat50 = min(u_xlat11.z, u_xlat50);
					            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat18.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					        }
					        u_xlat10 = textureLod(unity_SpecCube1, u_xlat18.xyz, u_xlat48);
					        u_xlat18.x = log2(u_xlat10.w);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.y;
					        u_xlat18.x = exp2(u_xlat18.x);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.x;
					        u_xlat18.xyz = u_xlat10.xyz * u_xlat18.xxx;
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat8.xyz + (-u_xlat18.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat18.xyz;
					    }
					    u_xlat18.xyz = vec3(u_xlat42) * u_xlat9.xyz;
					    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlatb48 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat9.xyz = (-u_xlat17.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat48 = dot(u_xlat2.xyz, u_xlat8.xyz);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat30 = u_xlat43 * u_xlat43;
					    u_xlat17.x = (-u_xlat43) * u_xlat43 + 1.0;
					    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat2.x * u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat31 + u_xlat17.x;
					    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
					    u_xlat17.x = 2.0 / u_xlat17.x;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat45 = u_xlat48 * u_xlat48;
					    u_xlat8.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat8.x + 1.0;
					    u_xlat48 = u_xlat45 * 3.14159274;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.00000001e-07;
					    u_xlat31 = u_xlat31 / u_xlat45;
					    u_xlat45 = (-u_xlat3.x) + 1.0;
					    u_xlat48 = u_xlat45 * u_xlat45;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat48 = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat48;
					    u_xlat48 = u_xlat2.y * u_xlat2.y;
					    u_xlat48 = dot(vec2(u_xlat48), vec2(u_xlat43));
					    u_xlat48 = u_xlat48 + -0.5;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.0;
					    u_xlat48 = u_xlat48 * u_xlat2.x + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat17.x = u_xlat31 * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * 0.785398185;
					    u_xlat31 = max(u_xlat17.x, 9.99999975e-05);
					    u_xlat31 = sqrt(u_xlat31);
					    u_xlat17.x = (u_xlatb44) ? u_xlat31 : u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat45;
					    u_xlat43 = u_xlat43 * u_xlat30;
					    u_xlat43 = (-u_xlat43) * 0.280000001 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat8.y;
					    u_xlat43 = (u_xlatb44) ? u_xlat43 : u_xlat30;
					    u_xlat30 = u_xlat4 + _Glossiness;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat3.xzw = u_xlat7.xyz * vec3(u_xlat42) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xxx;
					    u_xlat42 = (-u_xlat2.y) + 1.0;
					    u_xlat16.x = u_xlat42 * u_xlat42;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat42 = u_xlat42 * u_xlat16.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat18.xyz * vec3(u_xlat43);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _EmissionColor                 c21      1
					//   _TranThreashold                c22      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_3_0
					    def c23, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c24, 1, 0, 0.416666657, 6
					    def c25, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c26, -1, 1, 3.14159274, 1.00000001e-007
					    def c27, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c28, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord7 v4.x
					    dcl_texcoord8_pp v5.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld r0, v0, s2
					    mul_pp r1, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, r0, c17, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c24.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texld_pp r6, v0, s3
					    mov r7.xy, c24
					    add_pp r0.w, r7.x, -c20.x
					    mad_pp r0.w, r6.y, c20.x, r0.w
					    add_pp r1.w, r7.x, -c19.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mov r2.w, c24.x
					    dp4_pp r6.x, c1, r2
					    dp4_pp r6.y, c2, r2
					    dp4_pp r6.z, c3, r2
					    add_pp r6.xyz, r6, v3
					    max_pp r7.xzw, r6.xyyz, c24.y
					    abs r2.w, c15.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.z
					    log_pp r6.z, r7.w
					    mul_pp r6.xyz, r6, c24.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c23.x, c23.y
					    max_pp r8.xyz, r6, c24.y
					    cmp_pp r6.xyz, -r2.w, r8, r7.xzww
					    if_lt -c8.w, r7.y
					      nrm_pp r8.xyz, r4.yzww
					      add r7.xzw, c6.xyyz, -v5.xyyz
					      rcp r9.x, r8.x
					      rcp r9.y, r8.y
					      rcp r9.z, r8.z
					      mul_pp r7.xzw, r7, r9.xyyz
					      add r10.xyz, c7, -v5
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r7.xzw, -r8.xyyz, r9.xyyz, r7
					      min_pp r6.w, r7.z, r7.x
					      min_pp r8.w, r7.w, r6.w
					      add r7.xzw, -c8.xyyz, v5.xyyz
					      mad_pp r8.xyz, r8, r8.w, r7.xzww
					    else
					      mov_pp r8.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c23.z, c23.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r8.w, r6.w, c24.w
					    texldl_pp r9, r8, s0
					    pow_pp r6.w, r9.w, c9.y
					    mul_pp r6.w, r6.w, c9.x
					    mul_pp r7.xzw, r9.xyyz, r6.w
					    mov r9.w, c7.w
					    if_lt r9.w, c25.x
					      if_lt -c12.w, r7.y
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c10, -v5
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c11, -v5
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r7.y, r11.y, r11.x
					        min_pp r9.w, r11.z, r7.y
					        add r11.xyz, -c12, v5
					        mad_pp r8.xyz, r10, r9.w, r11
					      else
					        mov_pp r8.xyz, r4.yzww
					      endif
					      texldl_pp r8, r8, s1
					      pow_pp r4.y, r8.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r8.xxyz, r4.y
					      mad r8.xyz, r6.w, r9, -r4.yzww
					      mad_pp r7.xzw, c7.w, r8.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r7.xxzw
					    mad_pp r7.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r7, r7
					    add r6.w, -r3.x, c25.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c25.z, r3.x
					    mul_pp r7.xyz, r3.x, r7
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c25.w
					    mad_pp r8.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r8
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c24.y
					    dp3_pp r3.x, r2, r7
					    max_pp r7.w, r3.x, c24.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c24.y
					    dp3_pp r2.x, c0, r7
					    max_pp r3.y, r2.x, c24.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c24.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c25.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r7.xy, r2.x, r2.x, c26
					    mad_pp r3.z, r3.z, r7.x, c24.x
					    mul r3.w, r3.z, c26.z
					    mad r3.z, r3.w, r3.z, c26.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c24.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c24.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c27.x
					    mad_pp r3.z, r3.w, r3.z, c24.x
					    mad_pp r3.w, r3.w, r3.x, c24.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c27.y
					    mad r2.y, r2.y, -c27.y, c27.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c27.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    mul_pp r2.z, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c28.x, c28.y
					    rcp_pp r2.x, r7.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c19.x
					    mul_pp r7.xyz, r2.z, c16
					    mad_pp r6.xyz, r6, r0.w, r7
					    mul_pp r7.xyz, r2.y, c16
					    cmp_pp r2.yzw, r2.y, r7.xxyz, c24.y
					    add_pp r0.w, -r3.y, c24.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c24.x, r0.xxyz
					    mul_pp r2.yzw, r2, r3
					    mad_pp r1.xyz, r1, r6, r2.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c21, r0
					    mul r0.w, c5.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r5.xyz, r0.w, r0, c4
					    add r0.x, c22.x, -v5.y
					    cmp r0.x, r0.x, c24.x, c24.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 194 instruction slots used (7 texture, 187 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat28;
					float u_xlat29;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb41;
					float u_xlat42;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat39) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat39 + u_xlat4;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat39 = (-_OcclusionStrength) + 1.0;
					    u_xlat39 = u_xlat6.y * _OcclusionStrength + u_xlat39;
					    u_xlat40 = (-_Glossiness) + 1.0;
					    u_xlat17.x = dot(u_xlat16.xyz, u_xlat2.xyz);
					    u_xlat17.x = u_xlat17.x + u_xlat17.x;
					    u_xlat17.xyz = u_xlat2.xyz * (-u_xlat17.xxx) + u_xlat16.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb45){
					        u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat45 = inversesqrt(u_xlat45);
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat45);
					        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat45 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat45 = min(u_xlat8.z, u_xlat45);
					        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat45 = (-u_xlat40) * 0.699999988 + 1.70000005;
					    u_xlat45 = u_xlat40 * u_xlat45;
					    u_xlat45 = u_xlat45 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat45);
					    u_xlat46 = log2(u_xlat7.w);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.y;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat47);
					            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat47 = min(u_xlat10.z, u_xlat47);
					            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat45);
					        u_xlat17.x = log2(u_xlat9.w);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.y;
					        u_xlat17.x = exp2(u_xlat17.x);
					        u_xlat17.x = u_xlat17.x * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * u_xlat17.xxx;
					        u_xlat7.xyz = vec3(u_xlat46) * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat17.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlatb45 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat8.xyz = (-u_xlat16.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb45)) ? u_xlat8.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat28 = u_xlat40 * u_xlat40;
					    u_xlat16.x = (-u_xlat40) * u_xlat40 + 1.0;
					    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x + u_xlat28;
					    u_xlat16.x = u_xlat2.x * u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat29 + u_xlat16.x;
					    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
					    u_xlat16.x = 2.0 / u_xlat16.x;
					    u_xlat29 = u_xlat28 * u_xlat28;
					    u_xlat42 = u_xlat45 * u_xlat45;
					    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat7.x + 1.0;
					    u_xlat45 = u_xlat42 * 3.14159274;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.00000001e-07;
					    u_xlat29 = u_xlat29 / u_xlat42;
					    u_xlat42 = (-u_xlat3.x) + 1.0;
					    u_xlat45 = u_xlat42 * u_xlat42;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat45 = u_xlat2.x * u_xlat2.x;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat2.x = u_xlat2.x * u_xlat45;
					    u_xlat45 = u_xlat2.y * u_xlat2.y;
					    u_xlat45 = dot(vec2(u_xlat45), vec2(u_xlat40));
					    u_xlat45 = u_xlat45 + -0.5;
					    u_xlat42 = u_xlat45 * u_xlat42 + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat2.x + 1.0;
					    u_xlat42 = u_xlat42 * u_xlat45;
					    u_xlat16.x = u_xlat29 * u_xlat16.x;
					    u_xlat16.x = u_xlat16.x * 0.785398185;
					    u_xlat29 = max(u_xlat16.x, 9.99999975e-05);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat16.x = (u_xlatb41) ? u_xlat29 : u_xlat16.x;
					    u_xlat16.x = u_xlat3.x * u_xlat16.x;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat42;
					    u_xlat40 = u_xlat40 * u_xlat28;
					    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;
					    u_xlat28 = float(1.0) / u_xlat7.y;
					    u_xlat40 = (u_xlatb41) ? u_xlat40 : u_xlat28;
					    u_xlat28 = u_xlat4 + _Glossiness;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = u_xlat6.xyz * vec3(u_xlat39) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat16.xxx * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat2.y) + 1.0;
					    u_xlat15.x = u_xlat39 * u_xlat39;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat39 = u_xlat39 * u_xlat15.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat17.xyz * vec3(u_xlat40);
					    u_xlat15.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat15.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   sampler2D _ShadowMapTexture;
					//   float _TranThreashold;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SHAr                     c1       1
					//   unity_SHAg                     c2       1
					//   unity_SHAb                     c3       1
					//   unity_FogColor                 c4       1
					//   unity_FogParams                c5       1
					//   unity_SpecCube0_BoxMax         c6       1
					//   unity_SpecCube0_BoxMin         c7       1
					//   unity_SpecCube0_ProbePosition  c8       1
					//   unity_SpecCube0_HDR            c9       1
					//   unity_SpecCube1_BoxMax         c10      1
					//   unity_SpecCube1_BoxMin         c11      1
					//   unity_SpecCube1_ProbePosition  c12      1
					//   unity_SpecCube1_HDR            c13      1
					//   unity_ColorSpaceDielectricSpec c14      1
					//   unity_ColorSpaceLuminance      c15      1
					//   _LightColor0                   c16      1
					//   _Color                         c17      1
					//   _Metallic                      c18      1
					//   _Glossiness                    c19      1
					//   _OcclusionStrength             c20      1
					//   _EmissionColor                 c21      1
					//   _TranThreashold                c22      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_3_0
					    def c23, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c24, 1, 0, 0.416666657, 6
					    def c25, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c26, -1, 1, 3.14159274, 1.00000001e-007
					    def c27, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c28, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4_pp v2.xyz
					    dcl_texcoord5_pp v3.xyz
					    dcl_texcoord6 v4
					    dcl_texcoord7 v5.x
					    dcl_texcoord8_pp v6.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld r0, v0, s2
					    mul_pp r1, r0, c17
					    mov r2, c14
					    mad_pp r0.xyz, r0, c17, -r2
					    mad_pp r0.xyz, c18.x, r0, r2
					    mad_pp r0.w, c18.x, -r2.w, r2.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v2
					    dp3_pp r3.x, v1, v1
					    rsq_pp r3.x, r3.x
					    mul_pp r3.yzw, r3.x, v1.xxyz
					    mul_pp r1.xyz, r1.w, r1
					    add_pp r4.x, -r0.w, c24.x
					    mad_pp r5.w, r1.w, r0.w, r4.x
					    texldp_pp r6, v4, s5
					    texld_pp r7, v0, s3
					    mov r8.xy, c24
					    add_pp r0.w, r8.x, -c20.x
					    mad_pp r0.w, r7.y, c20.x, r0.w
					    add_pp r1.w, r8.x, -c19.x
					    dp3_pp r4.y, r3.yzww, r2
					    add_pp r4.y, r4.y, r4.y
					    mad_pp r4.yzw, r2.xxyz, -r4.y, r3
					    mul_pp r6.xyz, r6.x, c16
					    mov r2.w, c24.x
					    dp4_pp r7.x, c1, r2
					    dp4_pp r7.y, c2, r2
					    dp4_pp r7.z, c3, r2
					    add_pp r7.xyz, r7, v3
					    max_pp r8.xzw, r7.xyyz, c24.y
					    abs r2.w, c15.w
					    log_pp r7.x, r8.x
					    log_pp r7.y, r8.z
					    log_pp r7.z, r8.w
					    mul_pp r7.xyz, r7, c24.z
					    exp_pp r9.x, r7.x
					    exp_pp r9.y, r7.y
					    exp_pp r9.z, r7.z
					    mad_pp r7.xyz, r9, c23.x, c23.y
					    max_pp r9.xyz, r7, c24.y
					    cmp_pp r7.xyz, -r2.w, r9, r8.xzww
					    if_lt -c8.w, r8.y
					      nrm_pp r9.xyz, r4.yzww
					      add r8.xzw, c6.xyyz, -v6.xyyz
					      rcp r10.x, r9.x
					      rcp r10.y, r9.y
					      rcp r10.z, r9.z
					      mul_pp r8.xzw, r8, r10.xyyz
					      add r11.xyz, c7, -v6
					      mul_pp r10.xyz, r10, r11
					      cmp_pp r8.xzw, -r9.xyyz, r10.xyyz, r8
					      min_pp r6.w, r8.z, r8.x
					      min_pp r7.w, r8.w, r6.w
					      add r8.xzw, -c8.xyyz, v6.xyyz
					      mad_pp r9.xyz, r9, r7.w, r8.xzww
					    else
					      mov_pp r9.xyz, r4.yzww
					    endif
					    mad_pp r6.w, r1.w, -c23.z, c23.w
					    mul_pp r6.w, r1.w, r6.w
					    mul_pp r9.w, r6.w, c24.w
					    texldl_pp r10, r9, s0
					    pow_pp r6.w, r10.w, c9.y
					    mul_pp r6.w, r6.w, c9.x
					    mul_pp r8.xzw, r10.xyyz, r6.w
					    mov r7.w, c7.w
					    if_lt r7.w, c25.x
					      if_lt -c12.w, r8.y
					        nrm_pp r11.xyz, r4.yzww
					        add r12.xyz, c10, -v6
					        rcp r13.x, r11.x
					        rcp r13.y, r11.y
					        rcp r13.z, r11.z
					        mul_pp r12.xyz, r12, r13
					        add r14.xyz, c11, -v6
					        mul_pp r13.xyz, r13, r14
					        cmp_pp r12.xyz, -r11, r13, r12
					        min_pp r7.w, r12.y, r12.x
					        min_pp r8.y, r12.z, r7.w
					        add r12.xyz, -c12, v6
					        mad_pp r9.xyz, r11, r8.y, r12
					      else
					        mov_pp r9.xyz, r4.yzww
					      endif
					      texldl_pp r9, r9, s1
					      pow_pp r4.y, r9.w, c13.y
					      mul_pp r4.y, r4.y, c13.x
					      mul_pp r4.yzw, r9.xxyz, r4.y
					      mad r9.xyz, r6.w, r10, -r4.yzww
					      mad_pp r8.xzw, c7.w, r9.xyyz, r4.yyzw
					    endif
					    mul_pp r4.yzw, r0.w, r8.xxzw
					    mad_pp r8.xyz, v1, -r3.x, c0
					    dp3_pp r3.x, r8, r8
					    add r6.w, -r3.x, c25.y
					    rsq_pp r3.x, r3.x
					    cmp_pp r3.x, r6.w, c25.z, r3.x
					    mul_pp r8.xyz, r3.x, r8
					    dp3_pp r3.x, r2, -r3.yzww
					    add r6.w, -r3.x, c25.w
					    mad_pp r9.xyz, -r3.yzww, r6.w, r2
					    cmp_pp r2.xyz, r3.x, r2, r9
					    dp3_pp r3.x, r2, c0
					    max_pp r6.w, r3.x, c24.y
					    dp3_pp r3.x, r2, r8
					    max_pp r7.w, r3.x, c24.y
					    dp3_pp r2.x, r2, -r3.yzww
					    max_pp r3.x, r2.x, c24.y
					    dp3_pp r2.x, c0, r8
					    max_pp r3.y, r2.x, c24.y
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r1.w, -r1.w, c24.x
					    mad_pp r2.z, r3.x, r2.y, r2.x
					    mad_pp r2.y, r6.w, r2.y, r2.x
					    mul_pp r2.y, r2.y, r3.x
					    mad r2.y, r6.w, r2.z, r2.y
					    add r2.y, r2.y, c25.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul_pp r2.z, r2.x, r2.x
					    mul r3.z, r7.w, r7.w
					    mad r8.xy, r2.x, r2.x, c26
					    mad_pp r3.z, r3.z, r8.x, c24.x
					    mul r3.w, r3.z, c26.z
					    mad r3.z, r3.w, r3.z, c26.w
					    rcp r3.z, r3.z
					    mul_pp r2.z, r2.z, r3.z
					    add_pp r3.z, -r6.w, c24.x
					    mul_pp r3.w, r3.z, r3.z
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.z, r3.z, r3.w
					    add_pp r3.x, -r3.x, c24.x
					    mul_pp r3.w, r3.x, r3.x
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r3.x, r3.x, r3.w
					    mul_pp r3.w, r3.y, r3.y
					    dp2add_pp r3.w, r3.w, r1.w, c27.x
					    mad_pp r3.z, r3.w, r3.z, c24.x
					    mad_pp r3.w, r3.w, r3.x, c24.x
					    mul_pp r3.z, r3.w, r3.z
					    mul r2.y, r2.z, r2.y
					    mul_pp r2.z, r2.y, c27.y
					    mad r2.y, r2.y, -c27.y, c27.z
					    rsq r3.w, r2.z
					    rcp_pp r3.w, r3.w
					    cmp_pp r2.y, r2.y, c27.w, r3.w
					    cmp_pp r2.y, -r2.w, r2.y, r2.z
					    mul_pp r2.y, r6.w, r2.y
					    max_pp r3.w, r2.y, c24.y
					    mul_pp r2.y, r6.w, r3.z
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r1.w, r1.w, -c28.x, c28.y
					    rcp_pp r2.x, r8.y
					    cmp_pp r1.w, -r2.w, r1.w, r2.x
					    add_sat_pp r2.x, r4.x, c19.x
					    mul_pp r2.yzw, r2.y, r6.xxyz
					    mad_pp r2.yzw, r7.xxyz, r0.w, r2
					    mul_pp r6.xyz, r6, r3.w
					    add_pp r0.w, -r3.y, c24.x
					    mul_pp r3.y, r0.w, r0.w
					    mul_pp r3.y, r3.y, r3.y
					    mul_pp r0.w, r0.w, r3.y
					    lrp_pp r3.yzw, r0.w, c24.x, r0.xxyz
					    mul_pp r3.yzw, r3, r6.xxyz
					    mad_pp r1.xyz, r1, r2.yzww, r3.yzww
					    mul_pp r2.yzw, r4, r1.w
					    lrp_pp r4.xyz, r3.x, r2.x, r0
					    mad_pp r0.xyz, r2.yzww, r4, r1
					    texld r1, v0, s4
					    mad_pp r0.xyz, r1, c21, r0
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    lrp_pp r5.xyz, r0.w, r0, c4
					    add r0.x, c22.x, -v6.y
					    cmp r0.x, r0.x, c24.x, c24.y
					    mul_pp oC0, r0.x, r5
					
					// approximately 196 instruction slots used (8 texture, 188 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
						float _TranThreashold;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					bvec3 u_xlatb11;
					vec3 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec3 u_xlat18;
					float u_xlat30;
					float u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0 * _Color;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat4 = (-u_xlat42) + 1.0;
					    u_xlat5.w = u_xlat1.w * u_xlat42 + u_xlat4;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat18.xy);
					    u_xlat7 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat42 = (-_OcclusionStrength) + 1.0;
					    u_xlat42 = u_xlat7.y * _OcclusionStrength + u_xlat42;
					    u_xlat43 = (-_Glossiness) + 1.0;
					    u_xlat18.x = dot(u_xlat17.xyz, u_xlat2.xyz);
					    u_xlat18.x = u_xlat18.x + u_xlat18.x;
					    u_xlat18.xyz = u_xlat2.xyz * (-u_xlat18.xxx) + u_xlat17.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat7.x = dot(unity_SHAr, u_xlat2);
					    u_xlat7.y = dot(unity_SHAg, u_xlat2);
					    u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    u_xlat7.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat8.xyz = log2(u_xlat7.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat18.xyz, u_xlat18.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat8.xyz = u_xlat18.xyz * vec3(u_xlat48);
					        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat48 = min(u_xlat9.z, u_xlat48);
					        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat48) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat18.xyz;
					    }
					    u_xlat48 = (-u_xlat43) * 0.699999988 + 1.70000005;
					    u_xlat48 = u_xlat43 * u_xlat48;
					    u_xlat48 = u_xlat48 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat48);
					    u_xlat49 = log2(u_xlat8.w);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.y;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat49 = u_xlat49 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat49);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat18.xyz, u_xlat18.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat10.xyz = u_xlat18.xyz * vec3(u_xlat50);
					            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat50 = min(u_xlat11.z, u_xlat50);
					            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat18.xyz = u_xlat10.xyz * vec3(u_xlat50) + u_xlat11.xyz;
					        }
					        u_xlat10 = textureLod(unity_SpecCube1, u_xlat18.xyz, u_xlat48);
					        u_xlat18.x = log2(u_xlat10.w);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.y;
					        u_xlat18.x = exp2(u_xlat18.x);
					        u_xlat18.x = u_xlat18.x * unity_SpecCube1_HDR.x;
					        u_xlat18.xyz = u_xlat10.xyz * u_xlat18.xxx;
					        u_xlat8.xyz = vec3(u_xlat49) * u_xlat8.xyz + (-u_xlat18.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat18.xyz;
					    }
					    u_xlat18.xyz = vec3(u_xlat42) * u_xlat9.xyz;
					    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlatb48 = u_xlat3.x<0.0;
					    u_xlat3.x = (-u_xlat3.x) + 9.99999975e-06;
					    u_xlat9.xyz = (-u_xlat17.xyz) * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = (bool(u_xlatb48)) ? u_xlat9.xyz : u_xlat2.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat48 = dot(u_xlat2.xyz, u_xlat8.xyz);
					    u_xlat48 = max(u_xlat48, 0.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
					    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
					    u_xlat30 = u_xlat43 * u_xlat43;
					    u_xlat17.x = (-u_xlat43) * u_xlat43 + 1.0;
					    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x + u_xlat30;
					    u_xlat17.x = u_xlat2.x * u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat31 + u_xlat17.x;
					    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
					    u_xlat17.x = 2.0 / u_xlat17.x;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat45 = u_xlat48 * u_xlat48;
					    u_xlat8.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat8.x + 1.0;
					    u_xlat48 = u_xlat45 * 3.14159274;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.00000001e-07;
					    u_xlat31 = u_xlat31 / u_xlat45;
					    u_xlat45 = (-u_xlat3.x) + 1.0;
					    u_xlat48 = u_xlat45 * u_xlat45;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat48 = u_xlat2.x * u_xlat2.x;
					    u_xlat48 = u_xlat48 * u_xlat48;
					    u_xlat2.x = u_xlat2.x * u_xlat48;
					    u_xlat48 = u_xlat2.y * u_xlat2.y;
					    u_xlat48 = dot(vec2(u_xlat48), vec2(u_xlat43));
					    u_xlat48 = u_xlat48 + -0.5;
					    u_xlat45 = u_xlat48 * u_xlat45 + 1.0;
					    u_xlat48 = u_xlat48 * u_xlat2.x + 1.0;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat17.x = u_xlat31 * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * 0.785398185;
					    u_xlat31 = max(u_xlat17.x, 9.99999975e-05);
					    u_xlat31 = sqrt(u_xlat31);
					    u_xlat17.x = (u_xlatb44) ? u_xlat31 : u_xlat17.x;
					    u_xlat17.x = u_xlat3.x * u_xlat17.x;
					    u_xlat17.x = max(u_xlat17.x, 0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat45;
					    u_xlat43 = u_xlat43 * u_xlat30;
					    u_xlat43 = (-u_xlat43) * 0.280000001 + 1.0;
					    u_xlat30 = float(1.0) / u_xlat8.y;
					    u_xlat43 = (u_xlatb44) ? u_xlat43 : u_xlat30;
					    u_xlat30 = u_xlat4 + _Glossiness;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat3.xzw = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat3.xzw = u_xlat7.xyz * vec3(u_xlat42) + u_xlat3.xzw;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xxx;
					    u_xlat42 = (-u_xlat2.y) + 1.0;
					    u_xlat16.x = u_xlat42 * u_xlat42;
					    u_xlat16.x = u_xlat16.x * u_xlat16.x;
					    u_xlat42 = u_xlat42 * u_xlat16.x;
					    u_xlat7.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xzw + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat18.xyz * vec3(u_xlat43);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat42 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat5.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    u_xlatb0 = _TranThreashold>=vs_TEXCOORD8.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    SV_Target0 = u_xlat0.xxxx * u_xlat5;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  GpuProgramID 111464
Program "vp" {
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c13, c13.zwzw
					    abs r0.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c12.w, v4.w
					    mul o4.xyz, r0.w, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 36 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c15
					    mul r1.xyz, c13, v1.y
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c8, r0
					    dp4 o6.y, c9, r0
					    dp4 o6.z, c10, r0
					    dp4 o6.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c15.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_3_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c14.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad o6.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o6.zw, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad o7.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[5];
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord7 o6.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c13, c13.zwzw
					    abs r0.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c12.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o6.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c15
					    mul r1.xyz, c13, v1.y
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c8, r0
					    dp4 o6.y, c9, r0
					    dp4 o6.z, c10, r0
					    dp4 o6.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c15.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    dp4 r0.w, c6, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_3_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c14.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad o6.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o6.zw, r1
					    mov o7.x, r1.z
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad o7.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    dp4 r0.w, c6, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[5];
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c13, c13.zwzw
					    abs r0.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c12.w, v4.w
					    mul o4.xyz, r0.w, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 36 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c15
					    mul r1.xyz, c13, v1.y
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c8, r0
					    dp4 o6.y, c9, r0
					    dp4 o6.z, c10, r0
					    dp4 o6.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c15.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_3_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c14.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad o6.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o6.zw, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad o7.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.z, c6, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[5];
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord7 o6.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c13, c13.zwzw
					    abs r0.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c12.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o6.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c15
					    mul r1.xyz, c13, v1.y
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c8, r0
					    dp4 o6.y, c9, r0
					    dp4 o6.z, c10, r0
					    dp4 o6.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c17, c17.zwzw
					    abs r0.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c16.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c15.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o7.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    dp4 r0.w, c6, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_3_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7.x
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    mul r1.xyz, c8, v1.y
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r0.w, c14.w, v4.w
					    mul o4.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad o6.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o6.zw, r1
					    mov o7.x, r1.z
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c13
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad o7.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c4, v0
					    dp4 o0.y, c5, v0
					    dp4 o0.w, c7, v0
					    mad o1.xy, v2, c22, c22.zwzw
					    abs r0.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add o2.xyz, r0, -c19
					    mul r1.xyz, c17, v1.y
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c21.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 o6.x, c12, r0
					    dp4 o6.y, c13, r0
					    dp4 o6.z, c14, r0
					    dp4 o6.w, c15, r0
					    dp4 o7.x, c0, r0
					    dp4 o7.y, c1, r0
					    dp4 o7.z, c2, r0
					    dp4 o7.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    dp4 r0.w, c6, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5[5];
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c18, c18.zwzw
					    abs r0.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c14
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov o5.xyz, r2
					    mov o3.xyz, r3
					    mul r1.w, c17.w, v4.w
					    mul o4.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 o6.x, c11, r0
					    dp4 o6.y, c12, r0
					    dp4 o6.z, c13, r0
					    add o7.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    dp4 r0.w, c2, v0
					    mov o0.z, r0.w
					    mov o8.x, r0.w
					    mov o3.w, r0.x
					    mov o4.w, r0.y
					    mov o5.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c6.w
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c7.x
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c7.x
					    max_pp r0.x, r1.y, c7.x
					    max_pp r1.y, r0.w, c7.x
					    mul r0.y, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.z, r2.x, -c5.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c6.x
					    mad_pp r0.y, r0.y, r1.y, c6.x
					    mul r1.y, r0.y, c7.y
					    mad r0.y, r1.y, r0.y, c7.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c6.x
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c6.w
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c8.x, c8.y
					    mul_pp r0.y, r0.y, c8.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c8.z, r1.y
					    abs r1.y, c1.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c7.x
					    dp3 r0.y, v5, v5
					    texld_pp r2, r0.y, s1
					    mul_pp r2.xyz, r2.x, c2
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c6.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c7.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c0
					    mad_pp r6.xyz, c3, r4, -r5
					    mul_pp r4.xyz, r4, c3
					    mad_pp r5.xyz, c4.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c6.x, r5
					    mul_pp r0.yzw, r3.xxyz, r6.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c6.x
					    add_pp r1.y, -r1.z, c6.x
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r0.x, r0.x, r1.y, c6.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r1.xyz, r0.x, r2
					    mad_pp r0.x, c4.x, -r5.w, r5.w
					    mul_pp r2.xyz, r0.x, r4
					    mad_pp oC0.xyz, r2, r1, r0.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 94 instruction slots used (2 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xx);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_2d s0
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c6.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c6.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c6.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c7.x
					    max_pp r0.y, r2.x, c7.x
					    max_pp r0.z, r1.w, c7.x
					    max_pp r1.y, r0.x, c7.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.w, r2.x, -c5.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c6.x
					    mad_pp r0.x, r0.x, r1.z, c6.x
					    mul r1.z, r0.x, c7.y
					    mad r0.x, r1.z, r0.x, c7.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c6.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c6.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c8.x, c8.y
					    mul_pp r0.x, r0.x, c8.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c8.z, r1.z
					    abs r1.z, c1.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.yzw, r0.x, c2.xxyz
					    cmp_pp r1.yzw, r0.x, r1, c7.x
					    add_pp r0.x, -r0.z, c6.x
					    mul_pp r2.x, r0.x, r0.x
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.x, r0.x, r2.x
					    texld r2, v0, s0
					    mov r3, c0
					    mad_pp r4.xyz, c3, r2, -r3
					    mul_pp r2.xyz, r2, c3
					    mad_pp r3.xyz, c4.x, r4, r3
					    lrp_pp r4.xyz, r0.x, c6.x, r3
					    mul_pp r1.yzw, r1, r4.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    add_pp r1.x, r0.z, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    mad_pp r0.z, r0.z, r0.w, c7.w
					    mad_pp r0.x, r0.z, r0.x, c6.x
					    add_pp r0.w, -r0.y, c6.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c6.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c2
					    mad_pp r0.w, c4.x, -r3.w, r3.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp oC0.xyz, r2, r0, r1.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 88 instruction slots used (1 texture, 87 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat16) + 9.99999975e-06;
					    u_xlatb16 = u_xlat16<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = u_xlat0.z * u_xlat0.z;
					    u_xlat15 = (-_Glossiness) + 1.0;
					    u_xlat6.x = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat11 + 1.0;
					    u_xlat11 = u_xlat10 * 3.14159274;
					    u_xlat10 = u_xlat11 * u_xlat10 + 1.00000001e-07;
					    u_xlat11 = u_xlat6.x * u_xlat6.x;
					    u_xlat10 = u_xlat11 / u_xlat10;
					    u_xlat11 = (-u_xlat15) * u_xlat15 + 1.0;
					    u_xlat16 = u_xlat1.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat10 = u_xlat10 * u_xlat6.x;
					    u_xlat10 = u_xlat10 * 0.785398185;
					    u_xlat6.x = max(u_xlat10, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10 = (u_xlatb11) ? u_xlat6.x : u_xlat10;
					    u_xlat10 = u_xlat0.x * u_xlat10;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat6.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat10 = (-u_xlat0.y) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat10 = u_xlat0.y + u_xlat0.y;
					    u_xlat5 = u_xlat0.y * u_xlat10;
					    u_xlat5 = u_xlat5 * u_xlat15 + -0.5;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat1.x * u_xlat10;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat10 * u_xlat5;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c6, 0.5, 0, 1, 0.00100000005
					    def c7, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c6.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c7.y
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c6.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c6.y
					    max_pp r0.x, r1.y, c6.y
					    max_pp r1.y, r0.w, c6.y
					    mul r0.y, r1.y, r1.y
					    mov r0.z, c6.z
					    add_pp r0.z, r0.z, -c5.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c6.z
					    mad_pp r0.y, r0.y, r1.y, c6.z
					    mul r1.y, r0.y, c7.z
					    mad r0.y, r1.y, r0.y, c7.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c6.z
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c6.z
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c7.y
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c8.x, c8.y
					    mul_pp r0.y, r0.y, c8.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c8.z, r1.y
					    abs r1.y, c1.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c6.y
					    rcp r0.y, v5.w
					    mad r0.yw, v5.xxzy, r0.y, c6.x
					    texld_pp r2, r0.ywzw, s1
					    dp3 r0.y, v5, v5
					    texld_pp r3, r0.y, s2
					    mul r0.y, r2.w, r3.x
					    mul_pp r2.xyz, r0.y, c2
					    cmp_pp r2.xyz, -v5.z, c6.y, r2
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c6.z
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c0
					    mad_pp r6.xyz, c3, r4, -r5
					    mul_pp r4.xyz, r4, c3
					    mad_pp r5.xyz, c4.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c6.z, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, -c6.x
					    mad_pp r0.y, r0.x, r0.y, c6.z
					    add_pp r0.z, -r1.z, c6.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c6.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c4.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r0, r3
					    mov_pp oC0.w, c6.z
					
					// approximately 99 instruction slots used (3 texture, 96 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xy);
					    u_xlatb7 = 0.0<vs_TEXCOORD5.z;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat2.w * u_xlat7.x;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c6.w
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c7.x
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c7.x
					    max_pp r0.x, r1.y, c7.x
					    max_pp r1.y, r0.w, c7.x
					    mul r0.y, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.z, r2.x, -c5.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c6.x
					    mad_pp r0.y, r0.y, r1.y, c6.x
					    mul r1.y, r0.y, c7.y
					    mad r0.y, r1.y, r0.y, c7.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c6.x
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c6.w
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c8.x, c8.y
					    mul_pp r0.y, r0.y, c8.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c8.z, r1.y
					    abs r1.y, c1.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c7.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s2
					    texld r3, v5, s1
					    mul_pp r0.y, r2.x, r3.w
					    mul_pp r2.xyz, r0.y, c2
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c6.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c7.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c0
					    mad_pp r6.xyz, c3, r4, -r5
					    mul_pp r4.xyz, r4, c3
					    mad_pp r5.xyz, c4.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c6.x, r5
					    mul_pp r0.yzw, r3.xxyz, r6.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c6.x
					    add_pp r1.y, -r1.z, c6.x
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r0.x, r0.x, r1.y, c6.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r1.xyz, r0.x, r2
					    mad_pp r0.x, c4.x, -r5.w, r5.w
					    mul_pp r2.xyz, r0.x, r4
					    mad_pp oC0.xyz, r2, r1, r0.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 96 instruction slots used (3 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_2d s0
					    dcl_2d s1
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c6.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c6.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c6.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c7.x
					    max_pp r0.y, r2.x, c7.x
					    max_pp r0.z, r1.w, c7.x
					    max_pp r1.y, r0.x, c7.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.w, r2.x, -c5.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c6.x
					    mad_pp r0.x, r0.x, r1.z, c6.x
					    mul r1.z, r0.x, c7.y
					    mad r0.x, r1.z, r0.x, c7.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c6.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c6.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c8.x, c8.y
					    mul_pp r0.x, r0.x, c8.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c8.z, r1.z
					    abs r1.z, c1.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c7.x
					    texld_pp r2, v5, s1
					    mul_pp r2.xyz, r2.w, c2
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c6.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c7.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c0
					    mad_pp r5.xyz, c3, r3, -r4
					    mul_pp r3.xyz, r3, c3
					    mad_pp r4.xyz, c4.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c6.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c6.x
					    add_pp r0.w, -r0.y, c6.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c6.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c4.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp oC0.xyz, r2, r0, r1.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 90 instruction slots used (2 texture, 88 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c7, 0.5, 0, 1, 0.00100000005
					    def c8, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c7.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c8.y
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c7.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c7.y
					    max_pp r0.x, r1.y, c7.y
					    max_pp r1.y, r0.w, c7.y
					    mul r0.y, r1.y, r1.y
					    mov r0.z, c7.z
					    add_pp r0.w, r0.z, -c6.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.w, r1.y, r1.y, -c7.z
					    mad_pp r0.y, r0.y, r1.w, c7.z
					    mul r1.w, r0.y, c8.z
					    mad r0.y, r1.w, r0.y, c8.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.w, -r0.w, c7.z
					    mad_pp r2.x, r1.x, r1.w, r1.y
					    mad_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c7.z
					    mad r1.y, r1.z, r2.x, r1.y
					    add r1.y, r1.y, c8.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.y, r0.y, r1.y
					    mad r1.y, r0.y, -c9.x, c9.y
					    mul_pp r0.y, r0.y, c9.x
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c9.z, r1.w
					    abs r1.w, c2.w
					    cmp_pp r0.y, -r1.w, r1.y, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c7.y
					    rcp r0.y, v5.w
					    mad r2.xy, v5, r0.y, c7.x
					    texld_pp r2, r2, s2
					    dp3 r0.y, v5, v5
					    texld_pp r3, r0.y, s3
					    mul r0.y, r2.w, r3.x
					    cmp r0.y, -v5.z, c7.y, r0.y
					    texldp_pp r2, v6, s1
					    lrp_pp r1.w, r2.x, r0.z, c0.x
					    mul_pp r0.y, r0.y, r1.w
					    mul_pp r2.xyz, r0.y, c3
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c7.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c1
					    mad_pp r6.xyz, c4, r4, -r5
					    mul_pp r4.xyz, r4, c4
					    mad_pp r5.xyz, c5.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c7.z, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.z, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mad_pp r0.x, r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, r0.y, c7.z
					    add_pp r0.z, -r1.z, c7.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c5.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r0, r3
					    mov_pp oC0.w, c7.z
					
					// approximately 102 instruction slots used (4 texture, 98 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat19 = u_xlat1.y + u_xlat1.y;
					    u_xlat7 = u_xlat1.y * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + -0.5;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c6.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c6.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c6.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c7.x
					    max_pp r0.y, r2.x, c7.x
					    max_pp r0.z, r1.w, c7.x
					    max_pp r1.y, r0.x, c7.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.w, r2.x, -c5.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c6.x
					    mad_pp r0.x, r0.x, r1.z, c6.x
					    mul r1.z, r0.x, c7.y
					    mad r0.x, r1.z, r0.x, c7.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c6.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c6.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c8.x, c8.y
					    mul_pp r0.x, r0.x, c8.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c8.z, r1.z
					    abs r1.z, c1.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c7.x
					    texldp_pp r2, v5, s1
					    mul_pp r2.xyz, r2.x, c2
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c6.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c7.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c0
					    mad_pp r5.xyz, c3, r3, -r4
					    mul_pp r3.xyz, r3, c3
					    mad_pp r4.xyz, c4.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c6.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c6.x
					    add_pp r0.w, -r0.y, c6.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c6.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c4.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp oC0.xyz, r2, r0, r1.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 90 instruction slots used (2 texture, 88 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c6.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c6.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c6.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c7.x
					    max_pp r0.y, r2.x, c7.x
					    max_pp r0.z, r1.w, c7.x
					    max_pp r1.y, r0.x, c7.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c6.x
					    add_pp r0.w, r2.x, -c5.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c6.x
					    mad_pp r0.x, r0.x, r1.z, c6.x
					    mul r1.z, r0.x, c7.y
					    mad r0.x, r1.z, r0.x, c7.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c6.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c6.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c6.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c8.x, c8.y
					    mul_pp r0.x, r0.x, c8.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c8.z, r1.z
					    abs r1.z, c1.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c7.x
					    texld r2, v5, s2
					    texldp_pp r3, v6, s1
					    mul_pp r0.x, r2.w, r3.x
					    mul_pp r2.xyz, r0.x, c2
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c6.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c7.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c0
					    mad_pp r5.xyz, c3, r3, -r4
					    mul_pp r3.xyz, r3, c3
					    mad_pp r4.xyz, c4.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c6.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c6.x
					    add_pp r0.w, -r0.y, c6.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c6.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c4.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp oC0.xyz, r2, r0, r1.yzww
					    mov_pp oC0.w, c6.x
					
					// approximately 92 instruction slots used (3 texture, 89 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c8, 0.970000029, 1, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c10, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c9.x
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c9.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c9.y
					    max_pp r0.x, r1.y, c9.y
					    max_pp r1.y, r0.w, c9.y
					    mul r0.y, r1.y, r1.y
					    mov r1.y, c8.y
					    add_pp r0.z, r1.y, -c7.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.w, r0.w, r0.w, -c8.y
					    mad_pp r0.y, r0.y, r1.w, c8.y
					    mul r1.w, r0.y, c9.z
					    mad r0.y, r1.w, r0.y, c9.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c8.y
					    mad_pp r2.x, r1.x, r1.w, r0.w
					    mad_pp r0.w, r1.z, r1.w, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c8.y
					    mad r0.w, r1.z, r2.x, r0.w
					    add r0.w, r0.w, c9.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c10.y, c10.z
					    mul_pp r0.y, r0.y, c10.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, c10.w, r1.w
					    abs r1.w, c3.w
					    cmp_pp r0.y, -r1.w, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.w, r0.y, c9.y
					    dp3 r0.y, v6, v6
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c0.w
					    texld r2, v6, s1
					    mad r0.y, r0.y, -c8.x, r2.x
					    cmp_pp r0.y, r0.y, r1.y, c1.x
					    dp3 r0.w, v5, v5
					    texld r2, r0.w, s2
					    mul_pp r0.y, r0.y, r2.x
					    mul_pp r2.xyz, r0.y, c4
					    mul_pp r3.xyz, r1.w, r2
					    add_pp r0.y, -r0.x, c8.y
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c2
					    mad_pp r6.xyz, c5, r4, -r5
					    mul_pp r4.xyz, r4, c5
					    mad_pp r5.xyz, c6.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c8.y, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, c10.x
					    mad_pp r0.y, r0.x, r0.y, c8.y
					    add_pp r0.z, -r1.z, c8.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c8.y
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c6.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r0, r3
					    mov_pp oC0.w, c8.y
					
					// approximately 102 instruction slots used (3 texture, 99 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 0.970000029, 1, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c10, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c9.x
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c9.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c9.y
					    max_pp r0.x, r1.y, c9.y
					    max_pp r1.y, r0.w, c9.y
					    mul r0.y, r1.y, r1.y
					    mov r1.y, c8.y
					    add_pp r0.z, r1.y, -c7.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.w, r0.w, r0.w, -c8.y
					    mad_pp r0.y, r0.y, r1.w, c8.y
					    mul r1.w, r0.y, c9.z
					    mad r0.y, r1.w, r0.y, c9.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c8.y
					    mad_pp r2.x, r1.x, r1.w, r0.w
					    mad_pp r0.w, r1.z, r1.w, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c8.y
					    mad r0.w, r1.z, r2.x, r0.w
					    add r0.w, r0.w, c9.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c10.y, c10.z
					    mul_pp r0.y, r0.y, c10.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, c10.w, r1.w
					    abs r1.w, c3.w
					    cmp_pp r0.y, -r1.w, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.w, r0.y, c9.y
					    dp3 r0.y, v6, v6
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c0.w
					    texld r2, v6, s1
					    mad r0.y, r0.y, -c8.x, r2.x
					    cmp_pp r0.y, r0.y, r1.y, c1.x
					    dp3 r0.w, v5, v5
					    texld r2, r0.w, s3
					    texld r3, v5, s2
					    mul r0.w, r2.x, r3.w
					    mul_pp r0.y, r0.y, r0.w
					    mul_pp r2.xyz, r0.y, c4
					    mul_pp r3.xyz, r1.w, r2
					    add_pp r0.y, -r0.x, c8.y
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c2
					    mad_pp r6.xyz, c5, r4, -r5
					    mul_pp r4.xyz, r4, c5
					    mad_pp r5.xyz, c6.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c8.y, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, c10.x
					    mad_pp r0.y, r0.x, r0.y, c8.y
					    add_pp r0.z, -r1.z, c8.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c8.y
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c6.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r0, r3
					    mov_pp oC0.w, c8.y
					
					// approximately 104 instruction slots used (4 texture, 100 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat13 = u_xlat2.x * u_xlat3.w;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   _LightShadowData               c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Color                         c8       1
					//   _Metallic                      c9       1
					//   _Glossiness                    c10      1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c11, 0.5, 0, 1, 0.25
					    def c12, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c13, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.z, c11.z
					    rcp r0.x, v6.w
					    mad r1, v6, r0.x, c0
					    texldp_pp r1, r1, s1
					    mad r2, v6, r0.x, c1
					    texldp_pp r2, r2, s1
					    mov_pp r1.y, r2.x
					    mad r2, v6, r0.x, c2
					    mad r3, v6, r0.x, c3
					    texldp_pp r3, r3, s1
					    mov_pp r1.w, r3.x
					    texldp_pp r2, r2, s1
					    mov_pp r1.z, r2.x
					    lrp_pp r2, r1, r0.z, c4.x
					    dp4_pp r0.x, r2, c11.w
					    rcp r0.y, v5.w
					    mad r0.yw, v5.xxzy, r0.y, c11.x
					    texld_pp r1, r0.ywzw, s2
					    dp3 r0.y, v5, v5
					    texld_pp r2, r0.y, s3
					    mul r0.y, r1.w, r2.x
					    cmp r0.y, -v5.z, c11.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyw, r0.x, c7.xyzz
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r1.w, r1, r1
					    rsq_pp r1.w, r1.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r1.w, -r2
					    mul_pp r1.xyz, r1.w, r1
					    dp3_pp r1.w, r3, r3
					    add r2.w, -r1.w, c12.x
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r2.w, c12.y, r1.w
					    mul_pp r3.xyz, r1.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r1.w, r4, -r2
					    add r2.w, -r1.w, c12.z
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r1.w, r4, r5
					    dp3_pp r1.w, r4, -r2
					    max_pp r2.x, r1.w, c11.y
					    dp3_pp r1.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c11.y
					    max_pp r1.x, r2.y, c11.y
					    max_pp r2.y, r1.w, c11.y
					    mul r1.y, r2.y, r2.y
					    add_pp r0.z, r0.z, -c10.x
					    mul_pp r1.z, r0.z, r0.z
					    mad r1.w, r1.z, r1.z, -c11.z
					    mad_pp r1.y, r1.y, r1.w, c11.z
					    mul r1.w, r1.y, c12.w
					    mad r1.y, r1.w, r1.y, c13.x
					    rcp r1.y, r1.y
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c11.z
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c11.z
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c12.z
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r1.y, r1.y, r1.z
					    mad r1.z, r1.y, -c13.y, c13.z
					    mul_pp r1.y, r1.y, c13.y
					    rsq r2.x, r1.y
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c13.w, r2.x
					    abs r2.x, c6.w
					    cmp_pp r1.y, -r2.x, r1.z, r1.y
					    mul_pp r1.y, r2.z, r1.y
					    max_pp r2.x, r1.y, c11.y
					    mul_pp r2.xyw, r0, r2.x
					    add_pp r1.y, -r1.x, c11.z
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    texld r3, v0, s0
					    mov r4, c5
					    mad_pp r5.xyz, c8, r3, -r4
					    mul_pp r3.xyz, r3, c8
					    mad_pp r4.xyz, c9.x, r5, r4
					    lrp_pp r5.xyz, r1.y, c11.z, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r1.y, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.y
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.xy, r1.xwzw, r1.zyzw
					    mad_pp r0.z, r1.x, r0.z, -c11.x
					    mad_pp r1.x, r0.z, r1.y, c11.z
					    add_pp r1.y, -r2.z, c11.z
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.z, r0.z, r1.y, c11.z
					    mul_pp r0.z, r1.x, r0.z
					    mul_pp r0.z, r2.z, r0.z
					    mul_pp r0.xyz, r0.z, r0.xyww
					    mad_pp r0.w, c9.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp oC0.xyz, r1, r0, r2.xyww
					    mov_pp oC0.w, c11.z
					
					// approximately 113 instruction slots used (7 texture, 106 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
						vec4 _ShadowOffsets0;
						vec4 _ShadowOffsets1;
						vec4 _ShadowOffsets2;
						vec4 _ShadowOffsets3;
						vec4 unused_0_15[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = (-_LightShadowData.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets0.xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets1.xyz;
					    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets3.xyz;
					    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c8, 0.0078125, -0.0078125, 0.970000029, 1
					    def c9, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c10, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    dp3 r0.x, v6, v6
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c0.w
					    add r0.yzw, c8.x, v6.xxyz
					    texld r1, r0.yzww, s1
					    add r0.yzw, c8.xyyx, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.y, r2.x
					    add r0.yzw, c8.xyxy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.z, r2.x
					    add r0.yzw, c8.xxyy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.w, r2.x
					    mad r0, r0.x, -c8.z, r1
					    mov r1.w, c8.w
					    cmp_pp r0, r0, r1.w, c1.x
					    dp4_pp r0.x, r0, c9.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s2
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c4
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r0.w, r1, r1
					    rsq_pp r0.w, r0.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r0.w, -r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c9.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c9.z, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r0.w, r4, -r2
					    add r2.w, -r0.w, c9.w
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r0.w, r4, r5
					    dp3_pp r0.w, r4, -r2
					    max_pp r2.x, r0.w, c10.x
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c10.x
					    max_pp r1.x, r2.y, c10.x
					    max_pp r1.y, r0.w, c10.x
					    mul r0.w, r1.y, r1.y
					    add_pp r1.y, r1.w, -c7.x
					    mul_pp r1.z, r1.y, r1.y
					    mad r1.w, r1.z, r1.z, -c8.w
					    mad_pp r0.w, r0.w, r1.w, c8.w
					    mul r1.w, r0.w, c10.y
					    mad r0.w, r1.w, r0.w, c10.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.y, -r1.y, c8.w
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c8.w
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c9.w
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c11.x, c11.y
					    mul_pp r0.w, r0.w, c11.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c11.z, r2.x
					    abs r2.x, c3.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    max_pp r1.z, r0.w, c10.x
					    mul_pp r2.xyw, r0.xyzz, r1.z
					    add_pp r0.w, -r1.x, c8.w
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.z
					    texld r3, v0, s0
					    mov r4, c2
					    mad_pp r5.xyz, c5, r3, -r4
					    mul_pp r3.xyz, r3, c5
					    mad_pp r4.xyz, c6.x, r5, r4
					    lrp_pp r5.xyz, r0.w, c8.w, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.x, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, c10.w
					    mad_pp r0.w, r1.x, r0.w, c8.w
					    add_pp r1.y, -r2.z, c8.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp oC0.xyz, r1, r0, r2.xyww
					    mov_pp oC0.w, c8.w
					
					// approximately 113 instruction slots used (6 texture, 107 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 0.0078125, -0.0078125, 0.970000029, 1
					    def c9, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c10, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dp3 r0.x, v6, v6
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c0.w
					    add r0.yzw, c8.x, v6.xxyz
					    texld r1, r0.yzww, s1
					    add r0.yzw, c8.xyyx, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.y, r2.x
					    add r0.yzw, c8.xyxy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.z, r2.x
					    add r0.yzw, c8.xxyy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.w, r2.x
					    mad r0, r0.x, -c8.z, r1
					    mov r1.w, c8.w
					    cmp_pp r0, r0, r1.w, c1.x
					    dp4_pp r0.x, r0, c9.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s3
					    texld r3, v5, s2
					    mul r0.y, r2.x, r3.w
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyz, r0.x, c4
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r0.w, r1, r1
					    rsq_pp r0.w, r0.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r0.w, -r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c9.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c9.z, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r0.w, r4, -r2
					    add r2.w, -r0.w, c9.w
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r0.w, r4, r5
					    dp3_pp r0.w, r4, -r2
					    max_pp r2.x, r0.w, c10.x
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c10.x
					    max_pp r1.x, r2.y, c10.x
					    max_pp r1.y, r0.w, c10.x
					    mul r0.w, r1.y, r1.y
					    add_pp r1.y, r1.w, -c7.x
					    mul_pp r1.z, r1.y, r1.y
					    mad r1.w, r1.z, r1.z, -c8.w
					    mad_pp r0.w, r0.w, r1.w, c8.w
					    mul r1.w, r0.w, c10.y
					    mad r0.w, r1.w, r0.w, c10.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.y, -r1.y, c8.w
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c8.w
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c9.w
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c11.x, c11.y
					    mul_pp r0.w, r0.w, c11.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c11.z, r2.x
					    abs r2.x, c3.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    max_pp r1.z, r0.w, c10.x
					    mul_pp r2.xyw, r0.xyzz, r1.z
					    add_pp r0.w, -r1.x, c8.w
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.z
					    texld r3, v0, s0
					    mov r4, c2
					    mad_pp r5.xyz, c5, r3, -r4
					    mul_pp r3.xyz, r3, c5
					    mad_pp r4.xyz, c6.x, r5, r4
					    lrp_pp r5.xyz, r0.w, c8.w, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.x, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, c10.w
					    mad_pp r0.w, r1.x, r0.w, c8.w
					    add_pp r1.y, -r2.z, c8.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp oC0.xyz, r1, r0, r2.xyww
					    mov_pp oC0.w, c8.w
					
					// approximately 115 instruction slots used (7 texture, 108 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c7.w
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c8.x
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c8.x
					    max_pp r0.x, r1.y, c8.x
					    max_pp r1.y, r0.w, c8.x
					    mul r0.y, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.z, r2.x, -c6.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c7.x
					    mad_pp r0.y, r0.y, r1.y, c7.x
					    mul r1.y, r0.y, c8.y
					    mad r0.y, r1.y, r0.y, c8.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c7.x
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c7.w
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c9.x, c9.y
					    mul_pp r0.y, r0.y, c9.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c9.z, r1.y
					    abs r1.y, c2.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c8.x
					    dp3 r0.y, v5, v5
					    texld_pp r2, r0.y, s1
					    mul_pp r2.xyz, r2.x, c3
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c7.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c8.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c1
					    mad_pp r6.xyz, c4, r4, -r5
					    mul_pp r4.xyz, r4, c4
					    mad_pp r5.xyz, c5.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c7.x, r5
					    mul_pp r0.yzw, r3.xxyz, r6.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c7.x
					    add_pp r1.y, -r1.z, c7.x
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r0.x, r0.x, r1.y, c7.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r1.xyz, r0.x, r2
					    mad_pp r0.x, c5.x, -r5.w, r5.w
					    mul_pp r2.xyz, r0.x, r4
					    mad_pp r0.xyz, r2, r1, r0.yzww
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 98 instruction slots used (2 texture, 96 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xx);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c7.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c7.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c7.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c8.x
					    max_pp r0.y, r2.x, c8.x
					    max_pp r0.z, r1.w, c8.x
					    max_pp r1.y, r0.x, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.w, r2.x, -c6.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c7.x
					    mad_pp r0.x, r0.x, r1.z, c7.x
					    mul r1.z, r0.x, c8.y
					    mad r0.x, r1.z, r0.x, c8.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c7.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c7.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c9.x, c9.y
					    mul_pp r0.x, r0.x, c9.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c9.z, r1.z
					    abs r1.z, c2.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.yzw, r0.x, c3.xxyz
					    cmp_pp r1.yzw, r0.x, r1, c8.x
					    add_pp r0.x, -r0.z, c7.x
					    mul_pp r2.x, r0.x, r0.x
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.x, r0.x, r2.x
					    texld r2, v0, s0
					    mov r3, c1
					    mad_pp r4.xyz, c4, r2, -r3
					    mul_pp r2.xyz, r2, c4
					    mad_pp r3.xyz, c5.x, r4, r3
					    lrp_pp r4.xyz, r0.x, c7.x, r3
					    mul_pp r1.yzw, r1, r4.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    add_pp r1.x, r0.z, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    mad_pp r0.z, r0.z, r0.w, c8.w
					    mad_pp r0.x, r0.z, r0.x, c7.x
					    add_pp r0.w, -r0.y, c7.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c7.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c3
					    mad_pp r0.w, c5.x, -r3.w, r3.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r0.xyz, r2, r0, r1.yzww
					    mul r0.w, c0.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 92 instruction slots used (1 texture, 91 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat16) + 9.99999975e-06;
					    u_xlatb16 = u_xlat16<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = u_xlat0.z * u_xlat0.z;
					    u_xlat15 = (-_Glossiness) + 1.0;
					    u_xlat6.x = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat11 + 1.0;
					    u_xlat11 = u_xlat10 * 3.14159274;
					    u_xlat10 = u_xlat11 * u_xlat10 + 1.00000001e-07;
					    u_xlat11 = u_xlat6.x * u_xlat6.x;
					    u_xlat10 = u_xlat11 / u_xlat10;
					    u_xlat11 = (-u_xlat15) * u_xlat15 + 1.0;
					    u_xlat16 = u_xlat1.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat10 = u_xlat10 * u_xlat6.x;
					    u_xlat10 = u_xlat10 * 0.785398185;
					    u_xlat6.x = max(u_xlat10, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10 = (u_xlatb11) ? u_xlat6.x : u_xlat10;
					    u_xlat10 = u_xlat0.x * u_xlat10;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat6.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat10 = (-u_xlat0.y) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat10 = u_xlat0.y + u_xlat0.y;
					    u_xlat5 = u_xlat0.y * u_xlat10;
					    u_xlat5 = u_xlat5 * u_xlat15 + -0.5;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat1.x * u_xlat10;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat10 * u_xlat5;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat15 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c7, 0.5, 0, 1, 0.00100000005
					    def c8, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c7.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c8.y
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c7.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c7.y
					    max_pp r0.x, r1.y, c7.y
					    max_pp r1.y, r0.w, c7.y
					    mul r0.y, r1.y, r1.y
					    mov r0.z, c7.z
					    add_pp r0.z, r0.z, -c6.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c7.z
					    mad_pp r0.y, r0.y, r1.y, c7.z
					    mul r1.y, r0.y, c8.z
					    mad r0.y, r1.y, r0.y, c8.w
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c7.z
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c7.z
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c8.y
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c9.x, c9.y
					    mul_pp r0.y, r0.y, c9.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c9.z, r1.y
					    abs r1.y, c2.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c7.y
					    rcp r0.y, v5.w
					    mad r0.yw, v5.xxzy, r0.y, c7.x
					    texld_pp r2, r0.ywzw, s1
					    dp3 r0.y, v5, v5
					    texld_pp r3, r0.y, s2
					    mul r0.y, r2.w, r3.x
					    mul_pp r2.xyz, r0.y, c3
					    cmp_pp r2.xyz, -v5.z, c7.y, r2
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c7.z
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c1
					    mad_pp r6.xyz, c4, r4, -r5
					    mul_pp r4.xyz, r4, c4
					    mad_pp r5.xyz, c5.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c7.z, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, -c7.x
					    mad_pp r0.y, r0.x, r0.y, c7.z
					    add_pp r0.z, -r1.z, c7.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c5.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r0, r3
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.z
					
					// approximately 103 instruction slots used (3 texture, 100 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xy);
					    u_xlatb7 = 0.0<vs_TEXCOORD5.z;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat2.w * u_xlat7.x;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c7.w
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c8.x
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c8.x
					    max_pp r0.x, r1.y, c8.x
					    max_pp r1.y, r0.w, c8.x
					    mul r0.y, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.z, r2.x, -c6.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c7.x
					    mad_pp r0.y, r0.y, r1.y, c7.x
					    mul r1.y, r0.y, c8.y
					    mad r0.y, r1.y, r0.y, c8.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c7.x
					    mad_pp r1.w, r1.x, r1.y, r0.w
					    mad_pp r0.w, r1.z, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r0.w, r1.z, r1.w, r0.w
					    add r0.w, r0.w, c7.w
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c9.x, c9.y
					    mul_pp r0.y, r0.y, c9.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c9.z, r1.y
					    abs r1.y, c2.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c8.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s2
					    texld r3, v5, s1
					    mul_pp r0.y, r2.x, r3.w
					    mul_pp r2.xyz, r0.y, c3
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c7.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c8.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c1
					    mad_pp r6.xyz, c4, r4, -r5
					    mul_pp r4.xyz, r4, c4
					    mad_pp r5.xyz, c5.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c7.x, r5
					    mul_pp r0.yzw, r3.xxyz, r6.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c7.x
					    add_pp r1.y, -r1.z, c7.x
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r0.x, r0.x, r1.y, c7.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r1.xyz, r0.x, r2
					    mad_pp r0.x, c5.x, -r5.w, r5.w
					    mul_pp r2.xyz, r0.x, r4
					    mad_pp r0.xyz, r2, r1, r0.yzww
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 100 instruction slots used (3 texture, 97 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c7.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c7.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c7.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c8.x
					    max_pp r0.y, r2.x, c8.x
					    max_pp r0.z, r1.w, c8.x
					    max_pp r1.y, r0.x, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.w, r2.x, -c6.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c7.x
					    mad_pp r0.x, r0.x, r1.z, c7.x
					    mul r1.z, r0.x, c8.y
					    mad r0.x, r1.z, r0.x, c8.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c7.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c7.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c9.x, c9.y
					    mul_pp r0.x, r0.x, c9.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c9.z, r1.z
					    abs r1.z, c2.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c8.x
					    texld_pp r2, v5, s1
					    mul_pp r2.xyz, r2.w, c3
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c7.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c8.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c1
					    mad_pp r5.xyz, c4, r3, -r4
					    mul_pp r3.xyz, r3, c4
					    mad_pp r4.xyz, c5.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c7.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c7.x
					    add_pp r0.w, -r0.y, c7.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c7.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp r0.xyz, r2, r0, r1.yzww
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 94 instruction slots used (2 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_FogParams                c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 0.5, 0, 1, 0.00100000005
					    def c9, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c10, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c8.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c9.y
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c8.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c8.y
					    max_pp r0.x, r1.y, c8.y
					    max_pp r1.y, r0.w, c8.y
					    mul r0.y, r1.y, r1.y
					    mov r0.z, c8.z
					    add_pp r0.w, r0.z, -c7.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.w, r1.y, r1.y, -c8.z
					    mad_pp r0.y, r0.y, r1.w, c8.z
					    mul r1.w, r0.y, c9.z
					    mad r0.y, r1.w, r0.y, c9.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.w, -r0.w, c8.z
					    mad_pp r2.x, r1.x, r1.w, r1.y
					    mad_pp r1.y, r1.z, r1.w, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c8.z
					    mad r1.y, r1.z, r2.x, r1.y
					    add r1.y, r1.y, c9.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.y, r0.y, r1.y
					    mad r1.y, r0.y, -c10.x, c10.y
					    mul_pp r0.y, r0.y, c10.x
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c10.z, r1.w
					    abs r1.w, c3.w
					    cmp_pp r0.y, -r1.w, r1.y, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.y, r0.y, c8.y
					    rcp r0.y, v5.w
					    mad r2.xy, v5, r0.y, c8.x
					    texld_pp r2, r2, s2
					    dp3 r0.y, v5, v5
					    texld_pp r3, r0.y, s3
					    mul r0.y, r2.w, r3.x
					    cmp r0.y, -v5.z, c8.y, r0.y
					    texldp_pp r2, v6, s1
					    lrp_pp r1.w, r2.x, r0.z, c0.x
					    mul_pp r0.y, r0.y, r1.w
					    mul_pp r2.xyz, r0.y, c4
					    mul_pp r3.xyz, r1.y, r2
					    add_pp r0.y, -r0.x, c8.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    texld r4, v0, s0
					    mov r5, c2
					    mad_pp r6.xyz, c5, r4, -r5
					    mul_pp r4.xyz, r4, c5
					    mad_pp r5.xyz, c6.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c8.z, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.z, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.z
					    mad_pp r0.x, r0.x, r0.w, -c8.x
					    mad_pp r0.y, r0.x, r0.y, c8.z
					    add_pp r0.z, -r1.z, c8.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c6.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r0, r3
					    mul r0.w, c1.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c8.z
					
					// approximately 106 instruction slots used (4 texture, 102 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat19 = u_xlat1.y + u_xlat1.y;
					    u_xlat7 = u_xlat1.y * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + -0.5;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c7.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c7.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c7.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c8.x
					    max_pp r0.y, r2.x, c8.x
					    max_pp r0.z, r1.w, c8.x
					    max_pp r1.y, r0.x, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.w, r2.x, -c6.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c7.x
					    mad_pp r0.x, r0.x, r1.z, c7.x
					    mul r1.z, r0.x, c8.y
					    mad r0.x, r1.z, r0.x, c8.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c7.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c7.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c9.x, c9.y
					    mul_pp r0.x, r0.x, c9.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c9.z, r1.z
					    abs r1.z, c2.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c8.x
					    texldp_pp r2, v5, s1
					    mul_pp r2.xyz, r2.x, c3
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c7.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c8.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c1
					    mad_pp r5.xyz, c4, r3, -r4
					    mul_pp r3.xyz, r3, c4
					    mad_pp r4.xyz, c5.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c7.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c7.x
					    add_pp r0.w, -r0.y, c7.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c7.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp r0.xyz, r2, r0, r1.yzww
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 94 instruction slots used (2 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3_pp r0.x, v1, v1
					    rsq_pp r0.x, r0.x
					    mul_pp r0.yzw, r0.x, v1.xxyz
					    nrm_pp r1.xyz, v4
					    dp3_pp r1.w, r1, -r0.yzww
					    add r2.x, -r1.w, c7.w
					    mad_pp r2.xyz, -r0.yzww, r2.x, r1
					    cmp_pp r1.xyz, r1.w, r1, r2
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    mad_pp r3.xyz, v1, -r0.x, r2
					    dp3_pp r0.x, r3, r3
					    add r1.w, -r0.x, c7.y
					    rsq_pp r0.x, r0.x
					    cmp_pp r0.x, r1.w, c7.z, r0.x
					    mul_pp r3.xyz, r0.x, r3
					    dp3_pp r0.x, r1, r3
					    dp3_pp r1.w, r2, r3
					    dp3_pp r2.x, r1, r2
					    dp3_pp r0.y, r1, -r0.yzww
					    max_pp r1.x, r0.y, c8.x
					    max_pp r0.y, r2.x, c8.x
					    max_pp r0.z, r1.w, c8.x
					    max_pp r1.y, r0.x, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c7.x
					    add_pp r0.w, r2.x, -c6.x
					    mul_pp r1.y, r0.w, r0.w
					    mad r1.z, r1.y, r1.y, -c7.x
					    mad_pp r0.x, r0.x, r1.z, c7.x
					    mul r1.z, r0.x, c8.y
					    mad r0.x, r1.z, r0.x, c8.z
					    rcp r0.x, r0.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.x, r0.x, r1.z
					    mad_pp r1.z, r0.w, -r0.w, c7.x
					    mad_pp r1.w, r1.x, r1.z, r1.y
					    mad_pp r1.y, r0.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r1.x
					    add_pp r1.x, -r1.x, c7.x
					    mad r1.y, r0.y, r1.w, r1.y
					    add r1.y, r1.y, c7.w
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    mad r1.y, r0.x, -c9.x, c9.y
					    mul_pp r0.x, r0.x, c9.x
					    rsq r1.z, r0.x
					    rcp_pp r1.z, r1.z
					    cmp_pp r1.y, r1.y, c9.z, r1.z
					    abs r1.z, c2.w
					    cmp_pp r0.x, -r1.z, r1.y, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    max_pp r1.y, r0.x, c8.x
					    texld r2, v5, s2
					    texldp_pp r3, v6, s1
					    mul_pp r0.x, r2.w, r3.x
					    mul_pp r2.xyz, r0.x, c3
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    add_pp r0.x, -r0.z, c7.x
					    mul_pp r0.z, r0.z, r0.z
					    dp2add_pp r0.z, r0.z, r0.w, c8.w
					    mul_pp r0.w, r0.x, r0.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.w
					    texld r3, v0, s0
					    mov r4, c1
					    mad_pp r5.xyz, c4, r3, -r4
					    mul_pp r3.xyz, r3, c4
					    mad_pp r4.xyz, c5.x, r5, r4
					    lrp_pp r5.xyz, r0.x, c7.x, r4
					    mul_pp r1.yzw, r1, r5.xxyz
					    mul_pp r0.x, r1.x, r1.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mad_pp r0.x, r0.z, r0.x, c7.x
					    add_pp r0.w, -r0.y, c7.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r0.z, r0.z, r0.w, c7.x
					    mul_pp r0.x, r0.x, r0.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.w, r3
					    mad_pp r0.xyz, r2, r0, r1.yzww
					    mul r0.w, c0.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 96 instruction slots used (3 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c9, 0.970000029, 1, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c11, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c10.x
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c10.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c10.y
					    max_pp r0.x, r1.y, c10.y
					    max_pp r1.y, r0.w, c10.y
					    mul r0.y, r1.y, r1.y
					    mov r1.y, c9.y
					    add_pp r0.z, r1.y, -c8.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.w, r0.w, r0.w, -c9.y
					    mad_pp r0.y, r0.y, r1.w, c9.y
					    mul r1.w, r0.y, c10.z
					    mad r0.y, r1.w, r0.y, c10.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c9.y
					    mad_pp r2.x, r1.x, r1.w, r0.w
					    mad_pp r0.w, r1.z, r1.w, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c9.y
					    mad r0.w, r1.z, r2.x, r0.w
					    add r0.w, r0.w, c10.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c11.y, c11.z
					    mul_pp r0.y, r0.y, c11.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, c11.w, r1.w
					    abs r1.w, c4.w
					    cmp_pp r0.y, -r1.w, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.w, r0.y, c10.y
					    dp3 r0.y, v6, v6
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c0.w
					    texld r2, v6, s1
					    mad r0.y, r0.y, -c9.x, r2.x
					    cmp_pp r0.y, r0.y, r1.y, c1.x
					    dp3 r0.w, v5, v5
					    texld r2, r0.w, s2
					    mul_pp r0.y, r0.y, r2.x
					    mul_pp r2.xyz, r0.y, c5
					    mul_pp r3.xyz, r1.w, r2
					    add_pp r0.y, -r0.x, c9.y
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c3
					    mad_pp r6.xyz, c6, r4, -r5
					    mul_pp r4.xyz, r4, c6
					    mad_pp r5.xyz, c7.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c9.y, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, c11.x
					    mad_pp r0.y, r0.x, r0.y, c9.y
					    add_pp r0.z, -r1.z, c9.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c9.y
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c7.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r0, r3
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.y
					
					// approximately 106 instruction slots used (3 texture, 103 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c9, 0.970000029, 1, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c11, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov_pp r0.x, v2.w
					    mov_pp r0.y, v3.w
					    mov_pp r0.z, v4.w
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    nrm_pp r1.xyz, v1
					    mad_pp r2.xyz, r0, r0.w, -r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v4
					    dp3_pp r0.w, r3, -r1
					    add r1.w, -r0.w, c10.x
					    mad_pp r4.xyz, -r1, r1.w, r3
					    cmp_pp r3.xyz, r0.w, r3, r4
					    dp3_pp r0.w, r3, -r1
					    max_pp r1.x, r0.w, c10.y
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.y, r0, r2
					    dp3_pp r0.x, r3, r0
					    max_pp r1.z, r0.x, c10.y
					    max_pp r0.x, r1.y, c10.y
					    max_pp r1.y, r0.w, c10.y
					    mul r0.y, r1.y, r1.y
					    mov r1.y, c9.y
					    add_pp r0.z, r1.y, -c8.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.w, r0.w, r0.w, -c9.y
					    mad_pp r0.y, r0.y, r1.w, c9.y
					    mul r1.w, r0.y, c10.z
					    mad r0.y, r1.w, r0.y, c10.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c9.y
					    mad_pp r2.x, r1.x, r1.w, r0.w
					    mad_pp r0.w, r1.z, r1.w, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c9.y
					    mad r0.w, r1.z, r2.x, r0.w
					    add r0.w, r0.w, c10.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c11.y, c11.z
					    mul_pp r0.y, r0.y, c11.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, c11.w, r1.w
					    abs r1.w, c4.w
					    cmp_pp r0.y, -r1.w, r0.w, r0.y
					    mul_pp r0.y, r1.z, r0.y
					    max_pp r1.w, r0.y, c10.y
					    dp3 r0.y, v6, v6
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c0.w
					    texld r2, v6, s1
					    mad r0.y, r0.y, -c9.x, r2.x
					    cmp_pp r0.y, r0.y, r1.y, c1.x
					    dp3 r0.w, v5, v5
					    texld r2, r0.w, s3
					    texld r3, v5, s2
					    mul r0.w, r2.x, r3.w
					    mul_pp r0.y, r0.y, r0.w
					    mul_pp r2.xyz, r0.y, c5
					    mul_pp r3.xyz, r1.w, r2
					    add_pp r0.y, -r0.x, c9.y
					    mul_pp r0.w, r0.y, r0.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.y, r0.y, r0.w
					    texld r4, v0, s0
					    mov r5, c3
					    mad_pp r6.xyz, c6, r4, -r5
					    mul_pp r4.xyz, r4, c6
					    mad_pp r5.xyz, c7.x, r6, r5
					    lrp_pp r6.xyz, r0.y, c9.y, r5
					    mul_pp r3.xyz, r3, r6
					    mul_pp r0.y, r1.x, r1.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.y, r1.x, r0.y
					    add_pp r0.w, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.x, r0.x, r0.z, c11.x
					    mad_pp r0.y, r0.x, r0.y, c9.y
					    add_pp r0.z, -r1.z, c9.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.x, r0.x, r0.z, c9.y
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.x, r1.z, r0.x
					    mul_pp r0.xyz, r0.x, r2
					    mad_pp r0.w, c7.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r0, r3
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.y
					
					// approximately 108 instruction slots used (4 texture, 104 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat13 = u_xlat2.x * u_xlat3.w;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   _LightShadowData               c4       1
					//   unity_FogParams                c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   unity_ColorSpaceLuminance      c7       1
					//   _LightColor0                   c8       1
					//   _Color                         c9       1
					//   _Metallic                      c10      1
					//   _Glossiness                    c11      1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c12, 0.5, 0, 1, 0.25
					    def c13, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c14, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.z, c12.z
					    rcp r0.x, v6.w
					    mad r1, v6, r0.x, c0
					    texldp_pp r1, r1, s1
					    mad r2, v6, r0.x, c1
					    texldp_pp r2, r2, s1
					    mov_pp r1.y, r2.x
					    mad r2, v6, r0.x, c2
					    mad r3, v6, r0.x, c3
					    texldp_pp r3, r3, s1
					    mov_pp r1.w, r3.x
					    texldp_pp r2, r2, s1
					    mov_pp r1.z, r2.x
					    lrp_pp r2, r1, r0.z, c4.x
					    dp4_pp r0.x, r2, c12.w
					    rcp r0.y, v5.w
					    mad r0.yw, v5.xxzy, r0.y, c12.x
					    texld_pp r1, r0.ywzw, s2
					    dp3 r0.y, v5, v5
					    texld_pp r2, r0.y, s3
					    mul r0.y, r1.w, r2.x
					    cmp r0.y, -v5.z, c12.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyw, r0.x, c8.xyzz
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r1.w, r1, r1
					    rsq_pp r1.w, r1.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r1.w, -r2
					    mul_pp r1.xyz, r1.w, r1
					    dp3_pp r1.w, r3, r3
					    add r2.w, -r1.w, c13.x
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r2.w, c13.y, r1.w
					    mul_pp r3.xyz, r1.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r1.w, r4, -r2
					    add r2.w, -r1.w, c13.z
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r1.w, r4, r5
					    dp3_pp r1.w, r4, -r2
					    max_pp r2.x, r1.w, c12.y
					    dp3_pp r1.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c12.y
					    max_pp r1.x, r2.y, c12.y
					    max_pp r2.y, r1.w, c12.y
					    mul r1.y, r2.y, r2.y
					    add_pp r0.z, r0.z, -c11.x
					    mul_pp r1.z, r0.z, r0.z
					    mad r1.w, r1.z, r1.z, -c12.z
					    mad_pp r1.y, r1.y, r1.w, c12.z
					    mul r1.w, r1.y, c13.w
					    mad r1.y, r1.w, r1.y, c14.x
					    rcp r1.y, r1.y
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r1.w, r0.z, -r0.z, c12.z
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c12.z
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c13.z
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r1.y, r1.y, r1.z
					    mad r1.z, r1.y, -c14.y, c14.z
					    mul_pp r1.y, r1.y, c14.y
					    rsq r2.x, r1.y
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c14.w, r2.x
					    abs r2.x, c7.w
					    cmp_pp r1.y, -r2.x, r1.z, r1.y
					    mul_pp r1.y, r2.z, r1.y
					    max_pp r2.x, r1.y, c12.y
					    mul_pp r2.xyw, r0, r2.x
					    add_pp r1.y, -r1.x, c12.z
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    texld r3, v0, s0
					    mov r4, c6
					    mad_pp r5.xyz, c9, r3, -r4
					    mul_pp r3.xyz, r3, c9
					    mad_pp r4.xyz, c10.x, r5, r4
					    lrp_pp r5.xyz, r1.y, c12.z, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r1.y, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.y
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.xy, r1.xwzw, r1.zyzw
					    mad_pp r0.z, r1.x, r0.z, -c12.x
					    mad_pp r1.x, r0.z, r1.y, c12.z
					    add_pp r1.y, -r2.z, c12.z
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.z, r0.z, r1.y, c12.z
					    mul_pp r0.z, r1.x, r0.z
					    mul_pp r0.z, r2.z, r0.z
					    mul_pp r0.xyz, r0.z, r0.xyww
					    mad_pp r0.w, c10.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp r0.xyz, r1, r0, r2.xyww
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c12.z
					
					// approximately 117 instruction slots used (7 texture, 110 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
						vec4 _ShadowOffsets0;
						vec4 _ShadowOffsets1;
						vec4 _ShadowOffsets2;
						vec4 _ShadowOffsets3;
						vec4 unused_0_15[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = (-_LightShadowData.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets0.xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets1.xyz;
					    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets3.xyz;
					    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c9, 0.0078125, -0.0078125, 0.970000029, 1
					    def c10, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c11, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    dp3 r0.x, v6, v6
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c0.w
					    add r0.yzw, c9.x, v6.xxyz
					    texld r1, r0.yzww, s1
					    add r0.yzw, c9.xyyx, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.y, r2.x
					    add r0.yzw, c9.xyxy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.z, r2.x
					    add r0.yzw, c9.xxyy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.w, r2.x
					    mad r0, r0.x, -c9.z, r1
					    mov r1.w, c9.w
					    cmp_pp r0, r0, r1.w, c1.x
					    dp4_pp r0.x, r0, c10.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s2
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c5
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r0.w, r1, r1
					    rsq_pp r0.w, r0.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r0.w, -r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c10.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c10.z, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r0.w, r4, -r2
					    add r2.w, -r0.w, c10.w
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r0.w, r4, r5
					    dp3_pp r0.w, r4, -r2
					    max_pp r2.x, r0.w, c11.x
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c11.x
					    max_pp r1.x, r2.y, c11.x
					    max_pp r1.y, r0.w, c11.x
					    mul r0.w, r1.y, r1.y
					    add_pp r1.y, r1.w, -c8.x
					    mul_pp r1.z, r1.y, r1.y
					    mad r1.w, r1.z, r1.z, -c9.w
					    mad_pp r0.w, r0.w, r1.w, c9.w
					    mul r1.w, r0.w, c11.y
					    mad r0.w, r1.w, r0.w, c11.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.y, -r1.y, c9.w
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c9.w
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c10.w
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c12.x, c12.y
					    mul_pp r0.w, r0.w, c12.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c12.z, r2.x
					    abs r2.x, c4.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    max_pp r1.z, r0.w, c11.x
					    mul_pp r2.xyw, r0.xyzz, r1.z
					    add_pp r0.w, -r1.x, c9.w
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.z
					    texld r3, v0, s0
					    mov r4, c3
					    mad_pp r5.xyz, c6, r3, -r4
					    mul_pp r3.xyz, r3, c6
					    mad_pp r4.xyz, c7.x, r5, r4
					    lrp_pp r5.xyz, r0.w, c9.w, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.x, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, c11.w
					    mad_pp r0.w, r1.x, r0.w, c9.w
					    add_pp r1.y, -r2.z, c9.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c9.w
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c7.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp r0.xyz, r1, r0, r2.xyww
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.w
					
					// approximately 117 instruction slots used (6 texture, 111 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c9, 0.0078125, -0.0078125, 0.970000029, 1
					    def c10, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c11, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dp3 r0.x, v6, v6
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c0.w
					    add r0.yzw, c9.x, v6.xxyz
					    texld r1, r0.yzww, s1
					    add r0.yzw, c9.xyyx, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.y, r2.x
					    add r0.yzw, c9.xyxy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.z, r2.x
					    add r0.yzw, c9.xxyy, v6.xxyz
					    texld r2, r0.yzww, s1
					    mov r1.w, r2.x
					    mad r0, r0.x, -c9.z, r1
					    mov r1.w, c9.w
					    cmp_pp r0, r0, r1.w, c1.x
					    dp4_pp r0.x, r0, c10.x
					    dp3 r0.y, v5, v5
					    texld r2, r0.y, s3
					    texld r3, v5, s2
					    mul r0.y, r2.x, r3.w
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyz, r0.x, c5
					    mov_pp r1.x, v2.w
					    mov_pp r1.y, v3.w
					    mov_pp r1.z, v4.w
					    dp3_pp r0.w, r1, r1
					    rsq_pp r0.w, r0.w
					    nrm_pp r2.xyz, v1
					    mad_pp r3.xyz, r1, r0.w, -r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c10.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c10.z, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v4
					    dp3_pp r0.w, r4, -r2
					    add r2.w, -r0.w, c10.w
					    mad_pp r5.xyz, -r2, r2.w, r4
					    cmp_pp r4.xyz, r0.w, r4, r5
					    dp3_pp r0.w, r4, -r2
					    max_pp r2.x, r0.w, c11.x
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.y, r1, r3
					    dp3_pp r1.x, r4, r1
					    max_pp r2.z, r1.x, c11.x
					    max_pp r1.x, r2.y, c11.x
					    max_pp r1.y, r0.w, c11.x
					    mul r0.w, r1.y, r1.y
					    add_pp r1.y, r1.w, -c8.x
					    mul_pp r1.z, r1.y, r1.y
					    mad r1.w, r1.z, r1.z, -c9.w
					    mad_pp r0.w, r0.w, r1.w, c9.w
					    mul r1.w, r0.w, c11.y
					    mad r0.w, r1.w, r0.w, c11.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.y, -r1.y, c9.w
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r2.z, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c9.w
					    mad r1.z, r2.z, r2.y, r1.z
					    add r1.z, r1.z, c10.w
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c12.x, c12.y
					    mul_pp r0.w, r0.w, c12.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c12.z, r2.x
					    abs r2.x, c4.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    max_pp r1.z, r0.w, c11.x
					    mul_pp r2.xyw, r0.xyzz, r1.z
					    add_pp r0.w, -r1.x, c9.w
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.z
					    texld r3, v0, s0
					    mov r4, c3
					    mad_pp r5.xyz, c6, r3, -r4
					    mul_pp r3.xyz, r3, c6
					    mad_pp r4.xyz, c7.x, r5, r4
					    lrp_pp r5.xyz, r0.w, c9.w, r4
					    mul_pp r2.xyw, r2, r5.xyzz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.x, r1.x, r1.z
					    mad_pp r1.x, r1.x, r1.y, c11.w
					    mad_pp r0.w, r1.x, r0.w, c9.w
					    add_pp r1.y, -r2.z, c9.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c9.w
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c7.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp r0.xyz, r1, r0, r2.xyww
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.w
					
					// approximately 119 instruction slots used (7 texture, 112 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = _Color.xyz * u_xlat3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c6.w
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c7.x
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r0.w, c7.x
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c6.x
					    add_pp r2.x, r2.x, -c5.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c6.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c6.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c8.z, r2.z
					    abs r2.z, c1.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c7.x
					    dp3 r0.w, v5, v5
					    texld_pp r4, r0.w, s1
					    mul_pp r4.xyz, r4.x, c2
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c6.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c6.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, c7.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.x, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 95 instruction slots used (2 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xx);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_2d s0
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c6.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r1.w, c7.x
					    max_pp r1.w, r0.w, c7.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c6.x
					    add_pp r1.w, r4.x, -c5.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c6.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c6.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c8.z, r2.w
					    abs r2.w, c1.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r3.xzw, r0.w, c2.xyyz
					    cmp_pp r3.xzw, r0.w, r3, c7.x
					    add_pp r0.w, -r2.x, c6.x
					    mul_pp r2.y, r0.w, r0.w
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.y
					    lrp_pp r4.xyz, r0.w, c6.x, r0
					    mul_pp r0.xyz, r3.xzww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    add_pp r2.y, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r2.x, r1.w, c7.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.y, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, c2
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 90 instruction slots used (1 texture, 89 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat16) + 9.99999975e-06;
					    u_xlatb16 = u_xlat16<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = u_xlat0.z * u_xlat0.z;
					    u_xlat15 = (-_Glossiness) + 1.0;
					    u_xlat6.x = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat11 + 1.0;
					    u_xlat11 = u_xlat10 * 3.14159274;
					    u_xlat10 = u_xlat11 * u_xlat10 + 1.00000001e-07;
					    u_xlat11 = u_xlat6.x * u_xlat6.x;
					    u_xlat10 = u_xlat11 / u_xlat10;
					    u_xlat11 = (-u_xlat15) * u_xlat15 + 1.0;
					    u_xlat16 = u_xlat1.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat10 = u_xlat10 * u_xlat6.x;
					    u_xlat10 = u_xlat10 * 0.785398185;
					    u_xlat6.x = max(u_xlat10, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10 = (u_xlatb11) ? u_xlat6.x : u_xlat10;
					    u_xlat10 = u_xlat0.x * u_xlat10;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat6.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat10 = (-u_xlat0.y) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat10 = u_xlat0.y + u_xlat0.y;
					    u_xlat5 = u_xlat0.y * u_xlat10;
					    u_xlat5 = u_xlat5 * u_xlat15 + -0.5;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat1.x * u_xlat10;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat10 * u_xlat5;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.x = (-u_xlat15) + 1.0;
					    SV_Target0.w = u_xlat2.w * u_xlat15 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.5, 0, 0.00100000005
					    def c7, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c6.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.x, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c7.y
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c6.z
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c6.z
					    max_pp r3.y, r2.w, c6.z
					    max_pp r2.x, r0.w, c6.z
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c6.x
					    add_pp r2.x, r2.x, -c5.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.z
					    mad r0.w, r2.z, r0.w, c7.w
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c6.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c6.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c7.y
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c8.z, r2.z
					    abs r2.z, c1.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c6.z
					    rcp r0.w, v5.w
					    mad r2.zw, v5.xyxy, r0.w, c6.y
					    texld_pp r4, r2.zwzw, s1
					    dp3 r0.w, v5, v5
					    texld_pp r5, r0.w, s2
					    mul r0.w, r4.w, r5.x
					    mul_pp r4.xyz, r0.w, c2
					    cmp_pp r4.xyz, -v5.z, c6.z, r4
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c6.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c6.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, -c6.y
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.x, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 100 instruction slots used (3 texture, 97 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xy);
					    u_xlatb7 = 0.0<vs_TEXCOORD5.z;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat2.w * u_xlat7.x;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c6.w
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c7.x
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r0.w, c7.x
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c6.x
					    add_pp r2.x, r2.x, -c5.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c6.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c6.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c8.z, r2.z
					    abs r2.z, c1.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c7.x
					    dp3 r0.w, v5, v5
					    texld r4, r0.w, s2
					    texld r5, v5, s1
					    mul_pp r0.w, r4.x, r5.w
					    mul_pp r4.xyz, r0.w, c2
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c6.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c6.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, c7.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.x, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 97 instruction slots used (3 texture, 94 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c6.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r1.w, c7.x
					    max_pp r1.w, r0.w, c7.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c6.x
					    add_pp r1.w, r4.x, -c5.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c6.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c6.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c8.z, r2.w
					    abs r2.w, c1.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c7.x
					    texld_pp r4, v5, s1
					    mul_pp r3.xzw, r4.w, c2.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c6.x
					    mul_pp r2.y, r0.w, r0.w
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.y
					    lrp_pp r5.xyz, r0.w, c6.x, r0
					    mul_pp r0.xyz, r4, r5
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    add_pp r2.y, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r2.x, r1.w, c7.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.y, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 92 instruction slots used (2 texture, 90 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c7, 1, 0.5, 0, 0.00100000005
					    def c8, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c7.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.x, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c8.y
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c7.z
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c7.z
					    max_pp r3.y, r2.w, c7.z
					    max_pp r2.x, r0.w, c7.z
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c7.x
					    add_pp r2.y, r2.x, -c6.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c7.x
					    mad_pp r0.w, r0.w, r2.w, c7.x
					    mul r2.w, r0.w, c8.z
					    mad r0.w, r2.w, r0.w, c8.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c7.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c7.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c8.y
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c9.z, r2.w
					    abs r2.w, c2.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c7.z
					    rcp r0.w, v5.w
					    mad r3.zw, v5.xyxy, r0.w, c7.y
					    texld_pp r4, r3.zwzw, s2
					    dp3 r0.w, v5, v5
					    texld_pp r5, r0.w, s3
					    mul r0.w, r4.w, r5.x
					    cmp r0.w, -v5.z, c7.z, r0.w
					    texldp_pp r4, v6, s1
					    lrp_pp r3.z, r4.x, r2.x, c0.x
					    mul_pp r0.w, r0.w, r3.z
					    mul_pp r4.xyz, r0.w, c3
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c7.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.y, -c7.y
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.x, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 104 instruction slots used (4 texture, 100 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat19 = u_xlat1.y + u_xlat1.y;
					    u_xlat7 = u_xlat1.y * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + -0.5;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c6.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r1.w, c7.x
					    max_pp r1.w, r0.w, c7.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c6.x
					    add_pp r1.w, r4.x, -c5.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c6.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c6.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c8.z, r2.w
					    abs r2.w, c1.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c7.x
					    texldp_pp r4, v5, s1
					    mul_pp r3.xzw, r4.x, c2.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c6.x
					    mul_pp r2.x, r2.x, r2.x
					    dp2add_pp r1.w, r2.x, r1.w, c7.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyw, r0.w, c6.x, r0.xyzz
					    mul_pp r0.xyz, r2.xyww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.y, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 92 instruction slots used (2 texture, 90 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_ColorSpaceLuminance      c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c7, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c8, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0, c0
					    mad_pp r0.w, c4.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c6.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c3
					    mad_pp r1.yzw, r2.xxyz, c3.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c4.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c6.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c6.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c7.x
					    max_pp r3.y, r2.w, c7.x
					    max_pp r2.x, r1.w, c7.x
					    max_pp r1.w, r0.w, c7.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c6.x
					    add_pp r1.w, r4.x, -c5.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c6.x
					    mad_pp r0.w, r0.w, r2.z, c6.x
					    mul r2.z, r0.w, c7.y
					    mad r0.w, r2.z, r0.w, c7.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c6.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c6.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c6.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c8.x, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c8.z, r2.w
					    abs r2.w, c1.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c7.x
					    texld r4, v5, s2
					    texldp_pp r5, v6, s1
					    mul_pp r0.w, r4.w, r5.x
					    mul_pp r3.xzw, r0.w, c2.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c6.x
					    mul_pp r2.x, r2.x, r2.x
					    dp2add_pp r1.w, r2.x, r1.w, c7.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyw, r0.w, c6.x, r0.xyzz
					    mul_pp r0.xyz, r2.xyww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    mad_pp r0.w, r1.w, r0.w, c6.x
					    add_pp r2.x, -r3.y, c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c6.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 94 instruction slots used (3 texture, 91 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c8, 1, 0.970000029, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c10, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c2
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c8.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c5
					    mad_pp r1.yzw, r2.xxyz, c5.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c6.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c9.x
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c9.y
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c9.y
					    max_pp r3.y, r2.w, c9.y
					    max_pp r2.x, r0.w, c9.y
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c8.x
					    add_pp r2.y, r2.x, -c7.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c8.x
					    mad_pp r0.w, r0.w, r2.w, c8.x
					    mul r2.w, r0.w, c9.z
					    mad r0.w, r2.w, r0.w, c9.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c8.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c8.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c9.x
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c10.y, c10.z
					    mul_pp r0.w, r0.w, c10.y
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c10.w, r2.w
					    abs r2.w, c3.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c9.y
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    texld r4, v6, s1
					    mad r0.w, r0.w, -c8.y, r4.x
					    cmp_pp r0.w, r0.w, r2.x, c1.x
					    dp3 r2.x, v5, v5
					    texld r4, r2.x, s2
					    mul_pp r0.w, r0.w, r4.x
					    mul_pp r4.xyz, r0.w, c4
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c8.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c8.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.y, c10.x
					    mad_pp r0.w, r1.w, r0.w, c8.x
					    add_pp r2.x, -r3.x, c8.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 103 instruction slots used (3 texture, 100 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 1, 0.970000029, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c10, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov r0, c2
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c8.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c5
					    mad_pp r1.yzw, r2.xxyz, c5.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c6.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c9.x
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c9.y
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c9.y
					    max_pp r3.y, r2.w, c9.y
					    max_pp r2.x, r0.w, c9.y
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c8.x
					    add_pp r2.y, r2.x, -c7.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c8.x
					    mad_pp r0.w, r0.w, r2.w, c8.x
					    mul r2.w, r0.w, c9.z
					    mad r0.w, r2.w, r0.w, c9.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c8.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c8.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c9.x
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c10.y, c10.z
					    mul_pp r0.w, r0.w, c10.y
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c10.w, r2.w
					    abs r2.w, c3.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c9.y
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    texld r4, v6, s1
					    mad r0.w, r0.w, -c8.y, r4.x
					    cmp_pp r0.w, r0.w, r2.x, c1.x
					    dp3 r2.x, v5, v5
					    texld r4, r2.x, s3
					    texld r5, v5, s2
					    mul r2.x, r4.x, r5.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r4.xyz, r0.w, c4
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c8.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c8.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.y, c10.x
					    mad_pp r0.w, r1.w, r0.w, c8.x
					    add_pp r2.x, -r3.x, c8.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 105 instruction slots used (4 texture, 101 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat13 = u_xlat2.x * u_xlat3.w;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   _LightShadowData               c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Color                         c8       1
					//   _Metallic                      c9       1
					//   _Glossiness                    c10      1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c11, 1, 0.5, 0, 0.25
					    def c12, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c13, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0, c5
					    mad_pp r0.w, c9.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c11.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c8
					    mad_pp r1.yzw, r2.xxyz, c8.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c9.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    mov r2.x, c11.x
					    rcp r0.w, v6.w
					    mad r3, v6, r0.w, c0
					    texldp_pp r3, r3, s1
					    mad r4, v6, r0.w, c1
					    texldp_pp r4, r4, s1
					    mov_pp r3.y, r4.x
					    mad r4, v6, r0.w, c2
					    mad r5, v6, r0.w, c3
					    texldp_pp r5, r5, s1
					    mov_pp r3.w, r5.x
					    texldp_pp r4, r4, s1
					    mov_pp r3.z, r4.x
					    lrp_pp r4, r3, r2.x, c4.x
					    dp4_pp r0.w, r4, c11.w
					    rcp r1.w, v5.w
					    mad r2.yz, v5.xxyw, r1.w, c11.y
					    texld_pp r3, r2.yzzw, s2
					    dp3 r1.w, v5, v5
					    texld_pp r4, r1.w, s3
					    mul r1.w, r3.w, r4.x
					    cmp r1.w, -v5.z, c11.z, r1.w
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r2.yzw, r0.w, c7.xxyz
					    mov_pp r3.x, v2.w
					    mov_pp r3.y, v3.w
					    mov_pp r3.z, v4.w
					    dp3_pp r0.w, r3, r3
					    rsq_pp r0.w, r0.w
					    nrm_pp r4.xyz, v1
					    mad_pp r5.xyz, r3, r0.w, -r4
					    mul_pp r3.xyz, r0.w, r3
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c12.x
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c12.y, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r4
					    add r1.w, -r0.w, c12.z
					    mad_pp r7.xyz, -r4, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r4
					    max_pp r1.w, r0.w, c11.z
					    dp3_pp r0.w, r6, r5
					    dp3_pp r3.w, r3, r5
					    dp3_pp r3.x, r6, r3
					    max_pp r4.x, r3.x, c11.z
					    max_pp r4.y, r3.w, c11.z
					    max_pp r3.x, r0.w, c11.z
					    mul r0.w, r3.x, r3.x
					    add_pp r2.x, r2.x, -c10.x
					    mul_pp r3.x, r2.x, r2.x
					    mad r3.y, r3.x, r3.x, -c11.x
					    mad_pp r0.w, r0.w, r3.y, c11.x
					    mul r3.y, r0.w, c12.w
					    mad r0.w, r3.y, r0.w, c13.x
					    rcp r0.w, r0.w
					    mul_pp r3.y, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.y
					    mad_pp r3.y, r2.x, -r2.x, c11.x
					    mad_pp r3.z, r1.w, r3.y, r3.x
					    mad_pp r3.x, r4.x, r3.y, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c11.x
					    mad r3.x, r4.x, r3.z, r3.x
					    add r3.x, r3.x, c12.z
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c13.y, c13.z
					    mul_pp r0.w, r0.w, c13.y
					    rsq r3.y, r0.w
					    rcp_pp r3.y, r3.y
					    cmp_pp r3.x, r3.x, c13.w, r3.y
					    abs r3.y, c6.w
					    cmp_pp r0.w, -r3.y, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c11.z
					    mul_pp r3.xyz, r2.yzww, r3.x
					    add_pp r0.w, -r4.y, c11.x
					    mul_pp r3.w, r0.w, r0.w
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r0.w, r0.w, r3.w
					    lrp_pp r5.xyz, r0.w, c11.x, r0
					    mul_pp r0.xyz, r3, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r4.y, r4.y
					    mul_pp r1.w, r4.y, r1.w
					    mad_pp r1.w, r1.w, r2.x, -c11.y
					    mad_pp r0.w, r1.w, r0.w, c11.x
					    add_pp r2.x, -r4.x, c11.x
					    mul_pp r3.x, r2.x, r2.x
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.x, r2.x, r3.x
					    mad_pp r1.w, r1.w, r2.x, c11.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2.yzww
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 116 instruction slots used (7 texture, 109 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
						vec4 _ShadowOffsets0;
						vec4 _ShadowOffsets1;
						vec4 _ShadowOffsets2;
						vec4 _ShadowOffsets3;
						vec4 unused_0_15[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = (-_LightShadowData.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets0.xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets1.xyz;
					    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets3.xyz;
					    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c8, 1, 0.0078125, -0.0078125, 0.970000029
					    def c9, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c10, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c2
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c8.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c5
					    mad_pp r1.yzw, r2.xxyz, c5.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c6.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    add r2.xyz, c8.y, v6
					    texld r2, r2, s1
					    add r3.xyz, c8.zzyw, v6
					    texld r3, r3, s1
					    mov r2.y, r3.x
					    add r3.xyz, c8.zyzw, v6
					    texld r3, r3, s1
					    mov r2.z, r3.x
					    add r3.xyz, c8.yzzw, v6
					    texld r3, r3, s1
					    mov r2.w, r3.x
					    mad r2, r0.w, -c8.w, r2
					    mov r3.x, c8.x
					    cmp_pp r2, r2, r3.x, c1.x
					    dp4_pp r0.w, r2, c9.x
					    dp3 r1.w, v5, v5
					    texld r2, r1.w, s2
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.xyz, r0.w, c4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    dp3_pp r0.w, r4, r4
					    rsq_pp r0.w, r0.w
					    nrm_pp r5.xyz, v1
					    mad_pp r3.yzw, r4.xxyz, r0.w, -r5.xxyz
					    mul_pp r4.xyz, r0.w, r4
					    dp3_pp r0.w, r3.yzww, r3.yzww
					    add r1.w, -r0.w, c9.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.z, r0.w
					    mul_pp r3.yzw, r0.w, r3
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r5
					    add r1.w, -r0.w, c9.w
					    mad_pp r7.xyz, -r5, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r5
					    max_pp r1.w, r0.w, c10.x
					    dp3_pp r0.w, r6, r3.yzww
					    dp3_pp r2.w, r4, r3.yzww
					    dp3_pp r3.y, r6, r4
					    max_pp r4.x, r3.y, c10.x
					    max_pp r3.y, r2.w, c10.x
					    max_pp r2.w, r0.w, c10.x
					    mul r0.w, r2.w, r2.w
					    add_pp r2.w, r3.x, -c7.x
					    mul_pp r3.x, r2.w, r2.w
					    mad r3.z, r3.x, r3.x, -c8.x
					    mad_pp r0.w, r0.w, r3.z, c8.x
					    mul r3.z, r0.w, c10.y
					    mad r0.w, r3.z, r0.w, c10.z
					    rcp r0.w, r0.w
					    mul_pp r3.z, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.z
					    mad_pp r3.z, r2.w, -r2.w, c8.x
					    mad_pp r3.w, r1.w, r3.z, r3.x
					    mad_pp r3.x, r4.x, r3.z, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c8.x
					    mad r3.x, r4.x, r3.w, r3.x
					    add r3.x, r3.x, c9.w
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c11.x, c11.y
					    mul_pp r0.w, r0.w, c11.x
					    rsq r3.z, r0.w
					    rcp_pp r3.z, r3.z
					    cmp_pp r3.x, r3.x, c11.z, r3.z
					    abs r3.z, c3.w
					    cmp_pp r0.w, -r3.z, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c10.x
					    mul_pp r3.xzw, r2.xyyz, r3.x
					    add_pp r0.w, -r3.y, c8.x
					    mul_pp r4.y, r0.w, r0.w
					    mul_pp r4.y, r4.y, r4.y
					    mul_pp r0.w, r0.w, r4.y
					    lrp_pp r4.yzw, r0.w, c8.x, r0.xxyz
					    mul_pp r0.xyz, r3.xzww, r4.yzww
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.w, c10.w
					    mad_pp r0.w, r1.w, r0.w, c8.x
					    add_pp r2.w, -r4.x, c8.x
					    mul_pp r3.x, r2.w, r2.w
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.w, r2.w, r3.x
					    mad_pp r1.w, r1.w, r2.w, c8.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 115 instruction slots used (6 texture, 109 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 1, 0.0078125, -0.0078125, 0.970000029
					    def c9, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c10, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov r0, c2
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c8.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c5
					    mad_pp r1.yzw, r2.xxyz, c5.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c6.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    add r2.xyz, c8.y, v6
					    texld r2, r2, s1
					    add r3.xyz, c8.zzyw, v6
					    texld r3, r3, s1
					    mov r2.y, r3.x
					    add r3.xyz, c8.zyzw, v6
					    texld r3, r3, s1
					    mov r2.z, r3.x
					    add r3.xyz, c8.yzzw, v6
					    texld r3, r3, s1
					    mov r2.w, r3.x
					    mad r2, r0.w, -c8.w, r2
					    mov r3.x, c8.x
					    cmp_pp r2, r2, r3.x, c1.x
					    dp4_pp r0.w, r2, c9.x
					    dp3 r1.w, v5, v5
					    texld r2, r1.w, s3
					    texld r4, v5, s2
					    mul r1.w, r2.x, r4.w
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r2.xyz, r0.w, c4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    dp3_pp r0.w, r4, r4
					    rsq_pp r0.w, r0.w
					    nrm_pp r5.xyz, v1
					    mad_pp r3.yzw, r4.xxyz, r0.w, -r5.xxyz
					    mul_pp r4.xyz, r0.w, r4
					    dp3_pp r0.w, r3.yzww, r3.yzww
					    add r1.w, -r0.w, c9.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.z, r0.w
					    mul_pp r3.yzw, r0.w, r3
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r5
					    add r1.w, -r0.w, c9.w
					    mad_pp r7.xyz, -r5, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r5
					    max_pp r1.w, r0.w, c10.x
					    dp3_pp r0.w, r6, r3.yzww
					    dp3_pp r2.w, r4, r3.yzww
					    dp3_pp r3.y, r6, r4
					    max_pp r4.x, r3.y, c10.x
					    max_pp r3.y, r2.w, c10.x
					    max_pp r2.w, r0.w, c10.x
					    mul r0.w, r2.w, r2.w
					    add_pp r2.w, r3.x, -c7.x
					    mul_pp r3.x, r2.w, r2.w
					    mad r3.z, r3.x, r3.x, -c8.x
					    mad_pp r0.w, r0.w, r3.z, c8.x
					    mul r3.z, r0.w, c10.y
					    mad r0.w, r3.z, r0.w, c10.z
					    rcp r0.w, r0.w
					    mul_pp r3.z, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.z
					    mad_pp r3.z, r2.w, -r2.w, c8.x
					    mad_pp r3.w, r1.w, r3.z, r3.x
					    mad_pp r3.x, r4.x, r3.z, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c8.x
					    mad r3.x, r4.x, r3.w, r3.x
					    add r3.x, r3.x, c9.w
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c11.x, c11.y
					    mul_pp r0.w, r0.w, c11.x
					    rsq r3.z, r0.w
					    rcp_pp r3.z, r3.z
					    cmp_pp r3.x, r3.x, c11.z, r3.z
					    abs r3.z, c3.w
					    cmp_pp r0.w, -r3.z, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c10.x
					    mul_pp r3.xzw, r2.xyyz, r3.x
					    add_pp r0.w, -r3.y, c8.x
					    mul_pp r4.y, r0.w, r0.w
					    mul_pp r4.y, r4.y, r4.y
					    mul_pp r0.w, r0.w, r4.y
					    lrp_pp r4.yzw, r0.w, c8.x, r0.xxyz
					    mul_pp r0.xyz, r3.xzww, r4.yzww
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.w, c10.w
					    mad_pp r0.w, r1.w, r0.w, c8.x
					    add_pp r2.w, -r4.x, c8.x
					    mul_pp r3.x, r2.w, r2.w
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.w, r2.w, r3.x
					    mad_pp r1.w, r1.w, r2.w, c8.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r2, r0
					
					// approximately 117 instruction slots used (7 texture, 110 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c7.w
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c8.x
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r0.w, c8.x
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c7.x
					    add_pp r2.x, r2.x, -c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c7.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c7.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c9.z, r2.z
					    abs r2.z, c2.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c8.x
					    dp3 r0.w, v5, v5
					    texld_pp r4, r0.w, s1
					    mul_pp r4.xyz, r4.x, c3
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c7.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, c8.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.x, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 99 instruction slots used (2 texture, 97 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xx);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c7.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r1.w, c8.x
					    max_pp r1.w, r0.w, c8.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c7.x
					    add_pp r1.w, r4.x, -c6.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c7.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c7.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c9.z, r2.w
					    abs r2.w, c2.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r3.xzw, r0.w, c3.xyyz
					    cmp_pp r3.xzw, r0.w, r3, c8.x
					    add_pp r0.w, -r2.x, c7.x
					    mul_pp r2.y, r0.w, r0.w
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.y
					    lrp_pp r4.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r3.xzww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    add_pp r2.y, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r2.x, r1.w, c8.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.y, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, c3
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 94 instruction slots used (1 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat16 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat16) + 9.99999975e-06;
					    u_xlatb16 = u_xlat16<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat10 = u_xlat0.z * u_xlat0.z;
					    u_xlat15 = (-_Glossiness) + 1.0;
					    u_xlat6.x = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat11 + 1.0;
					    u_xlat11 = u_xlat10 * 3.14159274;
					    u_xlat10 = u_xlat11 * u_xlat10 + 1.00000001e-07;
					    u_xlat11 = u_xlat6.x * u_xlat6.x;
					    u_xlat10 = u_xlat11 / u_xlat10;
					    u_xlat11 = (-u_xlat15) * u_xlat15 + 1.0;
					    u_xlat16 = u_xlat1.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
					    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
					    u_xlat6.x = 2.0 / u_xlat6.x;
					    u_xlat10 = u_xlat10 * u_xlat6.x;
					    u_xlat10 = u_xlat10 * 0.785398185;
					    u_xlat6.x = max(u_xlat10, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10 = (u_xlatb11) ? u_xlat6.x : u_xlat10;
					    u_xlat10 = u_xlat0.x * u_xlat10;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat6.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat10 = (-u_xlat0.y) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
					    u_xlat10 = u_xlat0.y + u_xlat0.y;
					    u_xlat5 = u_xlat0.y * u_xlat10;
					    u_xlat5 = u_xlat5 * u_xlat15 + -0.5;
					    u_xlat10 = u_xlat1.x * u_xlat1.x;
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat1.x * u_xlat10;
					    u_xlat10 = u_xlat5 * u_xlat10 + 1.0;
					    u_xlat15 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
					    u_xlat5 = u_xlat10 * u_xlat5;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat15) + 1.0;
					    SV_Target0.w = u_xlat2.w * u_xlat15 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c7, 1, 0.5, 0, 0.00100000005
					    def c8, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c7.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.x, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c8.y
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c7.z
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c7.z
					    max_pp r3.y, r2.w, c7.z
					    max_pp r2.x, r0.w, c7.z
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c7.x
					    add_pp r2.x, r2.x, -c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.z
					    mad r0.w, r2.z, r0.w, c8.w
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c7.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c7.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c8.y
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c9.z, r2.z
					    abs r2.z, c2.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c7.z
					    rcp r0.w, v5.w
					    mad r2.zw, v5.xyxy, r0.w, c7.y
					    texld_pp r4, r2.zwzw, s1
					    dp3 r0.w, v5, v5
					    texld_pp r5, r0.w, s2
					    mul r0.w, r4.w, r5.x
					    mul_pp r4.xyz, r0.w, c3
					    cmp_pp r4.xyz, -v5.z, c7.z, r4
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c7.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, -c7.y
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.x, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 104 instruction slots used (3 texture, 101 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat7.xy);
					    u_xlatb7 = 0.0<vs_TEXCOORD5.z;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat2.w * u_xlat7.x;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c7.w
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c8.x
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r0.w, c8.x
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c7.x
					    add_pp r2.x, r2.x, -c6.x
					    mul_pp r2.y, r2.x, r2.x
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r2.x, -r2.x, c7.x
					    mad_pp r2.w, r1.w, r2.z, r2.y
					    mad_pp r2.y, r3.x, r2.z, r2.y
					    mul_pp r2.y, r1.w, r2.y
					    add_pp r1.w, -r1.w, c7.x
					    mad r2.y, r3.x, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.z, r0.w
					    rcp_pp r2.z, r2.z
					    cmp_pp r2.y, r2.y, c9.z, r2.z
					    abs r2.z, c2.w
					    cmp_pp r0.w, -r2.z, r2.y, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.y, r0.w, c8.x
					    dp3 r0.w, v5, v5
					    texld r4, r0.w, s2
					    texld r5, v5, s1
					    mul_pp r0.w, r4.x, r5.w
					    mul_pp r4.xyz, r0.w, c3
					    mul_pp r2.yzw, r2.y, r4.xxyz
					    add_pp r0.w, -r3.y, c7.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r2.yzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.x, c8.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.x, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 101 instruction slots used (3 texture, 98 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat7.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c7.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r1.w, c8.x
					    max_pp r1.w, r0.w, c8.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c7.x
					    add_pp r1.w, r4.x, -c6.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c7.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c7.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c9.z, r2.w
					    abs r2.w, c2.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c8.x
					    texld_pp r4, v5, s1
					    mul_pp r3.xzw, r4.w, c3.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c7.x
					    mul_pp r2.y, r0.w, r0.w
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.y
					    lrp_pp r5.xyz, r0.w, c7.x, r0
					    mul_pp r0.xyz, r4, r5
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    add_pp r2.y, r2.x, r2.x
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r2.x, r1.w, c8.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.y, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 96 instruction slots used (2 texture, 94 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_FogParams                c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c8, 1, 0.5, 0, 0.00100000005
					    def c9, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c10, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0, c2
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c8.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c5
					    mad_pp r1.yzw, r2.xxyz, c5.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c6.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c8.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.x, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c9.y
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c8.z
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c8.z
					    max_pp r3.y, r2.w, c8.z
					    max_pp r2.x, r0.w, c8.z
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c8.x
					    add_pp r2.y, r2.x, -c7.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c8.x
					    mad_pp r0.w, r0.w, r2.w, c8.x
					    mul r2.w, r0.w, c9.z
					    mad r0.w, r2.w, r0.w, c9.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c8.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c8.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c9.y
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c10.x, c10.y
					    mul_pp r0.w, r0.w, c10.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c10.z, r2.w
					    abs r2.w, c3.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c8.z
					    rcp r0.w, v5.w
					    mad r3.zw, v5.xyxy, r0.w, c8.y
					    texld_pp r4, r3.zwzw, s2
					    dp3 r0.w, v5, v5
					    texld_pp r5, r0.w, s3
					    mul r0.w, r4.w, r5.x
					    cmp r0.w, -v5.z, c8.z, r0.w
					    texldp_pp r4, v6, s1
					    lrp_pp r3.z, r4.x, r2.x, c0.x
					    mul_pp r0.w, r0.w, r3.z
					    mul_pp r4.xyz, r0.w, c4
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c8.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c8.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.y, -c8.y
					    mad_pp r0.w, r1.w, r0.w, c8.x
					    add_pp r2.x, -r3.x, c8.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c1.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 108 instruction slots used (4 texture, 104 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat20 = u_xlat18 * u_xlat18;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat19 = u_xlat1.y + u_xlat1.y;
					    u_xlat7 = u_xlat1.y * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + -0.5;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c7.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r1.w, c8.x
					    max_pp r1.w, r0.w, c8.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c7.x
					    add_pp r1.w, r4.x, -c6.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c7.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c7.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c9.z, r2.w
					    abs r2.w, c2.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c8.x
					    texldp_pp r4, v5, s1
					    mul_pp r3.xzw, r4.x, c3.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c7.x
					    mul_pp r2.x, r2.x, r2.x
					    dp2add_pp r1.w, r2.x, r1.w, c8.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyw, r0.w, c7.x, r0.xyzz
					    mul_pp r0.xyz, r2.xyww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.y, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 96 instruction slots used (2 texture, 94 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_FogParams                c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   unity_ColorSpaceLuminance      c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c7, 1, 0.00100000005, 31.622776, 9.99999975e-006
					    def c8, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c9, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xy
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0, c1
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c7.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c4
					    mad_pp r1.yzw, r2.xxyz, c4.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c5.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3_pp r0.w, v1, v1
					    rsq_pp r0.w, r0.w
					    mul_pp r2.xyz, r0.w, v1
					    nrm_pp r3.xyz, v4
					    dp3_pp r1.w, r3, -r2
					    add r2.w, -r1.w, c7.w
					    mad_pp r4.xyz, -r2, r2.w, r3
					    cmp_pp r3.xyz, r1.w, r3, r4
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    mad_pp r5.xyz, v1, -r0.w, r4
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c7.z, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    dp3_pp r0.w, r3, r5
					    dp3_pp r1.w, r4, r5
					    dp3_pp r2.w, r3, r4
					    dp3_pp r2.x, r3, -r2
					    max_pp r3.x, r2.x, c8.x
					    max_pp r3.y, r2.w, c8.x
					    max_pp r2.x, r1.w, c8.x
					    max_pp r1.w, r0.w, c8.x
					    mul r0.w, r1.w, r1.w
					    mov r4.x, c7.x
					    add_pp r1.w, r4.x, -c6.x
					    mul_pp r2.y, r1.w, r1.w
					    mad r2.z, r2.y, r2.y, -c7.x
					    mad_pp r0.w, r0.w, r2.z, c7.x
					    mul r2.z, r0.w, c8.y
					    mad r0.w, r2.z, r0.w, c8.z
					    rcp r0.w, r0.w
					    mul_pp r2.z, r2.y, r2.y
					    mul_pp r0.w, r0.w, r2.z
					    mad_pp r2.z, r1.w, -r1.w, c7.x
					    mad_pp r2.w, r3.x, r2.z, r2.y
					    mad_pp r2.y, r3.y, r2.z, r2.y
					    mul_pp r2.y, r2.y, r3.x
					    add_pp r2.z, -r3.x, c7.x
					    mad r2.y, r3.y, r2.w, r2.y
					    add r2.y, r2.y, c7.w
					    rcp r2.y, r2.y
					    add_pp r2.y, r2.y, r2.y
					    mul r0.w, r0.w, r2.y
					    mad r2.y, r0.w, -c9.x, c9.y
					    mul_pp r0.w, r0.w, c9.x
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, c9.z, r2.w
					    abs r2.w, c2.w
					    cmp_pp r0.w, -r2.w, r2.y, r0.w
					    mul_pp r0.w, r3.y, r0.w
					    max_pp r2.y, r0.w, c8.x
					    texld r4, v5, s2
					    texldp_pp r5, v6, s1
					    mul_pp r0.w, r4.w, r5.x
					    mul_pp r3.xzw, r0.w, c3.xyyz
					    mul_pp r4.xyz, r2.y, r3.xzww
					    add_pp r0.w, -r2.x, c7.x
					    mul_pp r2.x, r2.x, r2.x
					    dp2add_pp r1.w, r2.x, r1.w, c8.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyw, r0.w, c7.x, r0.xyzz
					    mul_pp r0.xyz, r2.xyww, r4
					    mul_pp r0.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r2.z, r0.w
					    mad_pp r0.w, r1.w, r0.w, c7.x
					    add_pp r2.x, -r3.y, c7.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.y, r0.w
					    mul_pp r2.xyz, r0.w, r3.xzww
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c0.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 98 instruction slots used (3 texture, 95 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat19 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat2.x = (-u_xlat19) + 9.99999975e-06;
					    u_xlatb19 = u_xlat19<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * u_xlat2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat7.x = u_xlat2.x * u_xlat3.w;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c9, 1, 0.970000029, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c11, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c3
					    mad_pp r0.w, c7.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c9.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c6
					    mad_pp r1.yzw, r2.xxyz, c6.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c7.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c10.x
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c10.y
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c10.y
					    max_pp r3.y, r2.w, c10.y
					    max_pp r2.x, r0.w, c10.y
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c9.x
					    add_pp r2.y, r2.x, -c8.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c9.x
					    mad_pp r0.w, r0.w, r2.w, c9.x
					    mul r2.w, r0.w, c10.z
					    mad r0.w, r2.w, r0.w, c10.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c9.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c9.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c10.x
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c11.y, c11.z
					    mul_pp r0.w, r0.w, c11.y
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c11.w, r2.w
					    abs r2.w, c4.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c10.y
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    texld r4, v6, s1
					    mad r0.w, r0.w, -c9.y, r4.x
					    cmp_pp r0.w, r0.w, r2.x, c1.x
					    dp3 r2.x, v5, v5
					    texld r4, r2.x, s2
					    mul_pp r0.w, r0.w, r4.x
					    mul_pp r4.xyz, r0.w, c5
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c9.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c9.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.y, c11.x
					    mad_pp r0.w, r1.w, r0.w, c9.x
					    add_pp r2.x, -r3.x, c9.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 107 instruction slots used (3 texture, 104 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c9, 1, 0.970000029, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 0, 3.14159274, 1.00000001e-007
					    def c11, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov r0, c3
					    mad_pp r0.w, c7.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c9.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c6
					    mad_pp r1.yzw, r2.xxyz, c6.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c7.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mov_pp r2.x, v2.w
					    mov_pp r2.y, v3.w
					    mov_pp r2.z, v4.w
					    dp3_pp r0.w, r2, r2
					    rsq_pp r0.w, r0.w
					    nrm_pp r3.xyz, v1
					    mad_pp r4.xyz, r2, r0.w, -r3
					    mul_pp r2.xyz, r0.w, r2
					    dp3_pp r0.w, r4, r4
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r4.xyz, r0.w, r4
					    nrm_pp r5.xyz, v4
					    dp3_pp r0.w, r5, -r3
					    add r1.w, -r0.w, c10.x
					    mad_pp r6.xyz, -r3, r1.w, r5
					    cmp_pp r5.xyz, r0.w, r5, r6
					    dp3_pp r0.w, r5, -r3
					    max_pp r1.w, r0.w, c10.y
					    dp3_pp r0.w, r5, r4
					    dp3_pp r2.w, r2, r4
					    dp3_pp r2.x, r5, r2
					    max_pp r3.x, r2.x, c10.y
					    max_pp r3.y, r2.w, c10.y
					    max_pp r2.x, r0.w, c10.y
					    mul r0.w, r2.x, r2.x
					    mov r2.x, c9.x
					    add_pp r2.y, r2.x, -c8.x
					    mul_pp r2.z, r2.y, r2.y
					    mad r2.w, r2.z, r2.z, -c9.x
					    mad_pp r0.w, r0.w, r2.w, c9.x
					    mul r2.w, r0.w, c10.z
					    mad r0.w, r2.w, r0.w, c10.w
					    rcp r0.w, r0.w
					    mul_pp r2.w, r2.z, r2.z
					    mul_pp r0.w, r0.w, r2.w
					    mad_pp r2.w, r2.y, -r2.y, c9.x
					    mad_pp r3.z, r1.w, r2.w, r2.z
					    mad_pp r2.z, r3.x, r2.w, r2.z
					    mul_pp r2.z, r1.w, r2.z
					    add_pp r1.w, -r1.w, c9.x
					    mad r2.z, r3.x, r3.z, r2.z
					    add r2.z, r2.z, c10.x
					    rcp r2.z, r2.z
					    add_pp r2.z, r2.z, r2.z
					    mul r0.w, r0.w, r2.z
					    mad r2.z, r0.w, -c11.y, c11.z
					    mul_pp r0.w, r0.w, c11.y
					    rsq r2.w, r0.w
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.z, r2.z, c11.w, r2.w
					    abs r2.w, c4.w
					    cmp_pp r0.w, -r2.w, r2.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    max_pp r2.z, r0.w, c10.y
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    texld r4, v6, s1
					    mad r0.w, r0.w, -c9.y, r4.x
					    cmp_pp r0.w, r0.w, r2.x, c1.x
					    dp3 r2.x, v5, v5
					    texld r4, r2.x, s3
					    texld r5, v5, s2
					    mul r2.x, r4.x, r5.w
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r4.xyz, r0.w, c5
					    mul_pp r2.xzw, r2.z, r4.xyyz
					    add_pp r0.w, -r3.y, c9.x
					    mul_pp r3.z, r0.w, r0.w
					    mul_pp r3.z, r3.z, r3.z
					    mul_pp r0.w, r0.w, r3.z
					    lrp_pp r5.xyz, r0.w, c9.x, r0
					    mul_pp r0.xyz, r2.xzww, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1, r1, r3.wwwy
					    mad_pp r1.w, r1.w, r2.y, c11.x
					    mad_pp r0.w, r1.w, r0.w, c9.x
					    add_pp r2.x, -r3.x, c9.x
					    mul_pp r2.y, r2.x, r2.x
					    mul_pp r2.y, r2.y, r2.y
					    mul_pp r2.x, r2.x, r2.y
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r2.xyz, r0.w, r4
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 109 instruction slots used (4 texture, 105 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat2.xyz = (-u_xlat1.xyz) * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat0.xyz, (-u_xlat1.xyz));
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.y = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat12 = u_xlat0.z * u_xlat0.z;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat13 + 1.0;
					    u_xlat13 = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat13 * u_xlat12 + 1.00000001e-07;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat12 = u_xlat13 / u_xlat12;
					    u_xlat13 = (-u_xlat18) * u_xlat18 + 1.0;
					    u_xlat19 = u_xlat1.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
					    u_xlat7.x = 2.0 / u_xlat7.x;
					    u_xlat12 = u_xlat12 * u_xlat7.x;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat7.x = max(u_xlat12, 9.99999975e-05);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb13) ? u_xlat7.x : u_xlat12;
					    u_xlat12 = u_xlat0.x * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat7.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * _LightPositionRange.w;
					    u_xlat7.x = u_xlat7.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb7 = u_xlat2.x<u_xlat7.x;
					    u_xlat7.x = (u_xlatb7) ? _LightShadowData.x : 1.0;
					    u_xlat13 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat13 = u_xlat2.x * u_xlat3.w;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat7.xyz = u_xlat7.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat7.xyz;
					    u_xlat12 = (-u_xlat0.y) + 1.0;
					    u_xlat20 = u_xlat12 * u_xlat12;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat12 = u_xlat12 * u_xlat20;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat0.y + u_xlat0.y;
					    u_xlat6 = u_xlat0.y * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + -0.5;
					    u_xlat12 = u_xlat6 * u_xlat12 + 1.0;
					    u_xlat18 = (-u_xlat0.x) + 1.0;
					    u_xlat1.x = u_xlat18 * u_xlat18;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
					    u_xlat6 = u_xlat12 * u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   _LightShadowData               c4       1
					//   unity_FogParams                c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   unity_ColorSpaceLuminance      c7       1
					//   _LightColor0                   c8       1
					//   _Color                         c9       1
					//   _Metallic                      c10      1
					//   _Glossiness                    c11      1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c12, 1, 0.5, 0, 0.25
					    def c13, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c14, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0, c6
					    mad_pp r0.w, c10.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c12.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c9
					    mad_pp r1.yzw, r2.xxyz, c9.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c10.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    mov r2.x, c12.x
					    rcp r0.w, v6.w
					    mad r3, v6, r0.w, c0
					    texldp_pp r3, r3, s1
					    mad r4, v6, r0.w, c1
					    texldp_pp r4, r4, s1
					    mov_pp r3.y, r4.x
					    mad r4, v6, r0.w, c2
					    mad r5, v6, r0.w, c3
					    texldp_pp r5, r5, s1
					    mov_pp r3.w, r5.x
					    texldp_pp r4, r4, s1
					    mov_pp r3.z, r4.x
					    lrp_pp r4, r3, r2.x, c4.x
					    dp4_pp r0.w, r4, c12.w
					    rcp r1.w, v5.w
					    mad r2.yz, v5.xxyw, r1.w, c12.y
					    texld_pp r3, r2.yzzw, s2
					    dp3 r1.w, v5, v5
					    texld_pp r4, r1.w, s3
					    mul r1.w, r3.w, r4.x
					    cmp r1.w, -v5.z, c12.z, r1.w
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r2.yzw, r0.w, c8.xxyz
					    mov_pp r3.x, v2.w
					    mov_pp r3.y, v3.w
					    mov_pp r3.z, v4.w
					    dp3_pp r0.w, r3, r3
					    rsq_pp r0.w, r0.w
					    nrm_pp r4.xyz, v1
					    mad_pp r5.xyz, r3, r0.w, -r4
					    mul_pp r3.xyz, r0.w, r3
					    dp3_pp r0.w, r5, r5
					    add r1.w, -r0.w, c13.x
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c13.y, r0.w
					    mul_pp r5.xyz, r0.w, r5
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r4
					    add r1.w, -r0.w, c13.z
					    mad_pp r7.xyz, -r4, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r4
					    max_pp r1.w, r0.w, c12.z
					    dp3_pp r0.w, r6, r5
					    dp3_pp r3.w, r3, r5
					    dp3_pp r3.x, r6, r3
					    max_pp r4.x, r3.x, c12.z
					    max_pp r4.y, r3.w, c12.z
					    max_pp r3.x, r0.w, c12.z
					    mul r0.w, r3.x, r3.x
					    add_pp r2.x, r2.x, -c11.x
					    mul_pp r3.x, r2.x, r2.x
					    mad r3.y, r3.x, r3.x, -c12.x
					    mad_pp r0.w, r0.w, r3.y, c12.x
					    mul r3.y, r0.w, c13.w
					    mad r0.w, r3.y, r0.w, c14.x
					    rcp r0.w, r0.w
					    mul_pp r3.y, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.y
					    mad_pp r3.y, r2.x, -r2.x, c12.x
					    mad_pp r3.z, r1.w, r3.y, r3.x
					    mad_pp r3.x, r4.x, r3.y, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c12.x
					    mad r3.x, r4.x, r3.z, r3.x
					    add r3.x, r3.x, c13.z
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c14.y, c14.z
					    mul_pp r0.w, r0.w, c14.y
					    rsq r3.y, r0.w
					    rcp_pp r3.y, r3.y
					    cmp_pp r3.x, r3.x, c14.w, r3.y
					    abs r3.y, c7.w
					    cmp_pp r0.w, -r3.y, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c12.z
					    mul_pp r3.xyz, r2.yzww, r3.x
					    add_pp r0.w, -r4.y, c12.x
					    mul_pp r3.w, r0.w, r0.w
					    mul_pp r3.w, r3.w, r3.w
					    mul_pp r0.w, r0.w, r3.w
					    lrp_pp r5.xyz, r0.w, c12.x, r0
					    mul_pp r0.xyz, r3, r5
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r4.y, r4.y
					    mul_pp r1.w, r4.y, r1.w
					    mad_pp r1.w, r1.w, r2.x, -c12.y
					    mad_pp r0.w, r1.w, r0.w, c12.x
					    add_pp r2.x, -r4.x, c12.x
					    mul_pp r3.x, r2.x, r2.x
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.x, r2.x, r3.x
					    mad_pp r1.w, r1.w, r2.x, c12.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2.yzww
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 120 instruction slots used (7 texture, 113 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[2];
						vec4 _ShadowOffsets0;
						vec4 _ShadowOffsets1;
						vec4 _ShadowOffsets2;
						vec4 _ShadowOffsets3;
						vec4 unused_0_15[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = (-_LightShadowData.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets0.xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets1.xyz;
					    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets3.xyz;
					    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_3_0
					    def c9, 1, 0.0078125, -0.0078125, 0.970000029
					    def c10, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c11, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    mov r0, c3
					    mad_pp r0.w, c7.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c9.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c6
					    mad_pp r1.yzw, r2.xxyz, c6.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c7.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    add r2.xyz, c9.y, v6
					    texld r2, r2, s1
					    add r3.xyz, c9.zzyw, v6
					    texld r3, r3, s1
					    mov r2.y, r3.x
					    add r3.xyz, c9.zyzw, v6
					    texld r3, r3, s1
					    mov r2.z, r3.x
					    add r3.xyz, c9.yzzw, v6
					    texld r3, r3, s1
					    mov r2.w, r3.x
					    mad r2, r0.w, -c9.w, r2
					    mov r3.x, c9.x
					    cmp_pp r2, r2, r3.x, c1.x
					    dp4_pp r0.w, r2, c10.x
					    dp3 r1.w, v5, v5
					    texld r2, r1.w, s2
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.xyz, r0.w, c5
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    dp3_pp r0.w, r4, r4
					    rsq_pp r0.w, r0.w
					    nrm_pp r5.xyz, v1
					    mad_pp r3.yzw, r4.xxyz, r0.w, -r5.xxyz
					    mul_pp r4.xyz, r0.w, r4
					    dp3_pp r0.w, r3.yzww, r3.yzww
					    add r1.w, -r0.w, c10.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c10.z, r0.w
					    mul_pp r3.yzw, r0.w, r3
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r5
					    add r1.w, -r0.w, c10.w
					    mad_pp r7.xyz, -r5, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r5
					    max_pp r1.w, r0.w, c11.x
					    dp3_pp r0.w, r6, r3.yzww
					    dp3_pp r2.w, r4, r3.yzww
					    dp3_pp r3.y, r6, r4
					    max_pp r4.x, r3.y, c11.x
					    max_pp r3.y, r2.w, c11.x
					    max_pp r2.w, r0.w, c11.x
					    mul r0.w, r2.w, r2.w
					    add_pp r2.w, r3.x, -c8.x
					    mul_pp r3.x, r2.w, r2.w
					    mad r3.z, r3.x, r3.x, -c9.x
					    mad_pp r0.w, r0.w, r3.z, c9.x
					    mul r3.z, r0.w, c11.y
					    mad r0.w, r3.z, r0.w, c11.z
					    rcp r0.w, r0.w
					    mul_pp r3.z, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.z
					    mad_pp r3.z, r2.w, -r2.w, c9.x
					    mad_pp r3.w, r1.w, r3.z, r3.x
					    mad_pp r3.x, r4.x, r3.z, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c9.x
					    mad r3.x, r4.x, r3.w, r3.x
					    add r3.x, r3.x, c10.w
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c12.x, c12.y
					    mul_pp r0.w, r0.w, c12.x
					    rsq r3.z, r0.w
					    rcp_pp r3.z, r3.z
					    cmp_pp r3.x, r3.x, c12.z, r3.z
					    abs r3.z, c4.w
					    cmp_pp r0.w, -r3.z, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c11.x
					    mul_pp r3.xzw, r2.xyyz, r3.x
					    add_pp r0.w, -r3.y, c9.x
					    mul_pp r4.y, r0.w, r0.w
					    mul_pp r4.y, r4.y, r4.y
					    mul_pp r0.w, r0.w, r4.y
					    lrp_pp r4.yzw, r0.w, c9.x, r0.xxyz
					    mul_pp r0.xyz, r3.xzww, r4.yzww
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.w, c11.w
					    mad_pp r0.w, r1.w, r0.w, c9.x
					    add_pp r2.w, -r4.x, c9.x
					    mul_pp r3.x, r2.w, r2.w
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.w, r2.w, r3.x
					    mad_pp r1.w, r1.w, r2.w, c9.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 119 instruction slots used (6 texture, 113 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Color                         c6       1
					//   _Metallic                      c7       1
					//   _Glossiness                    c8       1
					//   _MainTex                       s0       1
					//   _ShadowMapTexture              s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_3_0
					    def c9, 1, 0.0078125, -0.0078125, 0.970000029
					    def c10, 0.25, 0.00100000005, 31.622776, 9.99999975e-006
					    def c11, 0, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.w
					    dcl_texcoord3_pp v3.w
					    dcl_texcoord4_pp v4
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    mov r0, c3
					    mad_pp r0.w, c7.x, -r0.w, r0.w
					    add_pp r1.x, -r0.w, c9.x
					    texld r2, v0, s0
					    mul_pp r3, r2, c6
					    mad_pp r1.yzw, r2.xxyz, c6.xxyz, -r0.xxyz
					    mad_pp r0.xyz, c7.x, r1.yzww, r0
					    mad_pp oC0.w, r3.w, r0.w, r1.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r1.xyz, r3.w, r1
					    dp3 r0.w, v6, v6
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c0.w
					    add r2.xyz, c9.y, v6
					    texld r2, r2, s1
					    add r3.xyz, c9.zzyw, v6
					    texld r3, r3, s1
					    mov r2.y, r3.x
					    add r3.xyz, c9.zyzw, v6
					    texld r3, r3, s1
					    mov r2.z, r3.x
					    add r3.xyz, c9.yzzw, v6
					    texld r3, r3, s1
					    mov r2.w, r3.x
					    mad r2, r0.w, -c9.w, r2
					    mov r3.x, c9.x
					    cmp_pp r2, r2, r3.x, c1.x
					    dp4_pp r0.w, r2, c10.x
					    dp3 r1.w, v5, v5
					    texld r2, r1.w, s3
					    texld r4, v5, s2
					    mul r1.w, r2.x, r4.w
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r2.xyz, r0.w, c5
					    mov_pp r4.x, v2.w
					    mov_pp r4.y, v3.w
					    mov_pp r4.z, v4.w
					    dp3_pp r0.w, r4, r4
					    rsq_pp r0.w, r0.w
					    nrm_pp r5.xyz, v1
					    mad_pp r3.yzw, r4.xxyz, r0.w, -r5.xxyz
					    mul_pp r4.xyz, r0.w, r4
					    dp3_pp r0.w, r3.yzww, r3.yzww
					    add r1.w, -r0.w, c10.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c10.z, r0.w
					    mul_pp r3.yzw, r0.w, r3
					    nrm_pp r6.xyz, v4
					    dp3_pp r0.w, r6, -r5
					    add r1.w, -r0.w, c10.w
					    mad_pp r7.xyz, -r5, r1.w, r6
					    cmp_pp r6.xyz, r0.w, r6, r7
					    dp3_pp r0.w, r6, -r5
					    max_pp r1.w, r0.w, c11.x
					    dp3_pp r0.w, r6, r3.yzww
					    dp3_pp r2.w, r4, r3.yzww
					    dp3_pp r3.y, r6, r4
					    max_pp r4.x, r3.y, c11.x
					    max_pp r3.y, r2.w, c11.x
					    max_pp r2.w, r0.w, c11.x
					    mul r0.w, r2.w, r2.w
					    add_pp r2.w, r3.x, -c8.x
					    mul_pp r3.x, r2.w, r2.w
					    mad r3.z, r3.x, r3.x, -c9.x
					    mad_pp r0.w, r0.w, r3.z, c9.x
					    mul r3.z, r0.w, c11.y
					    mad r0.w, r3.z, r0.w, c11.z
					    rcp r0.w, r0.w
					    mul_pp r3.z, r3.x, r3.x
					    mul_pp r0.w, r0.w, r3.z
					    mad_pp r3.z, r2.w, -r2.w, c9.x
					    mad_pp r3.w, r1.w, r3.z, r3.x
					    mad_pp r3.x, r4.x, r3.z, r3.x
					    mul_pp r3.x, r1.w, r3.x
					    add_pp r1.w, -r1.w, c9.x
					    mad r3.x, r4.x, r3.w, r3.x
					    add r3.x, r3.x, c10.w
					    rcp r3.x, r3.x
					    add_pp r3.x, r3.x, r3.x
					    mul r0.w, r0.w, r3.x
					    mad r3.x, r0.w, -c12.x, c12.y
					    mul_pp r0.w, r0.w, c12.x
					    rsq r3.z, r0.w
					    rcp_pp r3.z, r3.z
					    cmp_pp r3.x, r3.x, c12.z, r3.z
					    abs r3.z, c4.w
					    cmp_pp r0.w, -r3.z, r3.x, r0.w
					    mul_pp r0.w, r4.x, r0.w
					    max_pp r3.x, r0.w, c11.x
					    mul_pp r3.xzw, r2.xyyz, r3.x
					    add_pp r0.w, -r3.y, c9.x
					    mul_pp r4.y, r0.w, r0.w
					    mul_pp r4.y, r4.y, r4.y
					    mul_pp r0.w, r0.w, r4.y
					    lrp_pp r4.yzw, r0.w, c9.x, r0.xxyz
					    mul_pp r0.xyz, r3.xzww, r4.yzww
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    add_pp r1.w, r3.y, r3.y
					    mul_pp r1.w, r3.y, r1.w
					    mad_pp r1.w, r1.w, r2.w, c11.w
					    mad_pp r0.w, r1.w, r0.w, c9.x
					    add_pp r2.w, -r4.x, c9.x
					    mul_pp r3.x, r2.w, r2.w
					    mul_pp r3.x, r3.x, r3.x
					    mul_pp r2.w, r2.w, r3.x
					    mad_pp r1.w, r1.w, r2.w, c9.x
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.w, r4.x, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r2, r0
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 121 instruction slots used (7 texture, 114 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _Color;
						vec4 unused_0_7[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_10[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat19 = (-u_xlat18) + 9.99999975e-06;
					    u_xlatb18 = u_xlat18<0.0;
					    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.xyw = max(u_xlat1.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat13 = (-_Glossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
					    u_xlat8 = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8 * u_xlat18 + 1.00000001e-07;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat8 / u_xlat18;
					    u_xlat8 = (-u_xlat13) * u_xlat13 + 1.0;
					    u_xlat14 = u_xlat1.w * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.x * u_xlat8 + u_xlat2.x;
					    u_xlat2.x = u_xlat1.w * u_xlat2.x;
					    u_xlat19 = (-u_xlat1.w) + 1.0;
					    u_xlat2.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
					    u_xlat2.x = 2.0 / u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.y) + 1.0;
					    u_xlat7 = u_xlat1.y * u_xlat1.y;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat13));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat4.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat7 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.x = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = (-u_xlat18) + 1.0;
					    SV_Target0.w = u_xlat3.w * u_xlat18 + u_xlat0.x;
					    return;
					}"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 183419
Program "vp" {
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_MatrixVP        c4       4
					//   _Object2World         c8       3
					//   _World2Object         c11      3
					//   _WorldSpaceLightPos0  c14      1
					//   unity_LightShadowBias c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord o0
					    dcl_position o1
					    abs r0.x, c15.z
					    slt r0.x, -r0.x, r0.x
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mad r2, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, -c14.w, c14.xxyz
					    nrm r4.xyz, r0.yzww
					    dp3 r0.y, r1, r4
					    mad r0.y, r0.y, -r0.y, c16.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c15.z
					    mad r1.xyz, r1, -r0.y, r3
					    mov r1.w, c16.x
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 r1.x, c0, r2
					    dp4 r1.y, c1, r2
					    dp4 r1.z, c2, r2
					    dp4 r1.w, c3, r2
					    lrp r2, r0.x, r3, r1
					    rcp r0.x, r2.w
					    mul_sat r0.x, r0.x, c15.x
					    add r0.x, r0.x, r2.z
					    max r0.y, r0.x, c16.y
					    lrp r2.z, c15.y, r0.y, r0.x
					    mov o0, r2
					    mov o1, r2
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_0_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   _Object2World       c4       3
					//   _LightPositionRange c7       1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o0.xyz, r0, -c7
					    dp4 o1.x, c0, v0
					    dp4 o1.y, c1, v0
					    dp4 o1.z, c2, v0
					    dp4 o1.w, c3, v0
					
					// approximately 8 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						vec4 unused_1_3[6];
					};
					in  vec4 in_POSITION0;
					out vec3 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_MatrixVP        c4       4
					//   _Object2World         c8       3
					//   _World2Object         c11      3
					//   _WorldSpaceLightPos0  c14      1
					//   unity_LightShadowBias c15      1
					//   _MainTex_ST           c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord o0
					    dcl_texcoord1 o1.xy
					    dcl_position o2
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c15.z
					    slt r0.x, -r0.x, r0.x
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mad r2, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, -c14.w, c14.xxyz
					    nrm r4.xyz, r0.yzww
					    dp3 r0.y, r1, r4
					    mad r0.y, r0.y, -r0.y, c17.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c15.z
					    mad r1.xyz, r1, -r0.y, r3
					    mov r1.w, c17.x
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 r1.x, c0, r2
					    dp4 r1.y, c1, r2
					    dp4 r1.z, c2, r2
					    dp4 r1.w, c3, r2
					    lrp r2, r0.x, r3, r1
					    rcp r0.x, r2.w
					    mul_sat r0.x, r0.x, c15.x
					    add r0.x, r0.x, r2.z
					    max r0.y, r0.x, c17.y
					    lrp r2.z, c15.y, r0.y, r0.x
					    mov o0, r2
					    mov o2, r2
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   _Object2World       c4       3
					//   _LightPositionRange c7       1
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_texcoord1 o1.xy
					    dcl_position o2
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o0.xyz, r0, -c7
					    dp4 o2.x, c0, v0
					    dp4 o2.y, c1, v0
					    dp4 o2.z, c2, v0
					    dp4 o2.w, c3, v0
					    mad o1.xy, v1, c8, c8.zwzw
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					    ps_3_0
					    dcl_texcoord v0.zw
					    rcp r0.x, v0.w
					    mul_pp oC0, r0.x, v0.z
					
					// approximately 2 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xyz
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul_pp oC0, r0.x, c0.w
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					void main()
					{
					    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0 = sqrt(u_xlat0);
					    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
					    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler3D _DitherMaskLOD;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _Color         c0       1
					//   _MainTex       s0       1
					//   _DitherMaskLOD s1       1
					//
					
					    ps_3_0
					    def c1, 0.9375, 0.25, -0.00999999978, 0
					    dcl_texcoord v0.zw
					    dcl_texcoord1 v1.xy
					    dcl vPos.xy
					    dcl_2d s0
					    dcl_volume s1
					    texld r0, v1, s0
					    mul_pp r0.x, r0.w, c0.w
					    mul r0.z, r0.x, c1.x
					    mul r0.xy, c1.y, vPos
					    texld_pp r0, r0, s1
					    add_pp r0, r0.w, c1.z
					    texkill r0
					    rcp r0.x, v0.w
					    mul_pp oC0, r0.x, v0.z
					
					// approximately 9 instruction slots used (2 texture, 7 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _DitherMaskLOD;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w;
					    u_xlat0.z = u_xlat0.x * 0.9375;
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat0 = texture(_DitherMaskLOD, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.w + -0.00999999978;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler3D _DitherMaskLOD;
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _Color                c2       1
					//   _MainTex              s0       1
					//   _DitherMaskLOD        s1       1
					//
					
					    ps_3_0
					    def c3, 0.9375, 0.25, -0.00999999978, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl vPos.xy
					    dcl_2d s0
					    dcl_volume s1
					    texld r0, v1, s0
					    mul_pp r0.x, r0.w, c2.w
					    mul r0.z, r0.x, c3.x
					    mul r0.xy, c3.y, vPos
					    texld_pp r0, r0, s1
					    add_pp r0, r0.w, c3.z
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul_pp oC0, r0.x, c0.w
					
					// approximately 12 instruction slots used (2 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _DitherMaskLOD;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w;
					    u_xlat0.z = u_xlat0.x * 0.9375;
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat0 = texture(_DitherMaskLOD, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.w + -0.00999999978;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 231071
Program "vp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   glstate_matrix_mvp   c0       4
					//   _Object2World        c4       3
					//   _World2Object        c7       3
					//   _WorldSpaceCameraPos c10      1
					//   unity_SHBr           c11      1
					//   unity_SHBg           c12      1
					//   unity_SHBb           c13      1
					//   unity_SHC            c14      1
					//   _MainTex_ST          c15      1
					//   _DetailAlbedoMap_ST  c16      1
					//   _UVSec               c17      1
					//
					
					    vs_3_0
					    def c18, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c15, c15.zwzw
					    abs r0.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3, c18.x
					    mov o4, c18.x
					    mov o5.w, c18.x
					    mov o6.w, c18.x
					
					// approximately 33 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_3_0
					    def c19, 0, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad o1.xy, v2, c16, c16.zwzw
					    abs r0.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad o1.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o2.xyz, r0, -c10
					    mov o7.xyz, r0
					    mul r0.x, c15.w, v4.w
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r2.xyz, r1
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.yzw, r2.xyzx, r1.xzxy
					    mad r0.yzw, r1.xyzx, r2.xzxy, -r0
					    mov o3.xyz, r2
					    mul o4.xyz, r0.x, r0.yzww
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o5.xyz, r1
					    dp4 r1.x, c11, r2
					    dp4 r1.y, c12, r2
					    dp4 r1.z, c13, r2
					    mad o6.xyz, c14, r0.x, r1
					    mov o3.w, c19.x
					    mov o4.w, c19.x
					    mov o5.w, c19.x
					    mov o6.w, c19.x
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
					    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = 0.0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp r0.xyz, r1, r2
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 40 instruction slots used (2 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp r0.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp r0.xyz, r0, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp r0.xyz, r0, r1, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp r0.xyz, r1, r2
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 40 instruction slots used (2 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp r0.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp r0.xyz, r0, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp r0.xyz, r0, r1, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp r0.xyz, r1, r2
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 40 instruction slots used (2 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp r0.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp r0.xyz, r0, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp r0.xyz, r0, r1, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r2
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 37 instruction slots used (2 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp oC3.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 39 instruction slots used (3 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 38 instruction slots used (2 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp oC3.xyz, r0, r1, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r2
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 37 instruction slots used (2 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp oC3.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 39 instruction slots used (3 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 38 instruction slots used (2 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp oC3.xyz, r0, r1, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c10.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r2
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 37 instruction slots used (2 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, c5, r0, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c6.x, r2, r1
					    nrm_pp r2.xyz, v1
					    mov r2.w, c11.x
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r0.w, r2.x, -c8.x
					    mad_pp r2.w, r2.y, c8.x, r0.w
					    mul_pp r1.xyz, r1, r2.w
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r0
					    texld r0, v0, s2
					    mul_pp r0.xyz, r0, c9
					    mad_pp oC3.xyz, r2, r1, r0
					    mov_pp oC0, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 39 instruction slots used (3 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat2.xyz = _Color.xyz * u_xlat2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//
					
					    ps_3_0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c10.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c10.wwwx, c10.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c10.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c10.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c9.x, c9.y
					    max_pp r3.xyz, r1, c10.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c10.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c10.x
					
					// approximately 38 instruction slots used (2 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float _OcclusionStrength;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _OcclusionStrength             c8       1
					//   _EmissionColor                 c9       1
					//   _MainTex                       s0       1
					//   _OcclusionMap                  s1       1
					//   _EmissionMap                   s2       1
					//
					
					    ps_3_0
					    def c10, 1.05499995, -0.0549999997, 0, 0
					    def c11, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord4_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0, r0.wxyz, c5.wxyz
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r1.x, c6.x, -r1.w, r1.w
					    mul_pp r0.yzw, r0, r1.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    nrm_pp r1.xyz, v1
					    mov r1.w, c11.x
					    dp4_pp r2.x, c0, r1
					    dp4_pp r2.y, c1, r1
					    dp4_pp r2.z, c2, r1
					    mad_pp oC2, r1, c11.wwwx, c11.wwwy
					    add_pp r1.xyz, r2, v2
					    max_pp r2.xyz, r1, c11.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c11.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c10.x, c10.y
					    max_pp r3.xyz, r1, c11.y
					    abs r1.x, c4.w
					    cmp_pp r1.xyz, -r1.x, r3, r2
					    texld_pp r2, v0, s1
					    mov r2.x, c11.x
					    add_pp r1.w, r2.x, -c8.x
					    mad_pp r0.w, r2.y, c8.x, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mov_pp oC0, r0
					    texld r2, v0, s2
					    mul_pp r2.xyz, r2, c9
					    mad_pp oC3.xyz, r0, r1, r2
					    mov_pp oC1.w, c7.x
					    mov_pp oC3.w, c11.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						vec4 _Color;
						vec4 unused_0_5[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat1.y * _OcclusionStrength + u_xlat1.x;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
					    u_xlat2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _EmissionColor.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 384445
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_ColorSpaceLuminance c18      1
					//   _MainTex_ST               c19      1
					//   _DetailAlbedoMap_ST       c20      1
					//   _UVSec                    c21      1
					//
					
					    vs_2_0
					    def c22, 1, 0, 0.416666657, 0
					    def c23, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c22.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.y
					    mov r1.w, c22.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c23.x, c23.y
					    max r1.xyz, r1, c22.y
					    mul r0.w, c18.w, c18.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c22.y
					    mov oT2, c22.y
					    mov oT3, c22.y
					    mov oT4.w, c22.y
					    mov oT5.w, c22.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _MainTex_ST               c21      1
					//   _DetailAlbedoMap_ST       c22      1
					//   _UVSec                    c23      1
					//
					
					    vs_2_0
					    def c24, 0.5, 1, 0, 0.416666657
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c21, c21.zwzw
					    mul r0.x, c23.x, c23.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c22.xyxy, c22
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c24.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c24.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c24.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c24.z
					    mov r2.w, c24.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c25.x, c25.y
					    max r2.xyz, r2, c24.z
					    mul r1.w, c20.w, c20.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c24.z
					    dp4 r0.z, c2, v0
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c24.z
					    mov oT3, c24.z
					    mov oT4.w, c24.z
					    mov oT5.w, c24.z
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_ColorSpaceLuminance c26      1
					//   _MainTex_ST               c27      1
					//   _DetailAlbedoMap_ST       c28      1
					//   _UVSec                    c29      1
					//
					
					    vs_2_0
					    def c30, 0, 1, 0.416666657, 0
					    def c31, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c27, c27.zwzw
					    mul r0.x, c29.x, c29.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c28.xyxy, c28
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c30.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c30.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c30.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c30.x
					    mov r2.w, c30.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c31.x, c31.y
					    max r2.xyz, r2, c30.x
					    mul r0.w, c26.w, c26.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c30.x
					    add oT5.xyz, r0, r1
					    mov oT2, c30.x
					    mov oT3, c30.x
					    mov oT4.w, c30.x
					    mov oT5.w, c30.x
					
					// approximately 81 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_ColorSpaceLuminance c28      1
					//   _MainTex_ST               c29      1
					//   _DetailAlbedoMap_ST       c30      1
					//   _UVSec                    c31      1
					//
					
					    vs_2_0
					    def c32, 0.5, 0, 1, 0.416666657
					    def c33, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c29, c29.zwzw
					    mul r0.x, c31.x, c31.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c30.xyxy, c30
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c32.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c32.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c32.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c32.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c32.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c32.y
					    mov r3.w, c32.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c33.x, c33.y
					    max r3.xyz, r3, c32.y
					    mul r0.w, c28.w, c28.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c32.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c32.y
					    mov oT3, c32.y
					    mov oT4.w, c32.y
					    mov oT5.w, c32.y
					
					// approximately 87 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_FogParams           c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _MainTex_ST               c20      1
					//   _DetailAlbedoMap_ST       c21      1
					//   _UVSec                    c22      1
					//
					
					    vs_2_0
					    def c23, 1, 0, 0.416666657, 0
					    def c24, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c20, c20.zwzw
					    mul r0.x, c22.x, c22.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c21.xyxy, c21
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c23.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c23.y
					    mov r1.w, c23.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c24.x, c24.y
					    max r1.xyz, r1, c23.y
					    mul r0.w, c19.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c23.y
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c23.y
					    mov oT3, c23.y
					    mov oT4.w, c23.y
					    mov oT5.w, c23.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_FogParams           c20      1
					//   unity_ColorSpaceLuminance c21      1
					//   _MainTex_ST               c22      1
					//   _DetailAlbedoMap_ST       c23      1
					//   _UVSec                    c24      1
					//
					
					    vs_2_0
					    def c25, 0.5, 1, 0, 0.416666657
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c25.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c25.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c25.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c25.z
					    mov r2.w, c25.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c26.x, c26.y
					    max r2.xyz, r2, c25.z
					    mul r1.w, c21.w, c21.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c25.z
					    dp4 r0.z, c2, v0
					    mul r1.x, r0.z, c20.x
					    mul r1.x, r1.x, -r1.x
					    exp oT7.x, r1.x
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c25.z
					    mov oT3, c25.z
					    mov oT4.w, c25.z
					    mov oT5.w, c25.z
					
					// approximately 63 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_FogParams           c26      1
					//   unity_ColorSpaceLuminance c27      1
					//   _MainTex_ST               c28      1
					//   _DetailAlbedoMap_ST       c29      1
					//   _UVSec                    c30      1
					//
					
					    vs_2_0
					    def c31, 0, 1, 0.416666657, 0
					    def c32, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c28, c28.zwzw
					    mul r0.x, c30.x, c30.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c29.xyxy, c29
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c31.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c31.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c31.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c31.x
					    mov r2.w, c31.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c32.x, c32.y
					    max r2.xyz, r2, c31.x
					    mul r0.w, c27.w, c27.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c31.x
					    add oT5.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c26.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c31.x
					    mov oT3, c31.x
					    mov oT4.w, c31.x
					    mov oT5.w, c31.x
					
					// approximately 85 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_FogParams           c28      1
					//   unity_ColorSpaceLuminance c29      1
					//   _MainTex_ST               c30      1
					//   _DetailAlbedoMap_ST       c31      1
					//   _UVSec                    c32      1
					//
					
					    vs_2_0
					    def c33, 0.5, 0, 1, 0.416666657
					    def c34, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c30, c30.zwzw
					    mul r0.x, c32.x, c32.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c31.xyxy, c31
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c33.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c33.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c33.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c33.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c33.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c33.y
					    mov r3.w, c33.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c34.x, c34.y
					    max r3.xyz, r3, c33.y
					    mul r0.w, c29.w, c29.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c33.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mul r0.x, r1.z, c28.x
					    mul r0.x, r0.x, -r0.x
					    exp oT7.x, r0.x
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c33.y
					    mov oT3, c33.y
					    mov oT4.w, c33.y
					    mov oT5.w, c33.y
					
					// approximately 90 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_ColorSpaceLuminance c18      1
					//   _MainTex_ST               c19      1
					//   _DetailAlbedoMap_ST       c20      1
					//   _UVSec                    c21      1
					//
					
					    vs_2_0
					    def c22, 1, 0, 0.416666657, 0
					    def c23, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c22.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.y
					    mov r1.w, c22.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c23.x, c23.y
					    max r1.xyz, r1, c22.y
					    mul r0.w, c18.w, c18.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c22.y
					    mov oT2, c22.y
					    mov oT3, c22.y
					    mov oT4.w, c22.y
					    mov oT5.w, c22.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _MainTex_ST               c21      1
					//   _DetailAlbedoMap_ST       c22      1
					//   _UVSec                    c23      1
					//
					
					    vs_2_0
					    def c24, 0.5, 1, 0, 0.416666657
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c21, c21.zwzw
					    mul r0.x, c23.x, c23.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c22.xyxy, c22
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c24.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c24.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c24.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c24.z
					    mov r2.w, c24.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c25.x, c25.y
					    max r2.xyz, r2, c24.z
					    mul r1.w, c20.w, c20.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c24.z
					    dp4 r0.z, c2, v0
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c24.z
					    mov oT3, c24.z
					    mov oT4.w, c24.z
					    mov oT5.w, c24.z
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_ColorSpaceLuminance c26      1
					//   _MainTex_ST               c27      1
					//   _DetailAlbedoMap_ST       c28      1
					//   _UVSec                    c29      1
					//
					
					    vs_2_0
					    def c30, 0, 1, 0.416666657, 0
					    def c31, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c27, c27.zwzw
					    mul r0.x, c29.x, c29.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c28.xyxy, c28
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c30.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c30.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c30.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c30.x
					    mov r2.w, c30.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c31.x, c31.y
					    max r2.xyz, r2, c30.x
					    mul r0.w, c26.w, c26.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c30.x
					    add oT5.xyz, r0, r1
					    mov oT2, c30.x
					    mov oT3, c30.x
					    mov oT4.w, c30.x
					    mov oT5.w, c30.x
					
					// approximately 81 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_ColorSpaceLuminance c28      1
					//   _MainTex_ST               c29      1
					//   _DetailAlbedoMap_ST       c30      1
					//   _UVSec                    c31      1
					//
					
					    vs_2_0
					    def c32, 0.5, 0, 1, 0.416666657
					    def c33, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c29, c29.zwzw
					    mul r0.x, c31.x, c31.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c30.xyxy, c30
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c32.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c32.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c32.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c32.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c32.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c32.y
					    mov r3.w, c32.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c33.x, c33.y
					    max r3.xyz, r3, c32.y
					    mul r0.w, c28.w, c28.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c32.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c32.y
					    mov oT3, c32.y
					    mov oT4.w, c32.y
					    mov oT5.w, c32.y
					
					// approximately 87 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_FogParams           c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _MainTex_ST               c20      1
					//   _DetailAlbedoMap_ST       c21      1
					//   _UVSec                    c22      1
					//
					
					    vs_2_0
					    def c23, 1, 0, 0.416666657, 0
					    def c24, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c20, c20.zwzw
					    mul r0.x, c22.x, c22.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c21.xyxy, c21
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c23.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c23.y
					    mov r1.w, c23.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c24.x, c24.y
					    max r1.xyz, r1, c23.y
					    mul r0.w, c19.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c23.y
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c23.y
					    mov oT3, c23.y
					    mov oT4.w, c23.y
					    mov oT5.w, c23.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_FogParams           c20      1
					//   unity_ColorSpaceLuminance c21      1
					//   _MainTex_ST               c22      1
					//   _DetailAlbedoMap_ST       c23      1
					//   _UVSec                    c24      1
					//
					
					    vs_2_0
					    def c25, 0.5, 1, 0, 0.416666657
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c25.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c25.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c25.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c25.z
					    mov r2.w, c25.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c26.x, c26.y
					    max r2.xyz, r2, c25.z
					    mul r1.w, c21.w, c21.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c25.z
					    dp4 r0.z, c2, v0
					    mul r1.x, r0.z, c20.x
					    mul r1.x, r1.x, -r1.x
					    exp oT7.x, r1.x
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c25.z
					    mov oT3, c25.z
					    mov oT4.w, c25.z
					    mov oT5.w, c25.z
					
					// approximately 63 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_FogParams           c26      1
					//   unity_ColorSpaceLuminance c27      1
					//   _MainTex_ST               c28      1
					//   _DetailAlbedoMap_ST       c29      1
					//   _UVSec                    c30      1
					//
					
					    vs_2_0
					    def c31, 0, 1, 0.416666657, 0
					    def c32, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c28, c28.zwzw
					    mul r0.x, c30.x, c30.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c29.xyxy, c29
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c31.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c31.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c31.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c31.x
					    mov r2.w, c31.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c32.x, c32.y
					    max r2.xyz, r2, c31.x
					    mul r0.w, c27.w, c27.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c31.x
					    add oT5.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c26.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c31.x
					    mov oT3, c31.x
					    mov oT4.w, c31.x
					    mov oT5.w, c31.x
					
					// approximately 85 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_FogParams           c28      1
					//   unity_ColorSpaceLuminance c29      1
					//   _MainTex_ST               c30      1
					//   _DetailAlbedoMap_ST       c31      1
					//   _UVSec                    c32      1
					//
					
					    vs_2_0
					    def c33, 0.5, 0, 1, 0.416666657
					    def c34, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c30, c30.zwzw
					    mul r0.x, c32.x, c32.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c31.xyxy, c31
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c33.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c33.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c33.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c33.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c33.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c33.y
					    mov r3.w, c33.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c34.x, c34.y
					    max r3.xyz, r3, c33.y
					    mul r0.w, c29.w, c29.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c33.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mul r0.x, r1.z, c28.x
					    mul r0.x, r0.x, -r0.x
					    exp oT7.x, r0.x
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c33.y
					    mov oT3, c33.y
					    mov oT4.w, c33.y
					    mov oT5.w, c33.y
					
					// approximately 90 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_ColorSpaceLuminance c18      1
					//   _MainTex_ST               c19      1
					//   _DetailAlbedoMap_ST       c20      1
					//   _UVSec                    c21      1
					//
					
					    vs_2_0
					    def c22, 1, 0, 0.416666657, 0
					    def c23, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c22.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.y
					    mov r1.w, c22.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c23.x, c23.y
					    max r1.xyz, r1, c22.y
					    mul r0.w, c18.w, c18.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c22.y
					    mov oT2, c22.y
					    mov oT3, c22.y
					    mov oT4.w, c22.y
					    mov oT5.w, c22.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _MainTex_ST               c21      1
					//   _DetailAlbedoMap_ST       c22      1
					//   _UVSec                    c23      1
					//
					
					    vs_2_0
					    def c24, 0.5, 1, 0, 0.416666657
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c21, c21.zwzw
					    mul r0.x, c23.x, c23.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c22.xyxy, c22
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c24.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c24.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c24.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c24.z
					    mov r2.w, c24.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c25.x, c25.y
					    max r2.xyz, r2, c24.z
					    mul r1.w, c20.w, c20.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c24.z
					    dp4 r0.z, c2, v0
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c24.z
					    mov oT3, c24.z
					    mov oT4.w, c24.z
					    mov oT5.w, c24.z
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_ColorSpaceLuminance c26      1
					//   _MainTex_ST               c27      1
					//   _DetailAlbedoMap_ST       c28      1
					//   _UVSec                    c29      1
					//
					
					    vs_2_0
					    def c30, 0, 1, 0.416666657, 0
					    def c31, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c27, c27.zwzw
					    mul r0.x, c29.x, c29.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c28.xyxy, c28
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c30.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c30.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c30.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c30.x
					    mov r2.w, c30.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c31.x, c31.y
					    max r2.xyz, r2, c30.x
					    mul r0.w, c26.w, c26.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c30.x
					    add oT5.xyz, r0, r1
					    mov oT2, c30.x
					    mov oT3, c30.x
					    mov oT4.w, c30.x
					    mov oT5.w, c30.x
					
					// approximately 81 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_ColorSpaceLuminance c28      1
					//   _MainTex_ST               c29      1
					//   _DetailAlbedoMap_ST       c30      1
					//   _UVSec                    c31      1
					//
					
					    vs_2_0
					    def c32, 0.5, 0, 1, 0.416666657
					    def c33, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c29, c29.zwzw
					    mul r0.x, c31.x, c31.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c30.xyxy, c30
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c32.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c32.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c32.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c32.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c32.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c32.y
					    mov r3.w, c32.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c33.x, c33.y
					    max r3.xyz, r3, c32.y
					    mul r0.w, c28.w, c28.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c32.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c32.y
					    mov oT3, c32.y
					    mov oT4.w, c32.y
					    mov oT5.w, c32.y
					
					// approximately 87 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_FogParams           c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _MainTex_ST               c20      1
					//   _DetailAlbedoMap_ST       c21      1
					//   _UVSec                    c22      1
					//
					
					    vs_2_0
					    def c23, 1, 0, 0.416666657, 0
					    def c24, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c20, c20.zwzw
					    mul r0.x, c22.x, c22.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c21.xyxy, c21
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c23.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c23.y
					    mov r1.w, c23.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c24.x, c24.y
					    max r1.xyz, r1, c23.y
					    mul r0.w, c19.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c23.y
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c23.y
					    mov oT3, c23.y
					    mov oT4.w, c23.y
					    mov oT5.w, c23.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_FogParams           c20      1
					//   unity_ColorSpaceLuminance c21      1
					//   _MainTex_ST               c22      1
					//   _DetailAlbedoMap_ST       c23      1
					//   _UVSec                    c24      1
					//
					
					    vs_2_0
					    def c25, 0.5, 1, 0, 0.416666657
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c25.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c25.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c25.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c25.z
					    mov r2.w, c25.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c26.x, c26.y
					    max r2.xyz, r2, c25.z
					    mul r1.w, c21.w, c21.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c25.z
					    dp4 r0.z, c2, v0
					    mul r1.x, r0.z, c20.x
					    mul r1.x, r1.x, -r1.x
					    exp oT7.x, r1.x
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c25.z
					    mov oT3, c25.z
					    mov oT4.w, c25.z
					    mov oT5.w, c25.z
					
					// approximately 63 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_FogParams           c26      1
					//   unity_ColorSpaceLuminance c27      1
					//   _MainTex_ST               c28      1
					//   _DetailAlbedoMap_ST       c29      1
					//   _UVSec                    c30      1
					//
					
					    vs_2_0
					    def c31, 0, 1, 0.416666657, 0
					    def c32, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c28, c28.zwzw
					    mul r0.x, c30.x, c30.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c29.xyxy, c29
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c31.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c31.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c31.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c31.x
					    mov r2.w, c31.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c32.x, c32.y
					    max r2.xyz, r2, c31.x
					    mul r0.w, c27.w, c27.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c31.x
					    add oT5.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c26.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c31.x
					    mov oT3, c31.x
					    mov oT4.w, c31.x
					    mov oT5.w, c31.x
					
					// approximately 85 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_FogParams           c28      1
					//   unity_ColorSpaceLuminance c29      1
					//   _MainTex_ST               c30      1
					//   _DetailAlbedoMap_ST       c31      1
					//   _UVSec                    c32      1
					//
					
					    vs_2_0
					    def c33, 0.5, 0, 1, 0.416666657
					    def c34, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c30, c30.zwzw
					    mul r0.x, c32.x, c32.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c31.xyxy, c31
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c33.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c33.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c33.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c33.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c33.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c33.y
					    mov r3.w, c33.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c34.x, c34.y
					    max r3.xyz, r3, c33.y
					    mul r0.w, c29.w, c29.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c33.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mul r0.x, r1.z, c28.x
					    mul r0.x, r0.x, -r0.x
					    exp oT7.x, r0.x
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c33.y
					    mov oT3, c33.y
					    mov oT4.w, c33.y
					    mov oT5.w, c33.y
					
					// approximately 90 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_ColorSpaceLuminance c18      1
					//   _MainTex_ST               c19      1
					//   _DetailAlbedoMap_ST       c20      1
					//   _UVSec                    c21      1
					//
					
					    vs_2_0
					    def c22, 1, 0, 0.416666657, 0
					    def c23, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c22.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.y
					    mov r1.w, c22.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c23.x, c23.y
					    max r1.xyz, r1, c22.y
					    mul r0.w, c18.w, c18.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c22.y
					    mov oT2, c22.y
					    mov oT3, c22.y
					    mov oT4.w, c22.y
					    mov oT5.w, c22.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _MainTex_ST               c21      1
					//   _DetailAlbedoMap_ST       c22      1
					//   _UVSec                    c23      1
					//
					
					    vs_2_0
					    def c24, 0.5, 1, 0, 0.416666657
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c21, c21.zwzw
					    mul r0.x, c23.x, c23.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c22.xyxy, c22
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c24.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c24.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c24.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c24.z
					    mov r2.w, c24.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c25.x, c25.y
					    max r2.xyz, r2, c24.z
					    mul r1.w, c20.w, c20.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c24.z
					    dp4 r0.z, c2, v0
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c24.z
					    mov oT3, c24.z
					    mov oT4.w, c24.z
					    mov oT5.w, c24.z
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_ColorSpaceLuminance c26      1
					//   _MainTex_ST               c27      1
					//   _DetailAlbedoMap_ST       c28      1
					//   _UVSec                    c29      1
					//
					
					    vs_2_0
					    def c30, 0, 1, 0.416666657, 0
					    def c31, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c27, c27.zwzw
					    mul r0.x, c29.x, c29.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c28.xyxy, c28
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c30.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c30.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c30.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c30.x
					    mov r2.w, c30.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c31.x, c31.y
					    max r2.xyz, r2, c30.x
					    mul r0.w, c26.w, c26.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c30.x
					    add oT5.xyz, r0, r1
					    mov oT2, c30.x
					    mov oT3, c30.x
					    mov oT4.w, c30.x
					    mov oT5.w, c30.x
					
					// approximately 81 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_ColorSpaceLuminance c28      1
					//   _MainTex_ST               c29      1
					//   _DetailAlbedoMap_ST       c30      1
					//   _UVSec                    c31      1
					//
					
					    vs_2_0
					    def c32, 0.5, 0, 1, 0.416666657
					    def c33, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c29, c29.zwzw
					    mul r0.x, c31.x, c31.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c30.xyxy, c30
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c32.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c32.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c32.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c32.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c32.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c32.y
					    mov r3.w, c32.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c33.x, c33.y
					    max r3.xyz, r3, c32.y
					    mul r0.w, c28.w, c28.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c32.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c32.y
					    mov oT3, c32.y
					    mov oT4.w, c32.y
					    mov oT5.w, c32.y
					
					// approximately 87 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   unity_SHAr                c11      1
					//   unity_SHAg                c12      1
					//   unity_SHAb                c13      1
					//   unity_SHBr                c14      1
					//   unity_SHBg                c15      1
					//   unity_SHBb                c16      1
					//   unity_SHC                 c17      1
					//   unity_FogParams           c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _MainTex_ST               c20      1
					//   _DetailAlbedoMap_ST       c21      1
					//   _UVSec                    c22      1
					//
					
					    vs_2_0
					    def c23, 1, 0, 0.416666657, 0
					    def c24, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c20, c20.zwzw
					    mul r0.x, c22.x, c22.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c21.xyxy, c21
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    mul r0.xyz, v1.y, c8
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c23.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    mov oT4.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c23.y
					    mov r1.w, c23.z
					    lit r2, r1.xxww
					    mov r2.x, r2.z
					    lit r3, r1.yyww
					    lit r1, r1.zzww
					    mov r2.z, r1.z
					    mov r2.y, r3.z
					    mad r1.xyz, r2, c24.x, c24.y
					    max r1.xyz, r1, c23.y
					    mul r0.w, c19.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max oT5.xyz, r2, c23.y
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c23.y
					    mov oT3, c23.y
					    mov oT4.w, c23.y
					    mov oT5.w, c23.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   _Object2World             c4       3
					//   _World2Object             c7       3
					//   _WorldSpaceCameraPos      c10      1
					//   _ProjectionParams         c11      1
					//   _ScreenParams             c12      1
					//   unity_SHAr                c13      1
					//   unity_SHAg                c14      1
					//   unity_SHAb                c15      1
					//   unity_SHBr                c16      1
					//   unity_SHBg                c17      1
					//   unity_SHBb                c18      1
					//   unity_SHC                 c19      1
					//   unity_FogParams           c20      1
					//   unity_ColorSpaceLuminance c21      1
					//   _MainTex_ST               c22      1
					//   _DetailAlbedoMap_ST       c23      1
					//   _UVSec                    c24      1
					//
					
					    vs_2_0
					    def c25, 0.5, 1, 0, 0.416666657
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r0.xyz, r0, -c10
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r0
					    dp4 r0.y, c1, v0
					    mul r1.x, r0.y, c11.x
					    mul r1.w, r1.x, c25.x
					    dp4 r0.x, c0, v0
					    dp4 r0.w, c3, v0
					    mul r1.xz, r0.xyww, c25.x
					    mad oT6.xy, r1.z, c12.zwzw, r1.xwzw
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    mul r1.x, r2.y, r2.y
					    mad r1.x, r2.x, r2.x, -r1.x
					    mul r3, r2.yzzx, r2.xyzz
					    dp4 r4.x, c16, r3
					    dp4 r4.y, c17, r3
					    dp4 r4.z, c18, r3
					    mad r1.xyz, c19, r1.x, r4
					    mov r2.w, c25.y
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mov oT4.xyz, r2
					    add r1.xyz, r1, r3
					    max r2.xyz, r1, c25.z
					    mov r2.w, c25.w
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c26.x, c26.y
					    max r2.xyz, r2, c25.z
					    mul r1.w, c21.w, c21.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r1
					    max oT5.xyz, r3, c25.z
					    dp4 r0.z, c2, v0
					    mul r1.x, r0.z, c20.x
					    mul r1.x, r1.x, -r1.x
					    exp oT7.x, r1.x
					    mov oPos, r0
					    mov oT6.zw, r0
					    mov oT2, c25.z
					    mov oT3, c25.z
					    mov oT4.w, c25.z
					    mov oT5.w, c25.z
					
					// approximately 63 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   unity_4LightPosX0         c15      1
					//   unity_4LightPosY0         c16      1
					//   unity_4LightPosZ0         c17      1
					//   unity_4LightAtten0        c18      1
					//   unity_SHAr                c19      1
					//   unity_SHAg                c20      1
					//   unity_SHAb                c21      1
					//   unity_SHBr                c22      1
					//   unity_SHBg                c23      1
					//   unity_SHBb                c24      1
					//   unity_SHC                 c25      1
					//   unity_FogParams           c26      1
					//   unity_ColorSpaceLuminance c27      1
					//   _MainTex_ST               c28      1
					//   _DetailAlbedoMap_ST       c29      1
					//   _UVSec                    c30      1
					//
					
					    vs_2_0
					    def c31, 0, 1, 0.416666657, 0
					    def c32, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c28, c28.zwzw
					    mul r0.x, c30.x, c30.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c29.xyxy, c29
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c15
					    add r3, -r0.y, c16
					    add r0, -r0.z, c17
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1, r3, r3
					    mad r1, r2, r2, r1
					    mad r1, r0, r0, r1
					    rsq r4.x, r1.x
					    rsq r4.y, r1.y
					    rsq r4.z, r1.z
					    rsq r4.w, r1.w
					    mov r5.y, c31.y
					    mad r1, r1, c18, r5.y
					    mul r5.xyz, v1.y, c12
					    mad r5.xyz, c11, v1.x, r5
					    mad r5.xyz, c13, v1.z, r5
					    nrm r6.xyz, r5
					    mul r3, r3, r6.y
					    mad r2, r2, r6.x, r3
					    mad r0, r0, r6.z, r2
					    mul r0, r4, r0
					    max r0, r0, c31.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c31.y
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    mov oT4.xyz, r6
					    add r1.xyz, r1, r2
					    max r2.xyz, r1, c31.x
					    mov r2.w, c31.z
					    lit r3, r2.xxww
					    mov r3.x, r3.z
					    lit r4, r2.yyww
					    lit r2, r2.zzww
					    mov r3.z, r2.z
					    mov r3.y, r4.z
					    mad r2.xyz, r3, c32.x, c32.y
					    max r2.xyz, r2, c31.x
					    mul r0.w, c27.w, c27.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r1
					    max r1.xyz, r3, c31.x
					    add oT5.xyz, r0, r1
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c26.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2, c31.x
					    mov oT3, c31.x
					    mov oT4.w, c31.x
					    mov oT5.w, c31.x
					
					// approximately 85 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor1.xyz;
					    u_xlat1.xyz = unity_LightColor0.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor2.xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor3.xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   _Object2World             c8       3
					//   _World2Object             c11      3
					//   _WorldSpaceCameraPos      c14      1
					//   _ProjectionParams         c15      1
					//   _ScreenParams             c16      1
					//   unity_4LightPosX0         c17      1
					//   unity_4LightPosY0         c18      1
					//   unity_4LightPosZ0         c19      1
					//   unity_4LightAtten0        c20      1
					//   unity_SHAr                c21      1
					//   unity_SHAg                c22      1
					//   unity_SHAb                c23      1
					//   unity_SHBr                c24      1
					//   unity_SHBg                c25      1
					//   unity_SHBb                c26      1
					//   unity_SHC                 c27      1
					//   unity_FogParams           c28      1
					//   unity_ColorSpaceLuminance c29      1
					//   _MainTex_ST               c30      1
					//   _DetailAlbedoMap_ST       c31      1
					//   _UVSec                    c32      1
					//
					
					    vs_2_0
					    def c33, 0.5, 0, 1, 0.416666657
					    def c34, 1.05499995, -0.0549999997, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    mad oT0.xy, v2, c30, c30.zwzw
					    mul r0.x, c32.x, c32.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c31.xyxy, c31
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c14
					    add r2, -r0.x, c17
					    add r3, -r0.y, c18
					    add r0, -r0.z, c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    dp4 r1.y, c5, v0
					    mul r4.x, r1.y, c15.x
					    mul r4.w, r4.x, c33.x
					    dp4 r1.x, c4, v0
					    dp4 r1.w, c7, v0
					    mul r4.xz, r1.xyww, c33.x
					    mad oT6.xy, r4.z, c16.zwzw, r4.xwzw
					    mul r4, r3, r3
					    mad r4, r2, r2, r4
					    mad r4, r0, r0, r4
					    rsq r5.x, r4.x
					    rsq r5.y, r4.y
					    rsq r5.z, r4.z
					    rsq r5.w, r4.w
					    mov r6.z, c33.z
					    mad r4, r4, c20, r6.z
					    mul r6.xyz, v1.y, c12
					    mad r6.xyz, c11, v1.x, r6
					    mad r6.xyz, c13, v1.z, r6
					    nrm r7.xyz, r6
					    mul r3, r3, r7.y
					    mad r2, r2, r7.x, r3
					    mad r0, r0, r7.z, r2
					    mul r0, r5, r0
					    max r0, r0, c33.y
					    rcp r2.x, r4.x
					    rcp r2.y, r4.y
					    rcp r2.z, r4.z
					    rcp r2.w, r4.w
					    mul r0, r0, r2
					    mul r2.xyz, r0.y, c1
					    mad r2.xyz, c0, r0.x, r2
					    mad r0.xyz, c2, r0.z, r2
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r7.y, r7.y
					    mad r0.w, r7.x, r7.x, -r0.w
					    mul r2, r7.yzzx, r7.xyzz
					    dp4 r3.x, c24, r2
					    dp4 r3.y, c25, r2
					    dp4 r3.z, c26, r2
					    mad r2.xyz, c27, r0.w, r3
					    mov r7.w, c33.z
					    dp4 r3.x, c21, r7
					    dp4 r3.y, c22, r7
					    dp4 r3.z, c23, r7
					    mov oT4.xyz, r7
					    add r2.xyz, r2, r3
					    max r3.xyz, r2, c33.y
					    mov r3.w, c33.w
					    lit r4, r3.xxww
					    mov r4.x, r4.z
					    lit r5, r3.yyww
					    lit r3, r3.zzww
					    mov r4.z, r3.z
					    mov r4.y, r5.z
					    mad r3.xyz, r4, c34.x, c34.y
					    max r3.xyz, r3, c33.y
					    mul r0.w, c29.w, c29.w
					    sge r0.w, -r0.w, r0.w
					    lrp r4.xyz, r0.w, r3, r2
					    max r2.xyz, r4, c33.y
					    add oT5.xyz, r0, r2
					    dp4 r1.z, c6, v0
					    mul r0.x, r1.z, c28.x
					    mul r0.x, r0.x, -r0.x
					    exp oT7.x, r0.x
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2, c33.y
					    mov oT3, c33.y
					    mov oT4.w, c33.y
					    mov oT5.w, c33.y
					
					// approximately 90 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor0;
						vec4 unity_LightColor1;
						vec4 unity_LightColor2;
						vec4 unity_LightColor3;
						vec4 unity_LightColor4;
						vec4 unity_LightColor5;
						vec4 unity_LightColor6;
						vec4 unity_LightColor7;
						vec4 unused_2_13[24];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD4.w = 0.0;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor1.xyz;
					    u_xlat2.xyz = unity_LightColor0.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor3.xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_2_0
					    def c7, 1, 0.699999988, 1.70000005, 6
					    def c8, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.w, c7.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c7.y, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c7.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c7.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c3
					    mov r4, c2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c6.x
					    add_sat_pp r1.w, r1.w, c7.x
					    mad_pp r6.xyz, c4, r5, -r4
					    mul_pp r5.xyz, r5, c4
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r4.xyz, c5.x, r6, r4
					    lrp_pp r6.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r6
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c8.x
					    mad_pp r2.xyz, r0.w, r4, r5
					    mad_pp r0.xyz, r2, r0, r1
					    mov_pp r0.w, c7.x
					    mov_pp oC0, r0
					
					// approximately 51 instruction slots used (4 texture, 47 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_2_0
					    def c7, 1, 0.699999988, 1.70000005, 6
					    def c8, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c7.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c7.y, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c7.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c7.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c2
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r5.w, -r0.w, c6.x
					    add_sat_pp r5.w, r5.w, c7.x
					    mad_pp r4.xyz, c4, r5, -r0
					    mul_pp r5.xyz, r5, c4
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r0.xyz, c5.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r5.w, r0
					    mul_pp r1.xyz, r1, r4
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c8.x
					    mad_pp r0.xyz, r0.w, r0, r5
					    mul_pp r2.xyz, r6.x, c3
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mov_pp r0.w, c7.x
					    mov_pp oC0, r0
					
					// approximately 53 instruction slots used (5 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c4
					    mov r4, c3
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c7.x
					    add_sat_pp r1.w, r1.w, c8.x
					    mad_pp r6.xyz, c5, r5, -r4
					    mul_pp r5.xyz, r5, c5
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r4.xyz, c6.x, r6, r4
					    lrp_pp r6.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r6
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r2.xyz, r0.w, r4, r5
					    mad_pp r0.xyz, r2, r0, r1
					    mov_sat r0.w, t7.x
					    lrp_pp r1.xyz, r0.w, r0, c1
					    mov_pp r1.w, c8.x
					    mov_pp oC0, r1
					
					// approximately 53 instruction slots used (4 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c3
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r5.w, -r0.w, c7.x
					    add_sat_pp r5.w, r5.w, c8.x
					    mad_pp r4.xyz, c5, r5, -r0
					    mul_pp r5.xyz, r5, c5
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r0.xyz, c6.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r5.w, r0
					    mul_pp r1.xyz, r1, r4
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r0.xyz, r0.w, r0, r5
					    mul_pp r2.xyz, r6.x, c4
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mov_sat r0.w, t7.x
					    lrp_pp r1.xyz, r0.w, r0, c1
					    mov_pp r1.w, c8.x
					    mov_pp oC0, r1
					
					// approximately 55 instruction slots used (5 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _EmissionColor                 c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texld r6, t0, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c3
					    mov r4, c2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c6.x
					    add_sat_pp r1.w, r1.w, c8.x
					    mad_pp r7.xyz, c4, r5, -r4
					    mul_pp r5.xyz, r5, c4
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r4.xyz, c5.x, r7, r4
					    lrp_pp r7.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r7
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r2.xyz, r0.w, r4, r5
					    mad_pp r0.xyz, r2, r0, r1
					    mad_pp r0.xyz, r6, c7, r0
					    mov_pp r0.w, c8.x
					    mov_pp oC0, r0
					
					// approximately 53 instruction slots used (5 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _EmissionColor                 c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s5
					    texld r7, t0, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c2
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r5.w, -r0.w, c6.x
					    add_sat_pp r5.w, r5.w, c8.x
					    mad_pp r4.xyz, c4, r5, -r0
					    mul_pp r5.xyz, r5, c4
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r0.xyz, c5.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r5.w, r0
					    mul_pp r1.xyz, r1, r4
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r0.xyz, r0.w, r0, r5
					    mul_pp r2.xyz, r6.x, c3
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mad_pp r0.xyz, r7, c7, r0
					    mov_pp r0.w, c8.x
					    mov_pp oC0, r0
					
					// approximately 55 instruction slots used (6 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _EmissionColor                 c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_2_0
					    def c9, 1, 0.699999988, 1.70000005, 6
					    def c10, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c9.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c9.y, c9.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c9.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c9.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texld r6, t0, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c4
					    mov r4, c3
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c7.x
					    add_sat_pp r1.w, r1.w, c9.x
					    mad_pp r7.xyz, c5, r5, -r4
					    mul_pp r5.xyz, r5, c5
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r4.xyz, c6.x, r7, r4
					    lrp_pp r7.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r7
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c10.x
					    mad_pp r2.xyz, r0.w, r4, r5
					    mad_pp r0.xyz, r2, r0, r1
					    mad_pp r0.xyz, r6, c8, r0
					    mov_sat r0.w, t7.x
					    lrp_pp r1.xyz, r0.w, r0, c1
					    mov_pp r1.w, c9.x
					    mov_pp oC0, r1
					
					// approximately 55 instruction slots used (5 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat22 = (-u_xlat0.x) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _EmissionColor                 c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_2_0
					    def c9, 1, 0.699999988, 1.70000005, 6
					    def c10, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.w, c9.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c9.y, c9.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c9.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c9.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s5
					    texld r7, t0, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c3
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r5.w, -r0.w, c9.x
					    add_sat_pp r5.w, r5.w, c7.x
					    mad_pp r4.xyz, c5, r5, -r0
					    mul_pp r5.xyz, r5, c5
					    mul_pp r5.xyz, r0.w, r5
					    mad_pp r0.xyz, c6.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r5.w, r0
					    mul_pp r1.xyz, r1, r4
					    mad_pp r1.xyz, r3.wzyx, r5, r1
					    mul_pp r0.w, r3.x, c10.x
					    mad_pp r0.xyz, r0.w, r0, r5
					    mul_pp r2.xyz, r6.x, c4
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mad_pp r0.xyz, r7, c8, r0
					    mov_sat r0.w, t7.x
					    lrp_pp r1.xyz, r0.w, r0, c1
					    mov r1.w, c9.x
					    mov_pp oC0, r1
					
					// approximately 57 instruction slots used (6 texture, 51 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8 = (-u_xlat1.x) + _Glossiness;
					    u_xlat8 = u_xlat8 + 1.0;
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = _Color.xyz * u_xlat4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * _Color.xyz;
					    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat1.xzw;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_2_0
					    def c7, 1, 0.699999988, 1.70000005, 6
					    def c8, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.w, c7.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c7.y, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c7.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c7.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c3
					    mov r4, c2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c6.x
					    add_sat_pp r1.w, r1.w, c7.x
					    mad_pp r6.xyz, c4, r5, -r4
					    mad_pp r4.xyz, c5.x, r6, r4
					    lrp_pp r6.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r6
					    mul_pp r2.xyz, r5, c4
					    mul_pp r5.w, r5.w, c4.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r5.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c8.x
					    mad_pp r2.xyz, r0.w, r4, r2
					    mad_pp r5.xyz, r2, r0, r1
					    mov_pp oC0, r5
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_2_0
					    def c7, 1, 0.699999988, 1.70000005, 6
					    def c8, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c7.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c7.y, c7.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c7.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c7.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c2
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r2.x, -r0.w, c6.x
					    add_sat_pp r2.x, r2.x, c7.x
					    mad_pp r4.xyz, c4, r5, -r0
					    mad_pp r0.xyz, c5.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r2.x, r0
					    mul_pp r1.xyz, r1, r4
					    mul_pp r2.xyz, r5, c4
					    mul_pp r4.w, r5.w, c4.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r4.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c8.x
					    mad_pp r0.xyz, r0.w, r0, r2
					    mul_pp r2.xyz, r6.x, c3
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r4.xyz, r0, r2, r1
					    mov_pp oC0, r4
					
					// approximately 54 instruction slots used (5 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c4
					    mov r4, c3
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c7.x
					    add_sat_pp r1.w, r1.w, c8.x
					    mad_pp r6.xyz, c5, r5, -r4
					    mad_pp r4.xyz, c6.x, r6, r4
					    lrp_pp r6.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r6
					    mul_pp r2.xyz, r5, c5
					    mul_pp r5.w, r5.w, c5.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r5.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r2.xyz, r0.w, r4, r2
					    mad_pp r0.xyz, r2, r0, r1
					    mov_sat r0.w, t7.x
					    lrp_pp r5.xyz, r0.w, r0, c1
					    mov_pp oC0, r5
					
					// approximately 54 instruction slots used (4 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c3
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r2.x, -r0.w, c8.x
					    add_sat_pp r2.x, r2.x, c7.x
					    mad_pp r4.xyz, c5, r5, -r0
					    mad_pp r0.xyz, c6.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r2.x, r0
					    mul_pp r1.xyz, r1, r4
					    mul_pp r2.xyz, r5, c5
					    mul_pp r4.w, r5.w, c5.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r4.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r0.xyz, r0.w, r0, r2
					    mul_pp r2.xyz, r6.x, c4
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mov_sat r0.w, t7.x
					    lrp_pp r4.xyz, r0.w, r0, c1
					    mov_pp oC0, r4
					
					// approximately 56 instruction slots used (5 texture, 51 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _EmissionColor                 c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texld r6, t0, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c3
					    mov r4, c2
					    mad_pp r0.w, c5.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c6.x
					    add_sat_pp r1.w, r1.w, c8.x
					    mad_pp r7.xyz, c4, r5, -r4
					    mad_pp r4.xyz, c5.x, r7, r4
					    lrp_pp r7.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r7
					    mul_pp r2.xyz, r5, c4
					    mul_pp r5.w, r5.w, c4.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r5.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r2.xyz, r0.w, r4, r2
					    mad_pp r0.xyz, r2, r0, r1
					    mad_pp r5.xyz, r6, c7, r0
					    mov_pp oC0, r5
					
					// approximately 54 instruction slots used (5 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   _EmissionColor                 c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_2_0
					    def c8, 1, 0.699999988, 1.70000005, 6
					    def c9, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.w, c8.x
					    add_pp r0.x, r0.w, -c6.x
					    mad_pp r0.y, r0.x, -c8.y, c8.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c8.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c8.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c6.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s5
					    texld r7, t0, s4
					    pow_pp r0.w, r1.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c2
					    mad_pp r0.w, c5.x, -r0.w, r0.w
					    add_pp r7.w, -r0.w, c6.x
					    add_sat_pp r7.w, r7.w, c8.x
					    mad_pp r4.xyz, c4, r5, -r0
					    mad_pp r0.xyz, c5.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r7.w, r0
					    mul_pp r1.xyz, r1, r4
					    mul_pp r2.xyz, r5, c4
					    mul_pp r4.w, r5.w, c4.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r4.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c9.x
					    mad_pp r0.xyz, r0.w, r0, r2
					    mul_pp r2.xyz, r6.x, c3
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mad_pp r4.xyz, r7, c7, r0
					    mov_pp oC0, r4
					
					// approximately 56 instruction slots used (6 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _EmissionColor                 c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//
					
					    ps_2_0
					    def c9, 1, 0.699999988, 1.70000005, 6
					    def c10, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.w, c9.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c9.y, c9.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c9.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c9.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texld r6, t0, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mul_pp r0.xyz, r1.w, c4
					    mov r4, c3
					    mad_pp r0.w, c6.x, -r4.w, r4.w
					    add_pp r1.w, -r0.w, c7.x
					    add_sat_pp r1.w, r1.w, c9.x
					    mad_pp r7.xyz, c5, r5, -r4
					    mad_pp r4.xyz, c6.x, r7, r4
					    lrp_pp r7.xyz, r2.y, r1.w, r4
					    mul_pp r1.xyz, r1, r7
					    mul_pp r2.xyz, r5, c5
					    mul_pp r5.w, r5.w, c5.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r5.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c10.x
					    mad_pp r2.xyz, r0.w, r4, r2
					    mad_pp r0.xyz, r2, r0, r1
					    mad_pp r0.xyz, r6, c8, r0
					    mov_sat r0.w, t7.x
					    lrp_pp r5.xyz, r0.w, r0, c1
					    mov_pp oC0, r5
					
					// approximately 56 instruction slots used (5 texture, 51 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat25 = (-u_xlat0.x) + _Glossiness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat7 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat8 = u_xlat7.x * 16.0;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
					    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat5.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _EmissionColor;
					//   sampler2D _EmissionMap;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _OcclusionMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceLightPos0           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Color                         c5       1
					//   _Metallic                      c6       1
					//   _Glossiness                    c7       1
					//   _EmissionColor                 c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _MainTex                       s2       1
					//   _OcclusionMap                  s3       1
					//   _EmissionMap                   s4       1
					//   _ShadowMapTexture              s5       1
					//
					
					    ps_2_0
					    def c9, 1, 0.699999988, 1.70000005, 6
					    def c10, 16, 0, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t4.xyz
					    dcl_pp t5.xyz
					    dcl_pp t6
					    dcl t7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.w, c9.x
					    add_pp r0.x, r0.w, -c7.x
					    mad_pp r0.y, r0.x, -c9.y, c9.z
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r1.w, r0.x, c9.w
					    nrm_pp r0.xyz, t4
					    dp3_pp r2.w, t1, r0
					    add_pp r2.x, r2.w, r2.w
					    mad_pp r1.xyz, r0, -r2.x, t1
					    dp3_pp r2.x, -t1, r0
					    add_pp r2.y, r2.x, r2.x
					    mov_sat_pp r2.x, r2.x
					    add_pp r3.y, -r2.x, c9.x
					    mad_pp r2.xyz, r0, -r2.y, -t1
					    dp3_pp r3.x, r2, c0
					    mul_pp r2.xy, r3, r3
					    mul_pp r2.xy, r2, r2
					    add_pp r2.z, r0.w, -c7.x
					    mov_pp r3.x, r2.x
					    mov_pp r3.y, r2.z
					    texldb_pp r1, r1, s0
					    texld_pp r4, t0, s3
					    texld r5, t0, s2
					    texld r3, r3, s1
					    texldp_pp r6, t6, s5
					    texld r7, t0, s4
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r4.y, r1
					    mul_pp r3.yzw, r4.y, t5.wzyx
					    dp3_sat_pp r1.w, r0, c0
					    mov r0, c3
					    mad_pp r0.w, c6.x, -r0.w, r0.w
					    add_pp r7.w, -r0.w, c9.x
					    add_sat_pp r7.w, r7.w, c7.x
					    mad_pp r4.xyz, c5, r5, -r0
					    mad_pp r0.xyz, c6.x, r4, r0
					    lrp_pp r4.xyz, r2.y, r7.w, r0
					    mul_pp r1.xyz, r1, r4
					    mul_pp r2.xyz, r5, c5
					    mul_pp r4.w, r5.w, c5.w
					    mul_pp r2.xyz, r0.w, r2
					    mul_pp r2.xyz, r4.w, r2
					    mad_pp r1.xyz, r3.wzyx, r2, r1
					    mul_pp r0.w, r3.x, c10.x
					    mad_pp r0.xyz, r0.w, r0, r2
					    mul_pp r2.xyz, r6.x, c4
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r0.xyz, r0, r2, r1
					    mad_pp r0.xyz, r7, c8, r0
					    mov_sat r0.w, t7.x
					    lrp_pp r4.xyz, r0.w, r0, c1
					    mov_pp oC0, r4
					
					// approximately 58 instruction slots used (6 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					uniform  samplerCube unity_SpecCube0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.w);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "_EMISSION" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9;
						vec4 _EmissionColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _EmissionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
					    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
					    u_xlat2 = texture(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
					    u_xlat0.x = u_xlat2.w * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx;
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.yyy;
					    u_xlat3.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
					    u_xlat22 = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.y = (-u_xlat0.x) + 1.0;
					    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
					    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat4 = u_xlat4.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
					    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(unity_NHxRoughness, u_xlat0.yw);
					    u_xlat7.x = u_xlat6.x * 16.0;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  GpuProgramID 443055
Program "vp" {
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c13, c13.zwzw
					    mul r0.x, c15.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c12.w
					    mul oT3.xyz, r0.w, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c15
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c13
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c8, r0
					    dp4 oT5.y, c9, r0
					    dp4 oT5.z, c10, r0
					    dp4 oT5.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c16, c16.zwzw
					    mul r0.x, c18.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c15.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c17
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c21.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 oT5.x, c12, r0
					    dp4 oT5.y, c13, r0
					    dp4 oT5.z, c14, r0
					    dp4 oT5.w, c15, r0
					    dp4 oT6.x, c0, r0
					    dp4 oT6.y, c1, r0
					    dp4 oT6.z, c2, r0
					    dp4 oT6.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_2_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c15, c15.zwzw
					    mul r0.x, c17.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c14.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad oT5.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov oPos, r1
					    mov oT5.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad oT6.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   unity_FogParams            c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c17.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_FogParams            c13      1
					//   _MainTex_ST                c14      1
					//   _DetailAlbedoMap_ST        c15      1
					//   _UVSec                     c16      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c14, c14.zwzw
					    mul r0.x, c16.x, c16.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c15.xyxy, c15
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c12.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r0.w, c2, v0
					    mul r1.x, r0.w, c13.x
					    mov oPos.z, r0.w
					    mul r0.w, r1.x, -r1.x
					    exp oT7.x, r0.w
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c15
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c13
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c8, r0
					    dp4 oT5.y, c9, r0
					    dp4 oT5.z, c10, r0
					    dp4 oT5.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   unity_FogParams            c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c17.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   unity_FogParams            c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c15.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    dp4 r0.w, c2, v0
					    mul r1.x, r0.w, c16.x
					    mov oPos.z, r0.w
					    mul r0.w, r1.x, -r1.x
					    exp oT7.x, r0.w
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   unity_FogParams            c22      1
					//   _MainTex_ST                c23      1
					//   _DetailAlbedoMap_ST        c24      1
					//   _UVSec                     c25      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c23, c23.zwzw
					    mul r0.x, c25.x, c25.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c24.xyxy, c24
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c17
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c21.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 oT5.x, c12, r0
					    dp4 oT5.y, c13, r0
					    dp4 oT5.z, c14, r0
					    dp4 oT5.w, c15, r0
					    dp4 oT6.x, c0, r0
					    dp4 oT6.y, c1, r0
					    dp4 oT6.z, c2, r0
					    dp4 oT6.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    nrm r1.xyz, r0
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c22.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 55 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   unity_FogParams            c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_2_0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c16, c16.zwzw
					    mul r0.x, c18.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c14.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c19.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c19.x
					    mad oT5.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mul r0.w, r1.z, c15.x
					    mul r0.w, r0.w, -r0.w
					    exp oT7.x, r0.w
					    mov oPos, r1
					    mov oT5.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = u_xlat0.z * unity_FogParams.x;
					    u_xlat16 = u_xlat16 * (-u_xlat16);
					    vs_TEXCOORD7 = exp2(u_xlat16);
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = u_xlat0.z * unity_FogParams.x;
					    u_xlat16 = u_xlat16 * (-u_xlat16);
					    vs_TEXCOORD7 = exp2(u_xlat16);
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    def c22, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c22.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c22.x
					    mad oT6.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mul r0.w, r1.z, c18.x
					    mul r0.w, r0.w, -r0.w
					    exp oT7.x, r0.w
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   _MainTex_ST                c13      1
					//   _DetailAlbedoMap_ST        c14      1
					//   _UVSec                     c15      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c13, c13.zwzw
					    mul r0.x, c15.x, c15.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c14.xyxy, c14
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c12.w
					    mul oT3.xyz, r0.w, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c15
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c13
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c8, r0
					    dp4 oT5.y, c9, r0
					    dp4 oT5.z, c10, r0
					    dp4 oT5.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c16, c16.zwzw
					    mul r0.x, c18.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c15.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   _MainTex_ST                c22      1
					//   _DetailAlbedoMap_ST        c23      1
					//   _UVSec                     c24      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.z, c6, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c22, c22.zwzw
					    mul r0.x, c24.x, c24.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c23.xyxy, c23
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c17
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c21.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 oT5.x, c12, r0
					    dp4 oT5.y, c13, r0
					    dp4 oT5.z, c14, r0
					    dp4 oT5.w, c15, r0
					    dp4 oT6.x, c0, r0
					    dp4 oT6.y, c1, r0
					    dp4 oT6.z, c2, r0
					    dp4 oT6.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _DetailAlbedoMap_ST        c16      1
					//   _UVSec                     c17      1
					//
					
					    vs_2_0
					    def c18, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c15, c15.zwzw
					    mul r0.x, c17.x, c17.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c16.xyxy, c16
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c14.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c18.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c18.x
					    mad oT5.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov oPos, r1
					    mov oT5.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 45 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    def c21, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c21.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c21.x
					    mad oT6.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   unity_FogParams            c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c17.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _WorldSpaceLightPos0       c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_FogParams            c13      1
					//   _MainTex_ST                c14      1
					//   _DetailAlbedoMap_ST        c15      1
					//   _UVSec                     c16      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c14, c14.zwzw
					    mul r0.x, c16.x, c16.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c15.xyxy, c15
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c11.w, c11
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c12.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r0.w, c2, v0
					    mul r1.x, r0.w, c13.x
					    mov oPos.z, r0.w
					    mul r0.w, r1.x, -r1.x
					    exp oT7.x, r0.w
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _LightMatrix0              c8       4
					//   _World2Object              c12      3
					//   _WorldSpaceCameraPos       c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c15
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c13
					    mad r1.xyz, c12, v1.x, r1
					    mad r1.xyz, c14, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c8, r0
					    dp4 oT5.y, c9, r0
					    dp4 oT5.z, c10, r0
					    dp4 oT5.w, c11, r0
					    mad r0.xyz, r0, -c16.w, c16
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   unity_WorldTransformParams c16      1
					//   unity_FogParams            c17      1
					//   _MainTex_ST                c18      1
					//   _DetailAlbedoMap_ST        c19      1
					//   _UVSec                     c20      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c18, c18.zwzw
					    mul r0.x, c20.x, c20.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c19.xyxy, c19
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c16.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c17.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _WorldSpaceLightPos0       c14      1
					//   unity_WorldTransformParams c15      1
					//   unity_FogParams            c16      1
					//   _MainTex_ST                c17      1
					//   _DetailAlbedoMap_ST        c18      1
					//   _UVSec                     c19      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c17, c17.zwzw
					    mul r0.x, c19.x, c19.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c18.xyxy, c18
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c15.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c14.w, c14
					    dp4 r0.w, c2, v0
					    mul r1.x, r0.w, c16.x
					    mov oPos.z, r0.w
					    mul r0.w, r1.x, -r1.x
					    exp oT7.x, r0.w
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * _LightMatrix0[1].xy;
					    u_xlat0.xy = _LightMatrix0[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = _LightMatrix0[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_World2Shadow[4];
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_World2Shadow         c0       4
					//   glstate_matrix_mvp         c4       4
					//   _Object2World              c8       4
					//   _LightMatrix0              c12      4
					//   _World2Object              c16      3
					//   _WorldSpaceCameraPos       c19      1
					//   _WorldSpaceLightPos0       c20      1
					//   unity_WorldTransformParams c21      1
					//   unity_FogParams            c22      1
					//   _MainTex_ST                c23      1
					//   _DetailAlbedoMap_ST        c24      1
					//   _UVSec                     c25      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c4, v0
					    dp4 oPos.y, c5, v0
					    dp4 oPos.w, c7, v0
					    mad oT0.xy, v2, c23, c23.zwzw
					    mul r0.x, c25.x, c25.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c24.xyxy, c24
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    add r1.xyz, r0, -c19
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c17
					    mad r1.xyz, c16, v1.x, r1
					    mad r1.xyz, c18, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c8, v4
					    dp3 r1.y, c9, v4
					    dp3 r1.z, c10, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c21.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c11, v0
					    dp4 oT5.x, c12, r0
					    dp4 oT5.y, c13, r0
					    dp4 oT5.z, c14, r0
					    dp4 oT5.w, c15, r0
					    dp4 oT6.x, c0, r0
					    dp4 oT6.y, c1, r0
					    dp4 oT6.z, c2, r0
					    dp4 oT6.w, c3, r0
					    mad r0.xyz, r0, -c20.w, c20
					    nrm r1.xyz, r0
					    dp4 r0.x, c6, v0
					    mul r0.y, r0.x, c22.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 55 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_World2Shadow0;
						mat4x4 unity_World2Shadow1;
						mat4x4 unity_World2Shadow2;
						mat4x4 unity_World2Shadow3;
						vec4 unused_3_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_4_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_4_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _LightMatrix0[1];
					    u_xlat1 = _LightMatrix0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _LightMatrix0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = _LightMatrix0[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_World2Shadow0[1];
					    u_xlat1 = unity_World2Shadow0[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_World2Shadow0[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_World2Shadow0[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       3
					//   _World2Object              c7       3
					//   _WorldSpaceCameraPos       c10      1
					//   _ProjectionParams          c11      1
					//   _ScreenParams              c12      1
					//   _WorldSpaceLightPos0       c13      1
					//   unity_WorldTransformParams c14      1
					//   unity_FogParams            c15      1
					//   _MainTex_ST                c16      1
					//   _DetailAlbedoMap_ST        c17      1
					//   _UVSec                     c18      1
					//
					
					    vs_2_0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c16, c16.zwzw
					    mul r0.x, c18.x, c18.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c17.xyxy, c17
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c10
					    mad r0.xyz, r0, -c13.w, c13
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul oT1.xyz, r0.w, r1
					    mul r1.xyz, v1.y, c8
					    mad r1.xyz, c7, v1.x, r1
					    mad r1.xyz, c9, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r0.w, v4.w, c14.w
					    mul oT3.xyz, r0.w, r1
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c11.x
					    mul r2.w, r0.w, c19.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c19.x
					    mad oT5.xy, r2.z, c12.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mul r0.w, r1.z, c15.x
					    mul r0.w, r0.w, -r0.w
					    exp oT7.x, r0.w
					    mov oPos, r1
					    mov oT5.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = u_xlat0.z * unity_FogParams.x;
					    u_xlat16 = u_xlat16 * (-u_xlat16);
					    vs_TEXCOORD7 = exp2(u_xlat16);
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat16 = u_xlat0.z * unity_FogParams.x;
					    u_xlat16 = u_xlat16 * (-u_xlat16);
					    vs_TEXCOORD7 = exp2(u_xlat16);
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      2
					//   _WorldSpaceCameraPos       c13      1
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   _WorldSpaceLightPos0       c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    def c22, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c13
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    mad r0.xyz, r0, -c16.w, c16
					    dp4 r1.y, c1, v0
					    mul r0.w, r1.y, c14.x
					    mul r2.w, r0.w, c22.x
					    dp4 r1.x, c0, v0
					    dp4 r1.w, c3, v0
					    mul r2.xz, r1.xyww, c22.x
					    mad oT6.xy, r2.z, c15.zwzw, r2.xwzw
					    dp4 r1.z, c2, v0
					    mul r0.w, r1.z, c18.x
					    mul r0.w, r0.w, -r0.w
					    exp oT7.x, r0.w
					    mov oPos, r1
					    mov oT6.zw, r1
					    mov oT2.w, r0.x
					    mov oT3.w, r0.y
					    mov oT4.w, r0.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat3.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat3.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat4.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat4.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat4.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat4.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat4.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xy = u_xlat1.yy * _LightMatrix0[1].xy;
					    u_xlat1.xy = _LightMatrix0[0].xy * u_xlat1.xx + u_xlat2.xy;
					    u_xlat1.xy = _LightMatrix0[2].xy * u_xlat1.zz + u_xlat1.xy;
					    vs_TEXCOORD5.xy = _LightMatrix0[3].xy * u_xlat1.ww + u_xlat1.xy;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD7 = exp2(u_xlat1.x);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _DetailAlbedoMap_ST;
					//   row_major float4x4 _LightMatrix0;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   float _UVSec;
					//   row_major float4x4 _World2Object;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _Object2World              c4       4
					//   _World2Object              c8       3
					//   _LightMatrix0              c11      3
					//   _WorldSpaceCameraPos       c14      1
					//   _WorldSpaceLightPos0       c15      1
					//   _LightPositionRange        c16      1
					//   unity_WorldTransformParams c17      1
					//   unity_FogParams            c18      1
					//   _MainTex_ST                c19      1
					//   _DetailAlbedoMap_ST        c20      1
					//   _UVSec                     c21      1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_tangent v4
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.w, c3, v0
					    mad oT0.xy, v2, c19, c19.zwzw
					    mul r0.x, c21.x, c21.x
					    sge r0.x, -r0.x, r0.x
					    mov r1.xy, v2
					    lrp r2.xy, r0.x, r1, v3
					    mad oT0.zw, r2.xyxy, c20.xyxy, c20
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add r1.xyz, r0, -c14
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mul oT1.xyz, r1.w, r1
					    mul r1.xyz, v1.y, c9
					    mad r1.xyz, c8, v1.x, r1
					    mad r1.xyz, c10, v1.z, r1
					    nrm r2.xyz, r1
					    dp3 r1.x, c4, v4
					    dp3 r1.y, c5, v4
					    dp3 r1.z, c6, v4
					    nrm r3.xyz, r1
					    mul r1.xyz, r2.zxyw, r3.yzxw
					    mad r1.xyz, r2.yzxw, r3.zxyw, -r1
					    mov oT4.xyz, r2
					    mov oT2.xyz, r3
					    mul r1.w, v4.w, c17.w
					    mul oT3.xyz, r1.w, r1
					    dp4 r0.w, c7, v0
					    dp4 oT5.x, c11, r0
					    dp4 oT5.y, c12, r0
					    dp4 oT5.z, c13, r0
					    add oT6.xyz, r0, -c16
					    mad r0.xyz, r0, -c15.w, c15
					    nrm r1.xyz, r0
					    dp4 r0.x, c2, v0
					    mul r0.y, r0.x, c18.x
					    mov oPos.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp oT7.x, r0.x
					    mov oT2.w, r1.x
					    mov oT3.w, r1.y
					    mov oT4.w, r1.z
					
					// approximately 51 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 _LightMatrix0;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD7 = exp2(u_xlat0.x);
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat2.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat2.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat3.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat3.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat3.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat3.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat3.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * _LightMatrix0[1].xyz;
					    u_xlat1.xyz = _LightMatrix0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _LightMatrix0[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = _LightMatrix0[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld_pp r2, r2, s2
					    mul_pp r3.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r2.yzw, r3.wzyx, c2.wzyx
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r3.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2, r1.x, r0
					    mul_pp r1.xyz, r2.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_2d s0
					    dcl_2d s1
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.xyz, r0.x, c1
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, r0.w
					    mov r0.w, c5.x
					    add_pp r1.y, r0.w, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    mul_pp r0.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mul_pp r2.xyz, r2, c2
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mad_pp r1.xyz, r2, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 0.5, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c5.y
					    add_pp r1.y, r0.y, -c4.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c5.x
					    dp3 r3.w, t5, t5
					    mov r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s2
					    texld_pp r3, r3, s3
					    mul_pp r4.w, r1.x, c5.z
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r4.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r4, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r4.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r1.x, r0
					    mul r1.x, r2.w, r3.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    cmp_pp r1.xyz, -t5.z, c5.w, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov r0.w, c5.y
					    mov_pp oC0, r0
					
					// approximately 38 instruction slots used (4 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r2, r2, s3
					    texld r4, t5, s2
					    mul_pp r3.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r2.yzw, r3.wzyx, c2.wzyx
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r3.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2, r1.x, r0
					    mul_pp r1.x, r2.x, r4.w
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 34 instruction slots used (4 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld_pp r3, t5, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.w, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 31 instruction slots used (3 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c6, 0.5, 0, 1, 16
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_pp t6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.z, c6.z
					    add_pp r1.y, r0.z, -c5.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c6.x
					    dp3_pp r3.w, t5, t5
					    mov_pp r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s3
					    texld_pp r3, r3, s4
					    texldp_pp r5, t6, s2
					    mul_pp r4.w, r1.x, c6.w
					    mov r1, c1
					    mad_pp r2.xyz, c3, r4, -r1
					    mul_pp r3.yzw, r4.wzyx, c3.wzyx
					    mad_pp r1.xyz, c4.x, r2, r1
					    mul_pp r1.xyz, r1, r4.w
					    mad_pp r1.w, c4.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3.wzyx, r1.w, r1
					    mul r1.w, r2.w, r3.x
					    cmp r1.w, -t5.z, c6.y, r1.w
					    lrp_pp r2.x, r5.x, r0.z, c0.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c2.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov r0.w, c6.z
					    mov_pp oC0, r0
					
					// approximately 41 instruction slots used (5 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texldp_pp r3, t5, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 31 instruction slots used (3 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_pp t6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld r3, t5, s3
					    texldp_pp r4, t6, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.x, r3.w, r4.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 33 instruction slots used (4 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s3
					    mul_pp r3.w, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r3.xyz, r3, c4
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r1, r3.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3, r1.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_pp r0.w, c7.y
					    mov_pp oC0, r0
					
					// approximately 40 instruction slots used (4 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s4
					    texld r5, t5, s3
					    mul_pp r3.w, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r3.xyz, r3, c4
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r1, r3.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3, r1.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul r0.y, r2.x, r5.w
					    mul_pp r1.w, r1.w, r0.y
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_pp r0.w, c7.y
					    mov_pp oC0, r0
					
					// approximately 42 instruction slots used (5 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat4.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5 = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat4.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5 = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld_pp r2, r2, s2
					    mul_pp r3.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r2.yzw, r3.wzyx, c2.wzyx
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r3.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2, r1.x, r0
					    mul_pp r1.xyz, r2.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 34 instruction slots used (3 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.xyz, r0.x, c1
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, r0.w
					    mov r0.w, c5.x
					    add_pp r1.y, r0.w, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    mul_pp r0.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mul_pp r2.xyz, r2, c2
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mad_pp r1.xyz, r2, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 31 instruction slots used (2 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 0.5, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c5.y
					    add_pp r1.y, r0.y, -c4.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c5.x
					    dp3 r3.w, t5, t5
					    mov r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s2
					    texld_pp r3, r3, s3
					    mul_pp r4.w, r1.x, c5.z
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r4.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r4, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r4.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r1.x, r0
					    mul r1.x, r2.w, r3.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    cmp_pp r1.xyz, -t5.z, c5.w, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov r0.w, c5.y
					    mov_pp oC0, r0
					
					// approximately 40 instruction slots used (4 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r2, r2, s3
					    texld r4, t5, s2
					    mul_pp r3.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r2.yzw, r3.wzyx, c2.wzyx
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r3.w
					    mad_pp r1.x, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2, r1.x, r0
					    mul_pp r1.x, r2.x, r4.w
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 36 instruction slots used (4 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld_pp r3, t5, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.w, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c6, 0.5, 0, 1, 16
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_pp t6
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.z, c6.z
					    add_pp r1.y, r0.z, -c5.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c6.x
					    dp3_pp r3.w, t5, t5
					    mov_pp r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s3
					    texld_pp r3, r3, s4
					    texldp_pp r5, t6, s2
					    mul_pp r4.w, r1.x, c6.w
					    mov r1, c1
					    mad_pp r2.xyz, c3, r4, -r1
					    mul_pp r3.yzw, r4.wzyx, c3.wzyx
					    mad_pp r1.xyz, c4.x, r2, r1
					    mul_pp r1.xyz, r1, r4.w
					    mad_pp r1.w, c4.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3.wzyx, r1.w, r1
					    mul r1.w, r2.w, r3.x
					    cmp r1.w, -t5.z, c6.y, r1.w
					    lrp_pp r2.x, r5.x, r0.z, c0.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c2.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov r0.w, c6.z
					    mov_pp oC0, r0
					
					// approximately 43 instruction slots used (5 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texldp_pp r3, t5, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_pp t6
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld r3, t5, s3
					    texldp_pp r4, t6, s2
					    mul_pp r2.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r0.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mul_pp r2.xyz, r2, c2
					    mad_pp r0.yzw, c3.x, r0, r1.wzyx
					    mul_pp r0.yzw, r0, r2.w
					    mad_pp r2.w, c3.x, -r1.w, r1.w
					    mad_pp r0.yzw, r2.wzyx, r2.w, r0
					    mul_pp r1.x, r3.w, r4.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c5.x
					    mov_pp oC0, r0
					
					// approximately 35 instruction slots used (4 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s3
					    mul_pp r3.w, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r3.xyz, r3, c4
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r1, r3.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3, r1.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c7.y
					    mov_pp oC0, r0
					
					// approximately 42 instruction slots used (4 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat4));
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s4
					    texld r5, t5, s3
					    mul_pp r3.w, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mul_pp r3.xyz, r3, c4
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r1, r3.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mad_pp r1.xyz, r3, r1.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul r0.y, r2.x, r5.w
					    mul_pp r1.w, r1.w, r0.y
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r0.xyz, r0, r0.w
					    mov_pp r0.w, c7.y
					    mov_pp oC0, r0
					
					// approximately 44 instruction slots used (5 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat4.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5 = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD7;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = _Color.xyz * u_xlat1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat4.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5 = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD7;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld_pp r2, r2, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r2.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r2.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r3, c2
					    mul_pp r3.w, r3.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r3.w, r0
					    mul_pp r1.xyz, r2.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r3.xyz, r0.wzyx, r1
					    mov_pp oC0, r3
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_2d s0
					    dcl_2d s1
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.xyz, r0.x, c1
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, r0.w
					    mov r0.w, c5.x
					    add_pp r1.y, r0.w, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    mul_pp r0.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r2.xyz, r2, c2
					    mul_pp r3.w, r2.w, c2.w
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r1.xyz, r2, r3.w, r1
					    mul_pp r3.xyz, r0, r1
					    mov_pp oC0, r3
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat1.yzw;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat1.yzw;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 0.5, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c5.y
					    add_pp r1.y, r0.y, -c4.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c5.x
					    dp3 r3.w, t5, t5
					    mov r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s2
					    texld_pp r3, r3, s3
					    mul_pp r0.y, r1.x, c5.z
					    mov r1, c0
					    mad_pp r2.xyz, c2, r4, -r1
					    mad_pp r1.xyz, c3.x, r2, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r4, c2
					    mul_pp r4.w, r4.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r4.w, r0
					    mul r1.x, r2.w, r3.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    cmp_pp r1.xyz, -t5.z, c5.w, r1
					    mul_pp r4.xyz, r0.wzyx, r1
					    mov_pp oC0, r4
					
					// approximately 39 instruction slots used (4 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r2, r2, s3
					    texld r4, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r2.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r2.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r3, c2
					    mul_pp r3.w, r3.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r3.w, r0
					    mul_pp r1.x, r2.x, r4.w
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r3.xyz, r0.wzyx, r1
					    mov_pp oC0, r3
					
					// approximately 35 instruction slots used (4 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld_pp r3, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.w, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r2.xyz, r0.wzyx, r1
					    mov_pp oC0, r2
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c6, 0.5, 0, 1, 16
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_pp t6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.z, c6.z
					    add_pp r1.y, r0.z, -c5.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c6.x
					    dp3_pp r3.w, t5, t5
					    mov_pp r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s3
					    texld_pp r3, r3, s4
					    texldp_pp r5, t6, s2
					    mul_pp r0.y, r1.x, c6.w
					    mov r1, c1
					    mad_pp r2.xyz, c3, r4, -r1
					    mad_pp r1.xyz, c4.x, r2, r1
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp r2.xyz, r4, c3
					    mul_pp r4.w, r4.w, c3.w
					    mad_pp r1.w, c4.x, -r1.w, r1.w
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r1.xyz, r2, r4.w, r1
					    mul r1.w, r2.w, r3.x
					    cmp r1.w, -t5.z, c6.y, r1.w
					    lrp_pp r2.x, r5.x, r0.z, c0.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c2.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r4.xyz, r0, r1
					    mov_pp oC0, r4
					
					// approximately 42 instruction slots used (5 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texldp_pp r3, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r3.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r2.xyz, r0.wzyx, r1
					    mov_pp oC0, r2
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_pp t6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld r3, t5, s3
					    texldp_pp r4, t6, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.x, r3.w, r4.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r2.xyz, r0.wzyx, r1
					    mov_pp oC0, r2
					
					// approximately 34 instruction slots used (4 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s3
					    mul_pp r0.z, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r0.z, r1
					    mul_pp r2.yzw, r3.wzyx, c4.wzyx
					    mul_pp r3.w, r3.w, c4.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mul_pp r2.yzw, r1.w, r2
					    mad_pp r1.xyz, r2.wzyx, r3.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r3.xyz, r0, r1
					    mov_pp oC0, r3
					
					// approximately 41 instruction slots used (4 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s4
					    texld r5, t5, s3
					    mul_pp r0.z, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r0.z, r1
					    mul_pp r2.yzw, r3.wzyx, c4.wzyx
					    mul_pp r3.w, r3.w, c4.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mul_pp r2.yzw, r1.w, r2
					    mad_pp r1.xyz, r2.wzyx, r3.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul r0.y, r2.x, r5.w
					    mul_pp r1.w, r1.w, r0.y
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r3.xyz, r0, r1
					    mov_pp oC0, r3
					
					// approximately 43 instruction slots used (5 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat5.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat5.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5.x = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat5.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat5.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5.x = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld_pp r2, r2, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r2.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r2.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r3, c2
					    mul_pp r3.w, r3.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r3.w, r0
					    mul_pp r1.xyz, r2.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r3.xyz, r0, r0.w
					    mov_pp oC0, r3
					
					// approximately 35 instruction slots used (3 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.xyz, r0.x, c1
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r1.x, r0.w, r0.w
					    mov r0.w, c5.x
					    add_pp r1.y, r0.w, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    mul_pp r0.w, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r2.xyz, r2, c2
					    mul_pp r3.w, r2.w, c2.w
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r1.xyz, r2, r3.w, r1
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r3.xyz, r0, r0.w
					    mov_pp oC0, r3
					
					// approximately 32 instruction slots used (2 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat1.yzw;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat1.yzw;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 0.5, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c5.y
					    add_pp r1.y, r0.y, -c4.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c5.x
					    dp3 r3.w, t5, t5
					    mov r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s2
					    texld_pp r3, r3, s3
					    mul_pp r0.y, r1.x, c5.z
					    mov r1, c0
					    mad_pp r2.xyz, c2, r4, -r1
					    mad_pp r1.xyz, c3.x, r2, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r4, c2
					    mul_pp r4.w, r4.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r4.w, r0
					    mul r1.x, r2.w, r3.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    cmp_pp r1.xyz, -t5.z, c5.w, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r4.xyz, r0, r0.w
					    mov_pp oC0, r4
					
					// approximately 41 instruction slots used (4 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//   _LightTextureB0                s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r2, r2, s3
					    texld r4, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r2.yzw, c2.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r2.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r3, c2
					    mul_pp r3.w, r3.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r3.w, r0
					    mul_pp r1.x, r2.x, r4.w
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r3.xyz, r0, r0.w
					    mov_pp oC0, r3
					
					// approximately 37 instruction slots used (4 texture, 33 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _LightTexture0                 s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld_pp r3, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.w, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r2.xyz, r0, r0.w
					    mov_pp oC0, r2
					
					// approximately 34 instruction slots used (3 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightShadowData               c0       1
					//   unity_ColorSpaceDielectricSpec c1       1
					//   _LightColor0                   c2       1
					//   _Color                         c3       1
					//   _Metallic                      c4       1
					//   _Glossiness                    c5       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c6, 0.5, 0, 1, 16
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl_pp t6
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.z, c6.z
					    add_pp r1.y, r0.z, -c5.x
					    rcp r0.y, t5.w
					    mad_pp r2.xy, t5, r0.y, c6.x
					    dp3_pp r3.w, t5, t5
					    mov_pp r3.xy, r3.w
					    texld r1, r1, s0
					    texld r4, t0, s1
					    texld_pp r2, r2, s3
					    texld_pp r3, r3, s4
					    texldp_pp r5, t6, s2
					    mul_pp r0.y, r1.x, c6.w
					    mov r1, c1
					    mad_pp r2.xyz, c3, r4, -r1
					    mad_pp r1.xyz, c4.x, r2, r1
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp r2.xyz, r4, c3
					    mul_pp r4.w, r4.w, c3.w
					    mad_pp r1.w, c4.x, -r1.w, r1.w
					    mul_pp r2.xyz, r1.w, r2
					    mad_pp r1.xyz, r2, r4.w, r1
					    mul r1.w, r2.w, r3.x
					    cmp r1.w, -t5.z, c6.y, r1.w
					    lrp_pp r2.x, r5.x, r0.z, c0.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c2.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r4.xyz, r0, r0.w
					    mov_pp oC0, r4
					
					// approximately 44 instruction slots used (5 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[24];
						vec4 _LightShadowData;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat7 + _LightShadowData.x;
					    u_xlat1.x = u_xlat4.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl_pp t5
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texldp_pp r3, t5, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.yzw, c2.wzyx, r2.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c3.x, r3.wzyx, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.xyz, r3.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r2.xyz, r0, r0.w
					    mov_pp oC0, r2
					
					// approximately 34 instruction slots used (3 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _LightColor0                   c1       1
					//   _Color                         c2       1
					//   _Metallic                      c3       1
					//   _Glossiness                    c4       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c5, 1, 16, 0, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xy
					    dcl_pp t6
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r2.x, c5.x
					    add_pp r1.y, r2.x, -c4.x
					    texld r1, r1, s0
					    texld r2, t0, s1
					    texld r3, t5, s3
					    texldp_pp r4, t6, s2
					    mul_pp r0.y, r1.x, c5.y
					    mov r1, c0
					    mad_pp r3.xyz, c2, r2, -r1
					    mad_pp r1.xyz, c3.x, r3, r1
					    mul_pp r0.yzw, r0.y, r1.wzyx
					    mul_pp r1.xyz, r2, c2
					    mul_pp r2.w, r2.w, c2.w
					    mad_pp r1.w, c3.x, -r1.w, r1.w
					    mul_pp r1.xyz, r1.w, r1
					    mad_pp r0.yzw, r1.wzyx, r2.w, r0
					    mul_pp r1.x, r3.w, r4.x
					    mul_pp r1.xyz, r1.x, c1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.wzyx, r1
					    mov_sat r0.w, t7.x
					    mul_pp r2.xyz, r0, r0.w
					    mov_pp oC0, r2
					
					// approximately 36 instruction slots used (4 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_2d s3
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s3
					    mul_pp r0.z, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r0.z, r1
					    mul_pp r2.yzw, r3.wzyx, c4.wzyx
					    mul_pp r3.w, r3.w, c4.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mul_pp r2.yzw, r1.w, r2
					    mad_pp r1.xyz, r2.wzyx, r3.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r3.xyz, r0, r0.w
					    mov_pp oC0, r3
					
					// approximately 43 instruction slots used (4 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat3.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat4.xx);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _LightPositionRange            c0       1
					//   _LightShadowData               c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Color                         c4       1
					//   _Metallic                      c5       1
					//   _Glossiness                    c6       1
					//   unity_NHxRoughness             s0       1
					//   _MainTex                       s1       1
					//   _ShadowMapTexture              s2       1
					//   _LightTexture0                 s3       1
					//   _LightTextureB0                s4       1
					//
					
					    ps_2_0
					    def c7, 0.970000029, 1, 16, 0
					    dcl t0.xy
					    dcl_pp t1.xyz
					    dcl_pp t2
					    dcl_pp t3
					    dcl_pp t4
					    dcl t5.xyz
					    dcl t6.xyz
					    dcl t7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    nrm_pp r0.xyz, t4
					    dp3_pp r0.w, -t1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r1.xyz, r0, -r0.w, -t1
					    mov_pp r2.x, t2.w
					    mov_pp r2.y, t3.w
					    mov_pp r2.z, t4.w
					    dp3_pp r0.w, r1, r2
					    dp3_sat_pp r0.x, r0, r2
					    mul_pp r0.y, r0.w, r0.w
					    mul_pp r1.x, r0.y, r0.y
					    mov r0.y, c7.y
					    add_pp r1.y, r0.y, -c6.x
					    dp3 r2.xy, t5, t5
					    texld r1, r1, s0
					    texld r3, t0, s1
					    texld r4, t6, s2
					    texld r2, r2, s4
					    texld r5, t5, s3
					    mul_pp r0.z, r1.x, c7.z
					    mov r1, c2
					    mad_pp r2.yzw, c4.wzyx, r3.wzyx, -r1.wzyx
					    mad_pp r1.xyz, c5.x, r2.wzyx, r1
					    mul_pp r1.xyz, r0.z, r1
					    mul_pp r2.yzw, r3.wzyx, c4.wzyx
					    mul_pp r3.w, r3.w, c4.w
					    mad_pp r1.w, c5.x, -r1.w, r1.w
					    mul_pp r2.yzw, r1.w, r2
					    mad_pp r1.xyz, r2.wzyx, r3.w, r1
					    dp3 r1.w, t6, t6
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c0.w
					    mad r1.w, r1.w, -c7.x, r4.x
					    cmp_pp r1.w, r1.w, r0.y, c1.x
					    mul r0.y, r2.x, r5.w
					    mul_pp r1.w, r1.w, r0.y
					    mul_pp r0.yzw, r1.w, c3.wzyx
					    mul_pp r0.xyz, r0.x, r0.wzyx
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, t7.x
					    mul_pp r3.xyz, r0, r0.w
					    mov_pp oC0, r3
					
					// approximately 45 instruction slots used (5 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat5.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat5.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5.x = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD7;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _Color;
						vec4 unused_0_6[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_9[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.x = u_xlat12 * u_xlat12;
					    u_xlat1.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat4.x = u_xlat1.x * 16.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1 = u_xlat1.wxyz * _Color.wxyz;
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat5.xyz = u_xlat1.yzw * u_xlat2.xxx;
					    u_xlat4.xyz = u_xlat5.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    SV_Target0.w = u_xlat1.x;
					    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat5.xx);
					    u_xlat3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
					    u_xlat5.x = u_xlat2.x * u_xlat3.w;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD7;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 509801
Program "vp" {
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_MatrixVP        c4       4
					//   _Object2World         c8       3
					//   _World2Object         c11      3
					//   _WorldSpaceLightPos0  c14      1
					//   unity_LightShadowBias c15      1
					//
					
					    vs_2_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    mul r0.x, c15.z, c15.z
					    slt r0.x, -r0.x, r0.x
					    mul r0.yzw, v1.y, c12.xxyz
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mad r2, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, -c14.w, c14.xxyz
					    nrm r4.xyz, r0.yzww
					    dp3 r0.y, r1, r4
					    mad r0.y, r0.y, -r0.y, c16.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c15.z
					    mad r1.xyz, r1, -r0.y, r3
					    mov r1.w, c16.x
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 r1.x, c0, r2
					    dp4 r1.y, c1, r2
					    dp4 r1.z, c2, r2
					    dp4 r1.w, c3, r2
					    lrp r2, r0.x, r3, r1
					    rcp r0.x, r2.w
					    mul r0.x, r0.x, c15.x
					    max r0.x, r0.x, c16.y
					    min r0.x, r0.x, c16.x
					    add r0.x, r0.x, r2.z
					    max r0.y, r0.x, c16.y
					    lrp r2.z, c15.y, r0.y, r0.x
					    mov oT0, r2
					    mov oPos, r2
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_0_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_DEPTH" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_0_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   _Object2World       c4       3
					//   _LightPositionRange c7       1
					//
					
					    vs_2_0
					    dcl_position v0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add oT0.xyz, r0, -c7
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					
					// approximately 8 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						vec4 unused_1_3[6];
					};
					in  vec4 in_POSITION0;
					out vec3 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_CUBE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						vec4 unused_1_3[6];
					};
					in  vec4 in_POSITION0;
					out vec3 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_MatrixVP        c4       4
					//   _Object2World         c8       3
					//   _World2Object         c11      3
					//   _WorldSpaceLightPos0  c14      1
					//   unity_LightShadowBias c15      1
					//   _MainTex_ST           c16      1
					//
					
					    vs_2_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    mad oT1.xy, v2, c16, c16.zwzw
					    mul r0.x, c15.z, c15.z
					    slt r0.x, -r0.x, r0.x
					    mul r0.yzw, v1.y, c12.xxyz
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mad r2, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, -c14.w, c14.xxyz
					    nrm r4.xyz, r0.yzww
					    dp3 r0.y, r1, r4
					    mad r0.y, r0.y, -r0.y, c17.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c15.z
					    mad r1.xyz, r1, -r0.y, r3
					    mov r1.w, c17.x
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 r1.x, c0, r2
					    dp4 r1.y, c1, r2
					    dp4 r1.z, c2, r2
					    dp4 r1.w, c3, r2
					    lrp r2, r0.x, r3, r1
					    rcp r0.x, r2.w
					    mul r0.x, r0.x, c15.x
					    max r0.x, r0.x, c17.y
					    min r0.x, r0.x, c17.x
					    add r0.x, r0.x, r2.z
					    max r0.y, r0.x, c17.y
					    lrp r2.z, c15.y, r0.y, r0.x
					    mov oT0, r2
					    mov oPos, r2
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _Object2World[3].xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = max(u_xlat6, 0.0);
					    u_xlat0.x = (-u_xlat6) + u_xlat0.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   _Object2World       c4       3
					//   _LightPositionRange c7       1
					//   _MainTex_ST         c8       1
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add oT0.xyz, r0, -c7
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mad oT1.xy, v1, c8, c8.zwzw
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 _Object2World;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
					    u_xlat0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _Object2World[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					    ps_2_0
					    dcl t0
					    rcp r0.w, t0.w
					    mul_pp r0, r0.w, t0.z
					    mov_pp oC0, r0
					
					// approximately 3 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_DEPTH" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//
					
					    ps_2_0
					    dcl t0.xyz
					    dp3 r0.w, t0, t0
					    rsq r0.x, r0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul_pp r0, r0.x, c0.w
					    mov_pp oC0, r0
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					void main()
					{
					    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0 = sqrt(u_xlat0);
					    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
					    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_CUBE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					void main()
					{
					    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0 = sqrt(u_xlat0);
					    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
					    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _Cutoff      c1       1
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl t0
					    dcl t1.xy
					    dcl_2d s0
					    texld r0, t1, s0
					    mov r1.w, c0.w
					    mad_pp r0, r0.w, r1.w, -c1.x
					    texkill r0
					    rcp r0.x, t0.w
					    mul_pp r0, r0.x, t0.z
					    mov_pp oC0, r0
					
					// approximately 7 instruction slots used (1 texture, 6 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						float _Cutoff;
						vec4 unused_0_3;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						float _Cutoff;
						vec4 unused_0_3;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _Color                c2       1
					//   _Cutoff               c3       1
					//   _MainTex              s0       1
					//
					
					    ps_2_0
					    dcl t0.xyz
					    dcl t1.xy
					    dcl_2d s0
					    texld r0, t1, s0
					    mov r1.w, c2.w
					    mad_pp r0, r0.w, r1.w, -c3.x
					    texkill r0
					    dp3 r0.x, t0, t0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul_pp r0, r0.x, c0.w
					    mov_pp oC0, r0
					
					// approximately 10 instruction slots used (1 texture, 9 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						float _Cutoff;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						float _Cutoff;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
}
}
 }
}
Fallback "VertexLit"
}