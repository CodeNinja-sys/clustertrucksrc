Shader "Hidden/SENaturalBloomAndDirtyLens" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
 _Bloom0 ("Bloom0 (RGB)", 2D) = "black" { }
 _Bloom1 ("Bloom1 (RGB)", 2D) = "black" { }
 _Bloom2 ("Bloom2 (RGB)", 2D) = "black" { }
 _Bloom3 ("Bloom3 (RGB)", 2D) = "black" { }
 _Bloom4 ("Bloom4 (RGB)", 2D) = "black" { }
 _Bloom5 ("Bloom5 (RGB)", 2D) = "black" { }
 _LensDirt ("Lens Dirt", 2D) = "black" { }
}
SubShader { 
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 36231
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Bloom0;
					//   sampler2D _Bloom1;
					//   sampler2D _Bloom2;
					//   sampler2D _Bloom3;
					//   sampler2D _Bloom4;
					//   sampler2D _Bloom5;
					//   float _BloomIntensity;
					//   sampler2D _LensDirt;
					//   float _LensDirtIntensity;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _BloomIntensity    c0       1
					//   _LensDirtIntensity c1       1
					//   _MainTex           s0       1
					//   _Bloom0            s1       1
					//   _Bloom1            s2       1
					//   _Bloom2            s3       1
					//   _Bloom3            s4       1
					//   _Bloom4            s5       1
					//   _Bloom5            s6       1
					//   _LensDirt          s7       1
					//
					
					    ps_3_0
					    def c2, 0.600000024, 0.5, 0.449999988, 0.349999994
					    def c3, 0.230000004, 0.800000012, 0.454545438, 0.3125
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    texld_pp r0, v1, s2
					    mul r1.xyz, r0, c2.x
					    texld_pp r2, v1, s1
					    mad r1.xyz, r2, c2.y, r1
					    mad r0.xyz, r0, c3.y, r2
					    texld_pp r2, v1, s3
					    mad r1.xyz, r2, c2.x, r1
					    mad r0.xyz, r2, c2.x, r0
					    texld_pp r2, v1, s4
					    mad r1.xyz, r2, c2.z, r1
					    mad r0.xyz, r2, c2.z, r0
					    texld_pp r2, v1, s5
					    mad r1.xyz, r2, c2.w, r1
					    mad r0.xyz, r2, c2.w, r0
					    texld_pp r2, v1, s6
					    mad_pp r1.xyz, r2, c3.x, r1
					    mad_pp r0.xyz, r2, c3.x, r0
					    texld_pp r2, v1, s0
					    mad_pp r1.xyz, r1, c3.z, -r2
					    mad_pp r1.xyz, c0.x, r1, r2
					    mov_pp oC0.w, r2.w
					    mad r0.xyz, r0, c3.w, -r1
					    texld_pp r2, v0, s7
					    mul_sat r2.xyz, r2, c1.x
					    mad_pp oC0.xyz, r2, r0, r1
					
					// approximately 25 instruction slots used (8 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BloomIntensity;
						float _LensDirtIntensity;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LensDirt;
					uniform  sampler2D _Bloom0;
					uniform  sampler2D _Bloom1;
					uniform  sampler2D _Bloom2;
					uniform  sampler2D _Bloom3;
					uniform  sampler2D _Bloom4;
					uniform  sampler2D _Bloom5;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_Bloom1, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    u_xlat2 = texture(_Bloom0, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat2.xyz;
					    u_xlat2 = texture(_Bloom2, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat2 = texture(_Bloom3, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.449999988, 0.449999988, 0.449999988) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.449999988, 0.449999988, 0.449999988) + u_xlat0.xyz;
					    u_xlat2 = texture(_Bloom4, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.349999994, 0.349999994, 0.349999994) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.349999994, 0.349999994, 0.349999994) + u_xlat0.xyz;
					    u_xlat2 = texture(_Bloom5, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.230000004, 0.230000004, 0.230000004) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.230000004, 0.230000004, 0.230000004) + u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.454545438, 0.454545438, 0.454545438) + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BloomIntensity, _BloomIntensity, _BloomIntensity)) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.3125, 0.3125, 0.3125) + (-u_xlat1.xyz);
					    u_xlat2 = texture(_LensDirt, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_LensDirtIntensity, _LensDirtIntensity, _LensDirtIntensity));
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 74959
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, -0.5, 0.5, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    add o1.xy, c4, v1
					    mov r0.xy, c5
					    mad o4.xy, c4, r0, v1
					    mov o1.zw, c5.z
					    mad r0, c4.xyxy, r0.xxyx, v1.xyxy
					    mov o2.xy, r0
					    mov o3.xy, r0.zwzw
					    mov o2.zw, c5.z
					    mov o3.zw, c5.z
					    mov o4.zw, c5.z
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-0.5, -0.5, 0.5, -0.5) + in_TEXCOORD0.xyxy;
					    vs_TEXCOORD1.xy = u_xlat0.xy;
					    vs_TEXCOORD2.xy = u_xlat0.zw;
					    vs_TEXCOORD2.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD3.xy = _MainTex_TexelSize.xy * vec2(-0.5, 0.5) + in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.25, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1.xy
					    dcl_texcoord2_pp v2.xy
					    dcl_texcoord3_pp v3.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    texld r1, v1, s0
					    add_pp r0, r0, r1
					    texld r1, v2, s0
					    add_pp r0, r0, r1
					    texld r1, v3, s0
					    add_pp r0, r0, r1
					    mul_pp r0, r0, c0.x
					    max_pp oC0, r0, c0.y
					
					// approximately 9 instruction slots used (4 texture, 5 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 185457
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurSize;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurSize          c5       1
					//
					
					    vs_3_0
					    def c6, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mul r0.xy, r0, c4
					    mul o2.xy, r0, c5.x
					    mad o1, v1.xyxx, c6.yyxx, c6.xxyy
					    mov o2.zw, c6.y
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD0.zw = vec2(1.0, 1.0);
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(0.0, 1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_BlurSize);
					    vs_TEXCOORD1.zw = vec2(1.0, 1.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 3, 0.0855000019, 0, 0.0205000006
					    def c1, 0.231999993, 0, 0.324000001, 1
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1.xy
					    dcl_2d s0
					    mov r0.xy, v1
					    mad_pp r0.xy, r0, -c0.x, v0
					    add_pp r0.zw, r0.xyxy, v1.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r2, r0.zwzw, s0
					    add_pp r0.xy, r0.zwzw, v1
					    mul_pp r2, r2, c0.yyyz
					    mad_pp r1, r1, c0.wwwz, r2
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.xxxy, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.zzzw, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.xxxy, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    texld_pp r0, r0, s0
					    mad_pp r1, r2, c0.yyyz, r1
					    mad_pp oC0, r0, c0.wwwz, r1
					
					// approximately 22 instruction slots used (7 texture, 15 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec4 ImmCB_0_0_0[7];
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					int u_xlati2;
					vec4 u_xlat3;
					bool u_xlatb6;
					vec2 u_xlat8;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(0.0205000006, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0855000019, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.231999993, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.324000001, 0.0, 0.0, 1.0);
						ImmCB_0_0_0[4] = vec4(0.231999993, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[5] = vec4(0.0855000019, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[6] = vec4(0.0205000006, 0.0, 0.0, 0.0);
					    u_xlat0.xy = (-vs_TEXCOORD1.xy) * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat8.xy = u_xlat0.xy;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<7 ; u_xlati_loop_1++)
					    {
					        u_xlat3 = texture(_MainTex, u_xlat8.xy);
					        u_xlat1 = u_xlat3 * ImmCB_0_0_0[u_xlati_loop_1].xxxw + u_xlat1;
					        u_xlat8.xy = u_xlat8.xy + vs_TEXCOORD1.xy;
					    }
					    SV_Target0 = u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 212404
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurSize;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurSize          c5       1
					//
					
					    vs_3_0
					    def c6, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xy, c6
					    mul r0.xy, r0, c4
					    mul o2.xy, r0, c5.x
					    mad o1, v1.xyxx, c6.xxyy, c6.yyxx
					    mov o2.zw, c6.x
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD0.zw = vec2(1.0, 1.0);
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(1.0, 0.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_BlurSize);
					    vs_TEXCOORD1.zw = vec2(1.0, 1.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 3, 0.0855000019, 0, 0.0205000006
					    def c1, 0.231999993, 0, 0.324000001, 1
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1.xy
					    dcl_2d s0
					    mov r0.xy, v1
					    mad_pp r0.xy, r0, -c0.x, v0
					    add_pp r0.zw, r0.xyxy, v1.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r2, r0.zwzw, s0
					    add_pp r0.xy, r0.zwzw, v1
					    mul_pp r2, r2, c0.yyyz
					    mad_pp r1, r1, c0.wwwz, r2
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.xxxy, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.zzzw, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    mad_pp r1, r2, c1.xxxy, r1
					    texld_pp r2, r0, s0
					    add_pp r0.xy, r0, v1
					    texld_pp r0, r0, s0
					    mad_pp r1, r2, c0.yyyz, r1
					    mad_pp oC0, r0, c0.wwwz, r1
					
					// approximately 22 instruction slots used (7 texture, 15 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec4 ImmCB_0_0_0[7];
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					int u_xlati2;
					vec4 u_xlat3;
					bool u_xlatb6;
					vec2 u_xlat8;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(0.0205000006, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0855000019, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.231999993, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.324000001, 0.0, 0.0, 1.0);
						ImmCB_0_0_0[4] = vec4(0.231999993, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[5] = vec4(0.0855000019, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[6] = vec4(0.0205000006, 0.0, 0.0, 0.0);
					    u_xlat0.xy = (-vs_TEXCOORD1.xy) * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat8.xy = u_xlat0.xy;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<7 ; u_xlati_loop_1++)
					    {
					        u_xlat3 = texture(_MainTex, u_xlat8.xy);
					        u_xlat1 = u_xlat3 * ImmCB_0_0_0[u_xlati_loop_1].xxxw + u_xlat1;
					        u_xlat8.xy = u_xlat8.xy + vs_TEXCOORD1.xy;
					    }
					    SV_Target0 = u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  ZTest False
  ZWrite Off
  Cull Off
  GpuProgramID 275591
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mad o1.xzw, v1.x, c5.zyxx, c5.xyzz
					    mad o2, v1.xyxx, c5.zzxx, c5.xxzz
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.yw = in_TEXCOORD0.xy;
					    u_xlat0.z = 1.0;
					    vs_TEXCOORD0 = u_xlat0.yxzz;
					    vs_TEXCOORD1 = u_xlat0.ywzz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 100000, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    min_pp oC0.xyz, r0, c0.x
					    mov_pp oC0.w, r0.w
					
					// approximately 3 instruction slots used (1 texture, 2 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    SV_Target0.xyz = min(u_xlat0.xyz, vec3(100000.0, 100000.0, 100000.0));
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
}
 }
}
Fallback Off
}