Shader "Hidden/SSAA" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 17922
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_2_0
					    def c5, 1.75, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov r0.x, c5.x
					    mul r0.yz, r0.x, c4.xyxw
					    mov r0.xw, c5.y
					    add oT0.xy, -r0, v1
					    add oT1.xy, -r0.zwzw, v1
					    add oT2.xy, r0.zwzw, v1
					    add oT3.xy, r0, v1
					    mov oT4.xy, v1
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.yz = _MainTex_TexelSize.yx * vec2(1.75, 1.75);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(0.0);
					    vs_TEXCOORD0.xy = (-u_xlat0.xy) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = (-u_xlat0.zw) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = u_xlat0.zw + in_TEXCOORD0.xy;
					    vs_TEXCOORD3.xy = u_xlat0.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.yz = _MainTex_TexelSize.yx * vec2(1.75, 1.75);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(0.0);
					    vs_TEXCOORD0.xy = (-u_xlat0.xy) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = (-u_xlat0.zw) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = u_xlat0.zw + in_TEXCOORD0.xy;
					    vs_TEXCOORD3.xy = u_xlat0.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_2_0
					    def c2, 2, 0, -0.0625, 0.5
					    def c3, 0.899999976, 0.75, 0.232558131, 0
					    dcl t0.xy
					    dcl t1.xy
					    dcl t2.xy
					    dcl t3.xy
					    dcl t4.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    texld_pp r1, t3, s0
					    texld_pp r2, t1, s0
					    texld_pp r3, t2, s0
					    mul_pp r4.xyz, r0, c0
					    add_pp r1.w, r4.z, r4.x
					    mul_pp r1.w, r1.w, r4.y
					    add_pp r2.w, r4.y, r4.x
					    mad_pp r2.w, r0.z, c0.z, r2.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    mul_pp r1.w, r1.w, c0.w
					    mad_pp r1.w, r1.w, c2.x, r2.w
					    mul_pp r0.xyz, r1, c0
					    add_pp r2.w, r0.z, r0.x
					    mul_pp r2.w, r0.y, r2.w
					    add_pp r3.w, r0.y, r0.x
					    mad_pp r3.w, r1.z, c0.z, r3.w
					    rsq_pp r2.w, r2.w
					    rcp_pp r2.w, r2.w
					    mul_pp r2.w, r2.w, c0.w
					    mad_pp r2.w, r2.w, c2.x, r3.w
					    add_pp r2.w, r1.w, -r2.w
					    mov_pp r0.x, -r2.w
					    mul_pp r1.xyz, r2, c0
					    add_pp r3.w, r1.z, r1.x
					    mul_pp r3.w, r1.y, r3.w
					    add_pp r0.z, r1.y, r1.x
					    mad_pp r0.z, r2.z, c0.z, r0.z
					    rsq_pp r0.w, r3.w
					    rcp_pp r0.w, r0.w
					    mul_pp r0.w, r0.w, c0.w
					    mad_pp r3.w, r0.w, c2.x, r0.z
					    mul_pp r1.xyz, r3, c0
					    add_pp r0.z, r1.z, r1.x
					    mul_pp r0.z, r0.z, r1.y
					    add_pp r0.w, r1.y, r1.x
					    mad_pp r0.w, r3.z, c0.z, r0.w
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    mul_pp r0.z, r0.z, c0.w
					    mad_pp r0.z, r0.z, c2.x, r0.w
					    add_pp r0.y, -r3.w, r0.z
					    dp2add_pp r0.z, r0, r0, c2.y
					    rsq_pp r0.z, r0.z
					    mul r1.xy, r0.z, c1
					    rcp r0.z, r0.z
					    add r0.z, r0.z, c2.z
					    mad r2.xy, r0, r1, t4
					    mul_pp r1.zw, r0.wzyx, r1.wzyx
					    mad r0.xy, r0, -r1, t4
					    mad r1.xy, r1.wzyx, -c2.w, t4
					    mad r3.xy, r1.wzyx, c2.w, t4
					    texld r2, r2, s0
					    texld r4, r0, s0
					    texld r3, r3, s0
					    texld r1, r1, s0
					    texld_pp r5, t4, s0
					    mad_pp r3, r3, c3.x, r5
					    mad_pp r1, r1, c3.x, r3
					    mad_pp r1, r2, c3.y, r1
					    mad_pp r1, r4, c3.y, r1
					    mul_pp r1, r1, c3.z
					    cmp_pp r0, r0.z, r1, r5
					    mov_pp oC0, r0
					
					// approximately 66 instruction slots used (9 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyw = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat0.xw = u_xlat0.yw + u_xlat0.xx;
					    u_xlat0.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
					    u_xlat5.x = u_xlat0.w * u_xlat0.y;
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = dot(unity_ColorSpaceLuminance.ww, u_xlat5.xx);
					    u_xlat0.x = u_xlat5.x + u_xlat0.x;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat5.xz = u_xlat5.yz + u_xlat5.xx;
					    u_xlat5.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat5.x;
					    u_xlat10.x = u_xlat5.z * u_xlat5.y;
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = dot(unity_ColorSpaceLuminance.ww, u_xlat10.xx);
					    u_xlat5.x = u_xlat10.x + u_xlat5.x;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat1.xyw = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat10.xy = u_xlat1.yw + u_xlat1.xx;
					    u_xlat10.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat10.x;
					    u_xlat15 = u_xlat10.y * u_xlat1.y;
					    u_xlat15 = sqrt(u_xlat15);
					    u_xlat15 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat15));
					    u_xlat10.x = u_xlat15 + u_xlat10.x;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat1.xyw = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xw = u_xlat1.yw + u_xlat1.xx;
					    u_xlat15 = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.w * u_xlat1.y;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(unity_ColorSpaceLuminance.ww, u_xlat1.xx);
					    u_xlat15 = u_xlat15 + u_xlat1.x;
					    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat1.y = (-u_xlat5.x) + u_xlat10.x;
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlatb5 = u_xlat0.x<0.0625;
					    u_xlat0.xz = _MainTex_TexelSize.xy / u_xlat0.xx;
					    u_xlat11.xy = u_xlat0.xz * u_xlat1.xy;
					    u_xlat2.xy = u_xlat11.xy * vec2(0.5, 0.5) + vs_TEXCOORD4.xy;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat11.xy = (-u_xlat11.xy) * vec2(0.5, 0.5) + vs_TEXCOORD4.xy;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat1.xy * u_xlat0.xz + vs_TEXCOORD4.xy;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat0.xz = (-u_xlat1.xy) * u_xlat0.xz + vs_TEXCOORD4.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xz);
					    if(u_xlatb5){
					        SV_Target0 = texture(_MainTex, vs_TEXCOORD4.xy);
					    } else {
					        u_xlat0 = texture(_MainTex, vs_TEXCOORD4.xy);
					        u_xlat0 = u_xlat2 * vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976) + u_xlat0;
					        u_xlat0 = u_xlat3 * vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976) + u_xlat0;
					        u_xlat0 = u_xlat4 * vec4(0.75, 0.75, 0.75, 0.75) + u_xlat0;
					        u_xlat0 = u_xlat1 * vec4(0.75, 0.75, 0.75, 0.75) + u_xlat0;
					        SV_Target0 = u_xlat0 * vec4(0.232558131, 0.232558131, 0.232558131, 0.232558131);
					    }
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = dot(u_xlat0.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat10 = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat15 = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
					    u_xlat1.x = (-u_xlat0.x);
					    u_xlat1.y = (-u_xlat5) + u_xlat10;
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlatb5 = u_xlat0.x<0.0625;
					    u_xlat0.xz = _MainTex_TexelSize.xy / u_xlat0.xx;
					    u_xlat11.xy = u_xlat0.xz * u_xlat1.xy;
					    u_xlat2.xy = u_xlat11.xy * vec2(0.5, 0.5) + vs_TEXCOORD4.xy;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat11.xy = (-u_xlat11.xy) * vec2(0.5, 0.5) + vs_TEXCOORD4.xy;
					    u_xlat3 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11.xy = u_xlat1.xy * u_xlat0.xz + vs_TEXCOORD4.xy;
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat0.xz = (-u_xlat1.xy) * u_xlat0.xz + vs_TEXCOORD4.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xz);
					    if(u_xlatb5){
					        SV_Target0 = texture(_MainTex, vs_TEXCOORD4.xy);
					    } else {
					        u_xlat0 = texture(_MainTex, vs_TEXCOORD4.xy);
					        u_xlat0 = u_xlat2 * vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976) + u_xlat0;
					        u_xlat0 = u_xlat3 * vec4(0.899999976, 0.899999976, 0.899999976, 0.899999976) + u_xlat0;
					        u_xlat0 = u_xlat4 * vec4(0.75, 0.75, 0.75, 0.75) + u_xlat0;
					        u_xlat0 = u_xlat1 * vec4(0.75, 0.75, 0.75, 0.75) + u_xlat0;
					        SV_Target0 = u_xlat0 * vec4(0.232558131, 0.232558131, 0.232558131, 0.232558131);
					    }
					    return;
					}"
}
}
 }
}
Fallback Off
}