Shader "Hidden/Dof/TiltShiftHdrLensBlur" {
Properties {
 _MainTex ("-", 2D) = "" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 34694
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _BlurArea    c0       1
					//
					
					    ps_3_0
					    def c1, 2, -1, 0.5, 0
					    dcl_texcoord v0.y
					    mad r0.x, v0.y, c1.x, c1.y
					    mul r0.x, r0.x, c0.x
					    mul oC0, r0_abs.x, c1.z
					
					// approximately 3 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BlurArea;
					};
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.y * 2.0 + -1.0;
					    u_xlat0 = u_xlat0 * _BlurArea;
					    SV_Target0 = abs(vec4(u_xlat0)) * vec4(0.5, 0.5, 0.5, 0.5);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 86328
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _BlurArea    c0       1
					//
					
					    ps_3_0
					    def c1, 2, -1, 0, 0.5
					    dcl_texcoord v0.xy
					    mad r0.xy, v0, c1.x, c1.y
					    dp2add r0.x, r0, r0, c1.z
					    mul r0.x, r0.x, c0.x
					    mul oC0, r0.x, c1.w
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BlurArea;
					};
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * _BlurArea;
					    SV_Target0 = u_xlat0.xxxx * vec4(0.5, 0.5, 0.5, 0.5);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 189367
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//   float _BlurSize;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurSize          c1       1
					//   _BlurArea          c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 2, -1, 0.0344827585, 0
					    def c4, 0.46430999, 0.281150013, -0.0721400008, 0.605539978
					    def c5, -0.222340003, -0.579069972, 0.550520003, -0.669839978
					    def c6, -0.758210003, 0.583630025, 0.992839992, -0.0290399995
					    def c7, 0.216659993, 0.116020001, 0.156959996, -0.856000006
					    def c8, -0.194240004, -0.184019998, -0.436670005, 0.767509997
					    def c9, -0.590009987, -0.705089986, -0.800650001, 0.246309996
					    def c10, 0.211789995, 0.51372999, 0.0548299998, 0.957009971
					    def c11, -0.488880008, -0.293300003, 0.440140009, -0.0855799988
					    def c12, -0.52609998, 0.0238600001, -0.882160008, -0.244709998
					    def c13, -0.366219997, 0.39515999, 0.755909979, 0.219160005
					    def c14, 0.107589997, -0.578390002, 0.282849997, 0.790359974
					    def c15, -0.203879997, 0.111330003, 0.831139982, -0.292180002
					    def c16, 0.387719989, -0.434749991, 0.121260002, -0.192819998
					    def c17, 0.624629974, 0.543370008, -0.13414, -0.944880009
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.w, v0.y, c3.x, c3.y
					    mul r0.w, r0.w, c2.x
					    min r1.x, c1.x, r0_abs.w
					    mul r2, r1.x, c0.xyxy
					    mov oC0.w, r1.x
					    mad r1, r2.zwzw, c17, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c16, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c15, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c14, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c13, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c12, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c11, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c10, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c9, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c8, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c7, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c6, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    mad r1, r2.zwzw, c5, v0.xyxy
					    mad r2, r2, c4, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r1, r0
					    texld r1, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r1
					    add r0.xyz, r2, r0
					    mul oC0.xyz, r0, c3.z
					
					// approximately 77 instruction slots used (29 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
						float _BlurArea;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					int u_xlati12;
					bool u_xlatb13;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = vs_TEXCOORD0.y * 2.0 + -1.0;
					    u_xlat1 = u_xlat1 * _BlurArea;
					    u_xlat1 = min(abs(u_xlat1), _BlurSize);
					    u_xlatb5 = u_xlat1<0.00999999978;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat5.xy = vec2(u_xlat1) * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat5.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 1.0);
					        u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    }
					    SV_Target0.xyz = u_xlat2.xyz * vec3(0.0344827585, 0.0344827585, 0.0344827585);
					    SV_Target0.w = u_xlat1;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 199529
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//   float _BlurSize;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurSize          c1       1
					//   _BlurArea          c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 2, -1, 0, 0.0344827585
					    def c4, 0.46430999, 0.281150013, -0.0721400008, 0.605539978
					    def c5, -0.222340003, -0.579069972, 0.550520003, -0.669839978
					    def c6, -0.758210003, 0.583630025, 0.992839992, -0.0290399995
					    def c7, 0.216659993, 0.116020001, 0.156959996, -0.856000006
					    def c8, -0.194240004, -0.184019998, -0.436670005, 0.767509997
					    def c9, -0.590009987, -0.705089986, -0.800650001, 0.246309996
					    def c10, 0.211789995, 0.51372999, 0.0548299998, 0.957009971
					    def c11, -0.488880008, -0.293300003, 0.440140009, -0.0855799988
					    def c12, -0.52609998, 0.0238600001, -0.882160008, -0.244709998
					    def c13, -0.366219997, 0.39515999, 0.755909979, 0.219160005
					    def c14, 0.107589997, -0.578390002, 0.282849997, 0.790359974
					    def c15, -0.203879997, 0.111330003, 0.831139982, -0.292180002
					    def c16, 0.387719989, -0.434749991, 0.121260002, -0.192819998
					    def c17, 0.624629974, 0.543370008, -0.13414, -0.944880009
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r1.xy, v0, c3.x, c3.y
					    dp2add r0.w, r1, r1, c3.z
					    mul r0.w, r0.w, c2.x
					    max r1.x, r0.w, c3.z
					    min r0.w, c1.x, r1.x
					    mul r1, r0.w, c0.xyxy
					    mov oC0.w, r0.w
					    mad r2, r1.zwzw, c17, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c16, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c15, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c14, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c13, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c12, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c11, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c10, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c9, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c8, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c7, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c6, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    mad r2, r1.zwzw, c5, v0.xyxy
					    mad r1, r1, c4, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xyz, r0, r3
					    add r0.xyz, r2, r0
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.xyz, r0, r2
					    add r0.xyz, r1, r0
					    mul oC0.xyz, r0, c3.w
					
					// approximately 80 instruction slots used (29 texture, 51 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
						float _BlurArea;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					bool u_xlatb5;
					int u_xlati12;
					bool u_xlatb13;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BlurArea;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, _BlurSize);
					    u_xlatb5 = u_xlat1.x<0.00999999978;
					    if(u_xlatb5){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat5.xy = u_xlat1.xx * _MainTex_TexelSize.xy;
					    u_xlat2.xyz = u_xlat0.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat5.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 1.0);
					        u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    }
					    SV_Target0.xyz = u_xlat2.xyz * vec3(0.0344827585, 0.0344827585, 0.0344827585);
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 323394
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//   float _BlurSize;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurSize          c1       1
					//   _BlurArea          c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 2, -1, 1, 0.0175438598
					    def c4, -0.0721400008, 0.605539978, 0.0721400008, -0.605539978
					    def c5, 0.46430999, 0.281150013, -0.46430999, -0.281150013
					    def c6, 0.550520003, -0.669839978, -0.550520003, 0.669839978
					    def c7, -0.222340003, -0.579069972, 0.222340003, 0.579069972
					    def c8, 0.992839992, -0.0290399995, -0.992839992, 0.0290399995
					    def c9, -0.758210003, 0.583630025, 0.758210003, -0.583630025
					    def c10, 0.156959996, -0.856000006, -0.156959996, 0.856000006
					    def c11, 0.216659993, 0.116020001, -0.216659993, -0.116020001
					    def c12, -0.436670005, 0.767509997, 0.436670005, -0.767509997
					    def c13, -0.194240004, -0.184019998, 0.194240004, 0.184019998
					    def c14, -0.800650001, 0.246309996, 0.800650001, -0.246309996
					    def c15, -0.590009987, -0.705089986, 0.590009987, 0.705089986
					    def c16, 0.0548299998, 0.957009971, -0.0548299998, -0.957009971
					    def c17, 0.211789995, 0.51372999, -0.211789995, -0.51372999
					    def c18, 0.440140009, -0.0855799988, -0.440140009, 0.0855799988
					    def c19, -0.488880008, -0.293300003, 0.488880008, 0.293300003
					    def c20, -0.882160008, -0.244709998, 0.882160008, 0.244709998
					    def c21, -0.52609998, 0.0238600001, 0.52609998, -0.0238600001
					    def c22, 0.755909979, 0.219160005, -0.755909979, -0.219160005
					    def c23, -0.366219997, 0.39515999, 0.366219997, -0.39515999
					    def c24, 0.282849997, 0.790359974, -0.282849997, -0.790359974
					    def c25, 0.107589997, -0.578390002, -0.107589997, 0.578390002
					    def c26, 0.831139982, -0.292180002, -0.831139982, 0.292180002
					    def c27, -0.203879997, 0.111330003, 0.203879997, -0.111330003
					    def c28, 0.121260002, -0.192819998, -0.121260002, 0.192819998
					    def c29, 0.387719989, -0.434749991, -0.387719989, 0.434749991
					    def c30, -0.13414, -0.944880009, 0.13414, 0.944880009
					    def c31, 0.624629974, 0.543370008, -0.624629974, -0.543370008
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mov r1.xy, c3.z
					    mad r0.w, v0.y, c3.x, c3.y
					    mul r0.w, r0.w, c2.x
					    min r1.zw, c1.x, r0_abs.w
					    mul r2, r1, c0.xyxy
					    mul r2.xy, r1.w, r2
					    mov oC0.w, r1.w
					    mad r1, r2, c31, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c30, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c29, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c28, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c27, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c26, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c25, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c24, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c23, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c22, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c21, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c20, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c19, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c18, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c17, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c16, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c15, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c14, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c13, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c12, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c11, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c10, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c9, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c8, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c7, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c6, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    mad r1, r2, c5, v0.xyxy
					    mad r2, r2, c4, v0.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r3
					    add r0.xyz, r0, r1
					    texld r1, r2, s0
					    texld r2, r2.zwzw, s0
					    add r1.xyz, r1, r2
					    add r0.xyz, r0, r1
					    mul oC0.xyz, r0, c3.w
					
					// approximately 149 instruction slots used (57 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
						float _BlurArea;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					int u_xlati15;
					bool u_xlatb16;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = vs_TEXCOORD0.y * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x * _BlurArea;
					    u_xlat1.x = min(abs(u_xlat1.x), _BlurSize);
					    u_xlatb16 = u_xlat1.x<0.00999999978;
					    if(u_xlatb16){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat1.y = float(1.0);
					    u_xlat1.z = float(-1.0);
					    u_xlat2 = u_xlat1.yyxx * _MainTex_TexelSize.xyxy;
					    u_xlat2 = u_xlat1.xxzz * u_xlat2;
					    u_xlat6.xyz = u_xlat0.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat3 = ImmCB_0_0_0[u_xlati_loop_1].xyxy * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 1.0);
					        u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 1.0);
					        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    }
					    SV_Target0.xyz = u_xlat6.xyz * vec3(0.0175438598, 0.0175438598, 0.0175438598);
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 335477
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BlurArea;
					//   float _BlurSize;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _BlurSize          c1       1
					//   _BlurArea          c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 2, -1, 0, 0.0175438598
					    def c4, -0.144280002, 1.21107996, 0.144280002, -1.21107996
					    def c5, 0.928619981, 0.562300026, -0.928619981, -0.562300026
					    def c6, 1.10104001, -1.33967996, -1.10104001, 1.33967996
					    def c7, -0.444680005, -1.15813994, 0.444680005, 1.15813994
					    def c8, 1.98567998, -0.0580799989, -1.98567998, 0.0580799989
					    def c9, -1.51642001, 1.16726005, 1.51642001, -1.16726005
					    def c10, 0.313919991, -1.71200001, -0.313919991, 1.71200001
					    def c11, 0.433319986, 0.232040003, -0.433319986, -0.232040003
					    def c12, -0.873340011, 1.53501999, 0.873340011, -1.53501999
					    def c13, -0.388480008, -0.368039995, 0.388480008, 0.368039995
					    def c14, -1.6013, 0.492619991, 1.6013, -0.492619991
					    def c15, -1.18001997, -1.41017997, 1.18001997, 1.41017997
					    def c16, 0.10966, 1.91401994, -0.10966, -1.91401994
					    def c17, 0.423579991, 1.02745998, -0.423579991, -1.02745998
					    def c18, 0.880280018, -0.171159998, -0.880280018, 0.171159998
					    def c19, -0.977760017, -0.586600006, 0.977760017, 0.586600006
					    def c20, -1.76432002, -0.489419997, 1.76432002, 0.489419997
					    def c21, -1.05219996, 0.0477200001, 1.05219996, -0.0477200001
					    def c22, 1.51181996, 0.438320011, -1.51181996, -0.438320011
					    def c23, -0.732439995, 0.790319979, 0.732439995, -0.790319979
					    def c24, 0.565699995, 1.58071995, -0.565699995, -1.58071995
					    def c25, 0.215179995, -1.15678, -0.215179995, 1.15678
					    def c26, 1.66227996, -0.584360003, -1.66227996, 0.584360003
					    def c27, -0.407759994, 0.222660005, 0.407759994, -0.222660005
					    def c28, 0.242520005, -0.385639995, -0.242520005, 0.385639995
					    def c29, 0.775439978, -0.869499981, -0.775439978, 0.869499981
					    def c30, -0.268279999, -1.88976002, 0.268279999, 1.88976002
					    def c31, 1.24925995, 1.08674002, -1.24925995, -1.08674002
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0.xy, v0, c3.x, c3.y
					    dp2add r0.x, r0, r0, c3.z
					    mul r0.x, r0.x, c2.x
					    max r1.x, r0.x, c3.z
					    min oC0.w, c1.x, r1.x
					    mov r0.xy, c0
					    mad r1, r0.xyxy, c31, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1.xyz, r1, r2
					    texld r2, v0, s0
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c30, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c29, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c28, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c27, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c26, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c25, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c24, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c23, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c22, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c21, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c20, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c19, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c18, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c17, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c16, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c15, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c14, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c13, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c12, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c11, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c10, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c9, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c8, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c7, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c6, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r2, r0.xyxy, c5, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r2.xyz, r2, r3
					    add r1.xyz, r1, r2
					    mad r0, r0.xyxy, c4, v0.xyxy
					    texld r2, r0, s0
					    texld r0, r0.zwzw, s0
					    add r0.xyz, r0, r2
					    add r0.xyz, r0, r1
					    mul oC0.xyz, r0, c3.w
					
					// approximately 149 instruction slots used (57 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[28];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _BlurSize;
						float _BlurArea;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					bool u_xlatb6;
					int u_xlati15;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.624629974, 0.543370008);
						ImmCB_0_0_0[1] = vec2(-0.13414, -0.944880009);
						ImmCB_0_0_0[2] = vec2(0.387719989, -0.434749991);
						ImmCB_0_0_0[3] = vec2(0.121260002, -0.192819998);
						ImmCB_0_0_0[4] = vec2(-0.203879997, 0.111330003);
						ImmCB_0_0_0[5] = vec2(0.831139982, -0.292180002);
						ImmCB_0_0_0[6] = vec2(0.107589997, -0.578390002);
						ImmCB_0_0_0[7] = vec2(0.282849997, 0.790359974);
						ImmCB_0_0_0[8] = vec2(-0.366219997, 0.39515999);
						ImmCB_0_0_0[9] = vec2(0.755909979, 0.219160005);
						ImmCB_0_0_0[10] = vec2(-0.52609998, 0.0238600001);
						ImmCB_0_0_0[11] = vec2(-0.882160008, -0.244709998);
						ImmCB_0_0_0[12] = vec2(-0.488880008, -0.293300003);
						ImmCB_0_0_0[13] = vec2(0.440140009, -0.0855799988);
						ImmCB_0_0_0[14] = vec2(0.211789995, 0.51372999);
						ImmCB_0_0_0[15] = vec2(0.0548299998, 0.957009971);
						ImmCB_0_0_0[16] = vec2(-0.590009987, -0.705089986);
						ImmCB_0_0_0[17] = vec2(-0.800650001, 0.246309996);
						ImmCB_0_0_0[18] = vec2(-0.194240004, -0.184019998);
						ImmCB_0_0_0[19] = vec2(-0.436670005, 0.767509997);
						ImmCB_0_0_0[20] = vec2(0.216659993, 0.116020001);
						ImmCB_0_0_0[21] = vec2(0.156959996, -0.856000006);
						ImmCB_0_0_0[22] = vec2(-0.758210003, 0.583630025);
						ImmCB_0_0_0[23] = vec2(0.992839992, -0.0290399995);
						ImmCB_0_0_0[24] = vec2(-0.222340003, -0.579069972);
						ImmCB_0_0_0[25] = vec2(0.550520003, -0.669839978);
						ImmCB_0_0_0[26] = vec2(0.46430999, 0.281150013);
						ImmCB_0_0_0[27] = vec2(-0.0721400008, 0.605539978);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = u_xlat1.x * _BlurArea;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, _BlurSize);
					    u_xlatb6 = u_xlat1.x<0.00999999978;
					    if(u_xlatb6){
					        SV_Target0 = u_xlat0;
					        return;
					    }
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat6.xyz = u_xlat0.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<28 ; u_xlati_loop_1++)
					    {
					        u_xlat3 = ImmCB_0_0_0[u_xlati_loop_1].xyxy * u_xlat2 + vs_TEXCOORD0.xyxy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 1.0);
					        u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 1.0);
					        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    }
					    SV_Target0.xyz = u_xlat6.xyz * vec3(0.0175438598, 0.0175438598, 0.0175438598);
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 441425
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Blurred;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//   _Blurred     s1       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v1, s1
					    mov_sat r1.x, r0.w
					    texld r2, v0, s0
					    add r0, r0, -r2
					    mad oC0, r1.x, r0, r2
					
					// approximately 5 instruction slots used (2 texture, 3 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _Blurred;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_Blurred, vs_TEXCOORD1.xy);
					    u_xlat1 = u_xlat0.w;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    SV_Target0 = vec4(u_xlat1) * u_xlat0 + u_xlat2;
					    return;
					}"
}
}
 }
}
Fallback Off
}