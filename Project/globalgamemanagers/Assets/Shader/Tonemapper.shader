Shader "Hidden/Tonemapper" {
Properties {
 _MainTex ("", 2D) = "black" { }
 _SmallTex ("", 2D) = "grey" { }
 _Curve ("", 2D) = "black" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2047
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _HdrParams;
					//   sampler2D _MainTex;
					//   sampler2D _SmallTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _HdrParams                c1       1
					//   _MainTex                  s0       1
					//   _SmallTex                 s1       1
					//
					
					    ps_2_0
					    def c2, 2, 9.99999997e-007, 0.00100000005, 1
					    dcl t0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, t0, s0
					    texld r1, t0, s1
					    mul_pp r1.yzw, r0.wzyx, c0.wzyx
					    add_pp r1.y, r1.y, r1.w
					    mul_pp r1.y, r1.y, r1.z
					    add_pp r1.z, r1.z, r1.w
					    mad_pp r1.z, r0.z, c0.z, r1.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    mul_pp r1.y, r1.y, c0.w
					    mad_pp r1.y, r1.y, c2.x, r1.z
					    max r2.w, c2.y, r1.y
					    mul r1.y, r2.w, c1.z
					    rcp r1.z, r2.w
					    add r1.x, r1.x, c2.z
					    rcp r1.x, r1.x
					    mul r1.w, r1.x, r1.y
					    mad r1.x, r1.y, r1.x, c2.w
					    rcp r1.x, r1.x
					    rcp r1.y, c1.w
					    mad r1.y, r1.w, r1.y, c2.w
					    mul r1.y, r1.y, r1.w
					    mul r1.x, r1.x, r1.y
					    mul r1.x, r1.z, r1.x
					    mul r0.xyz, r0, r1.x
					    mov oC0, r0
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _HdrParams;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _SmallTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_SmallTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x + 0.00100000005;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat2.xz = u_xlat2.yz + u_xlat2.xx;
					    u_xlat4 = u_xlat2.z * u_xlat2.y;
					    u_xlat2.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat2.x;
					    u_xlat4 = sqrt(u_xlat4);
					    u_xlat4 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat4));
					    u_xlat2.x = u_xlat4 + u_xlat2.x;
					    u_xlat2.x = max(u_xlat2.x, 9.99999997e-07);
					    u_xlat4 = u_xlat2.x * _HdrParams.z;
					    u_xlat0.x = u_xlat4 / u_xlat0.x;
					    u_xlat4 = u_xlat0.x / _HdrParams.w;
					    u_xlat4 = u_xlat4 + 1.0;
					    u_xlat4 = u_xlat4 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat4 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x / u_xlat2.x;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _HdrParams;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _SmallTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_SmallTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x + 0.00100000005;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat2 = max(u_xlat2, 9.99999997e-07);
					    u_xlat4 = u_xlat2 * _HdrParams.z;
					    u_xlat0.x = u_xlat4 / u_xlat0.x;
					    u_xlat4 = u_xlat0.x / _HdrParams.w;
					    u_xlat4 = u_xlat4 + 1.0;
					    u_xlat4 = u_xlat4 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat4 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x / u_xlat2;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 84930
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex_TexelSize        c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_2_0
					    def c2, -1, 1, -1, 0.25
					    def c3, 2, 9.99999975e-005, 0.693147182, -9.2103405
					    dcl t0.xy
					    dcl_2d s0
					    add r0.xy, t0, -c1
					    add r1.xy, t0, c1
					    mov r2.xy, c1
					    mad r3.xy, r2, c2, t0
					    mad r2.xy, r2, c2.yzxw, t0
					    texld_pp r0, r0, s0
					    texld_pp r1, r1, s0
					    texld_pp r3, r3, s0
					    texld_pp r2, r2, s0
					    mul_pp r4.xyz, r0, c0
					    add_pp r1.w, r4.z, r4.x
					    mul_pp r1.w, r1.w, r4.y
					    add_pp r2.w, r4.y, r4.x
					    mad_pp r2.w, r0.z, c0.z, r2.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    mul_pp r1.w, r1.w, c0.w
					    mad_pp r1.w, r1.w, c3.x, r2.w
					    log r2.w, r1.w
					    add r1.w, -r1.w, c3.y
					    mul r2.w, r2.w, c3.z
					    cmp r1.w, r1.w, c3.w, r2.w
					    mul_pp r0.xyz, r1, c0
					    add_pp r2.w, r0.z, r0.x
					    mul_pp r2.w, r0.y, r2.w
					    add_pp r3.w, r0.y, r0.x
					    mad_pp r3.w, r1.z, c0.z, r3.w
					    rsq_pp r2.w, r2.w
					    rcp_pp r2.w, r2.w
					    mul_pp r2.w, r2.w, c0.w
					    mad_pp r2.w, r2.w, c3.x, r3.w
					    log r3.w, r2.w
					    add r2.w, -r2.w, c3.y
					    mul r3.w, r3.w, c3.z
					    cmp r2.w, r2.w, c3.w, r3.w
					    add r2.w, r1.w, r2.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.z, r0.z, r0.x
					    mul_pp r0.z, r0.z, r0.y
					    add_pp r0.x, r0.y, r0.x
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.z
					    rcp_pp r0.y, r0.y
					    mul_pp r0.y, r0.y, c0.w
					    mad_pp r0.x, r0.y, c3.x, r0.x
					    log r0.y, r0.x
					    add r0.x, -r0.x, c3.y
					    mul r0.y, r0.y, c3.z
					    cmp r0.x, r0.x, c3.w, r0.y
					    add r2.w, r0.x, r2.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.z, r0.z, r0.x
					    mul_pp r0.z, r0.z, r0.y
					    add_pp r0.x, r0.y, r0.x
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.z
					    rcp_pp r0.y, r0.y
					    mul_pp r0.y, r0.y, c0.w
					    mad_pp r0.x, r0.y, c3.x, r0.x
					    log r0.y, r0.x
					    add r0.x, -r0.x, c3.y
					    mul r0.y, r0.y, c3.z
					    cmp r0.x, r0.x, c3.w, r0.y
					    add r0.x, r0.x, r2.w
					    mul r0, r0.x, c2.w
					    mov oC0, r0
					
					// approximately 66 instruction slots used (4 texture, 62 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyw = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat0.xw = u_xlat0.yw + u_xlat0.xx;
					    u_xlat3.x = u_xlat0.w * u_xlat0.y;
					    u_xlat0.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = dot(unity_ColorSpaceLuminance.ww, u_xlat3.xx);
					    u_xlat0.x = u_xlat3.x + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.693147182;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.xyz = u_xlat2.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat2.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat3.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.693147182;
					    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.x = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat3.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.x = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat3.x = max(u_xlat3.x, 9.99999975e-05);
					    u_xlat3.x = log2(u_xlat3.x);
					    u_xlat6 = dot(u_xlat2.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat6 = max(u_xlat6, 9.99999975e-05);
					    u_xlat6 = log2(u_xlat6);
					    u_xlat0.x = u_xlat6 * 0.693147182 + u_xlat0.x;
					    u_xlat0.x = u_xlat3.x * 0.693147182 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha
  GpuProgramID 152641
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptionSpeed;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _AdaptionSpeed     c1       1
					//   _MainTex           s0       1
					//
					
					    ps_2_0
					    def c2, 1, -1, 1, 0.360673755
					    def c3, 0.0125000002, 0, 0, 0
					    dcl t0.xy
					    dcl_2d s0
					    add r0.xy, t0, -c0
					    add r1.xy, t0, c0
					    mov r2.xy, c0
					    mad r3.xy, r2, c2, t0
					    mad r2.xy, r2, c2.yzxw, t0
					    texld r0, r0, s0
					    texld r1, r1, s0
					    texld r3, r3, s0
					    texld r2, r2, s0
					    add r0.xy, r0, r1
					    add r0.xy, r3, r0
					    add r0.xy, r2, r0
					    mul r0.xy, r0, c2.w
					    exp r1.xz, r0.x
					    exp r1.y, r0.y
					    mov r0.x, c1.x
					    mul_sat r1.w, r0.x, c3.x
					    mov oC0, r1
					
					// approximately 18 instruction slots used (4 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						float _AdaptionSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = u_xlat0.xyx + u_xlat1.xyx;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyx;
					    u_xlat0.xyz = u_xlat1.xyx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.360673755, 0.360673755, 0.360673755);
					    SV_Target0.xyz = exp2(u_xlat0.xyz);
					    SV_Target0.w = _AdaptionSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						float _AdaptionSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = u_xlat0.xyx + u_xlat1.xyx;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyx;
					    u_xlat0.xyz = u_xlat1.xyx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.360673755, 0.360673755, 0.360673755);
					    SV_Target0.xyz = exp2(u_xlat0.xyz);
					    SV_Target0.w = _AdaptionSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 250411
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _AdaptionSpeed;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _AdaptionSpeed     c1       1
					//   _MainTex           s0       1
					//
					
					    ps_2_0
					    def c2, 1, -1, 1, 0.360673755
					    def c3, 0.0125000002, 0, 0, 0
					    dcl t0.xy
					    dcl_2d s0
					    add r0.xy, t0, -c0
					    add r1.xy, t0, c0
					    mov r2.xy, c0
					    mad r3.xy, r2, c2, t0
					    mad r2.xy, r2, c2.yzxw, t0
					    texld r0, r0, s0
					    texld r1, r1, s0
					    texld r3, r3, s0
					    texld r2, r2, s0
					    add r0.xy, r0, r1
					    add r0.xy, r3, r0
					    add r0.xy, r2, r0
					    mul r0.xy, r0, c2.w
					    exp r1.xz, r0.x
					    exp r1.y, r0.y
					    mov r0.x, c1.x
					    mul_sat r1.w, r0.x, c3.x
					    mov oC0, r1
					
					// approximately 18 instruction slots used (4 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						float _AdaptionSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = u_xlat0.xyx + u_xlat1.xyx;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyx;
					    u_xlat0.xyz = u_xlat1.xyx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.360673755, 0.360673755, 0.360673755);
					    SV_Target0.xyz = exp2(u_xlat0.xyz);
					    SV_Target0.w = _AdaptionSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						float _AdaptionSpeed;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = u_xlat0.xyx + u_xlat1.xyx;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyx;
					    u_xlat0.xyz = u_xlat1.xyx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.360673755, 0.360673755, 0.360673755);
					    SV_Target0.xyz = exp2(u_xlat0.xyz);
					    SV_Target0.w = _AdaptionSpeed * 0.0125000002;
					    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 276021
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Curve;
					//   sampler2D _MainTex;
					//   float _RangeScale;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _RangeScale  c0       1
					//   _MainTex     s0       1
					//   _Curve       s1       1
					//
					
					    ps_2_0
					    def c1, 0.514136374, 0.323878586, 0.160363764, 1
					    def c2, 0.265067995, 0.670234263, 0.0640915707, 0.5
					    def c3, 0.0241187997, 0.122817799, 0.844426632, 0
					    def c4, 2.56509995, -1.16649997, -0.398600012, 0
					    def c5, -1.02170002, 1.9777, 0.0439000018, 0
					    def c6, 0.0753000006, -0.254299998, 1.18920004, 0
					    dcl t0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, t0, s0
					    dp3 r1.z, c3, r0
					    dp3 r1.y, c2, r0
					    mul r2.x, r1.y, c0.x
					    dp3 r1.x, c1, r0
					    dp3 r1.z, c1.w, r1
					    rcp r1.z, r1.z
					    mad r1.w, r1.x, -r1.z, c1.w
					    mul r2.zw, r1.z, r1.wzyx
					    mad r1.x, r1.y, -r1.z, r1.w
					    mov r2.y, c2.w
					    texld r3, r2, s1
					    mul r1.x, r1.x, r3.x
					    rcp r1.y, r2.z
					    mul r1.z, r2.w, r3.x
					    mov r2.y, r3.x
					    mul r2.x, r1.y, r1.z
					    mul r2.z, r1.y, r1.x
					    dp3 r0.x, c4, r2
					    dp3 r0.y, c5, r2
					    dp3 r0.z, c6, r2
					    mov oC0, r0
					
					// approximately 22 instruction slots used (2 texture, 20 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _RangeScale;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Curve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _RangeScale;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_Curve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _RangeScale;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Curve;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.z = dot(vec3(0.0241187997, 0.122817799, 0.844426632), u_xlat0.xyz);
					    u_xlat1.x = dot(vec3(0.514136374, 0.323878586, 0.160363764), u_xlat0.xyz);
					    u_xlat1.y = dot(vec3(0.265067995, 0.670234263, 0.0640915707), u_xlat0.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.x = dot(vec3(1.0, 1.0, 1.0), u_xlat1.xyz);
					    u_xlat0.xy = u_xlat1.xy / u_xlat0.xx;
					    u_xlat1.x = u_xlat1.y * _RangeScale;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat0.z = (-u_xlat0.y) + u_xlat4;
					    u_xlat1.y = 0.5;
					    u_xlat1 = texture(_Curve, u_xlat1.xy).yxzw;
					    u_xlat0.xz = u_xlat0.xz * u_xlat1.yy;
					    u_xlat1.xz = u_xlat0.xz / u_xlat0.yy;
					    SV_Target0.x = dot(vec3(2.56509995, -1.16649997, -0.398600012), u_xlat1.xyz);
					    SV_Target0.y = dot(vec3(-1.02170002, 1.9777, 0.0439000018), u_xlat1.xyz);
					    SV_Target0.z = dot(vec3(0.0753000006, -0.254299998, 1.18920004), u_xlat1.xyz);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 342698
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _ExposureAdjustment;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ExposureAdjustment c0       1
					//   _MainTex            s0       1
					//
					
					    ps_2_0
					    def c1, 0.300000012, 0.0500000007, 0.00400000019, 0.5
					    def c2, 0.0599999987, -0.0666666701, 1.37906432, 1
					    dcl t0.xy
					    dcl_2d s0
					    texld r0, t0, s0
					    mul r0.xyz, r0, c0.x
					    mad r1.xyz, r0, c1.x, c1.y
					    add r2.xyz, r0, r0
					    mad r0.xyz, r0, c1.x, c1.w
					    mad r0.xyz, r2, r0, c2.x
					    mad r1.xyz, r2, r1, c1.z
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    mad r0.xyz, r1, r2, c2.y
					    mul r0.xyz, r0, c2.z
					    mov r0.w, c2.w
					    mov oC0, r0
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment));
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + vec3(0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz + vec3(0.00400000019, 0.00400000019, 0.00400000019);
					    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0666666701, -0.0666666701, -0.0666666701);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(1.37906432, 1.37906432, 1.37906432);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 415305
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _ExposureAdjustment;
					//   sampler2D _MainTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ExposureAdjustment       c1       1
					//   _MainTex                  s0       1
					//
					
					    ps_2_0
					    def c2, 2, 1, 0, 0
					    dcl t0.xy
					    dcl_2d s0
					    texld r0, t0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.z, r1.z, r1.x
					    mul_pp r1.z, r1.z, r1.y
					    add_pp r1.x, r1.y, r1.x
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.z
					    rcp_pp r1.y, r1.y
					    mul_pp r1.y, r1.y, c0.w
					    mad_pp r1.x, r1.y, c2.x, r1.x
					    mov r2.w, c1.x
					    mad r1.y, r1.x, r2.w, c2.y
					    rcp r1.y, r1.y
					    mul r1.z, r1.x, c1.x
					    rcp r1.x, r1.x
					    mul r1.y, r1.y, r1.z
					    mul r1.yzw, r0.wzyx, r1.y
					    mul r0.xyz, r1.x, r1.wzyx
					    mov oC0, r0
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat3 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat3 = sqrt(u_xlat3);
					    u_xlat3 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat3));
					    u_xlat1.x = u_xlat3 + u_xlat1.x;
					    u_xlat3 = u_xlat1.x * _ExposureAdjustment;
					    u_xlat5 = u_xlat1.x * _ExposureAdjustment + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = dot(u_xlat0.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat3 = u_xlat1 * _ExposureAdjustment;
					    u_xlat5 = u_xlat1 * _ExposureAdjustment + 1.0;
					    u_xlat3 = u_xlat3 / u_xlat5;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat1);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 521268
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _ExposureAdjustment;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ExposureAdjustment c0       1
					//   _MainTex            s0       1
					//
					
					    ps_2_0
					    def c1, -0.00400000019, 0, 6.19999981, 0.5
					    def c2, 6.19999981, 1.70000005, 0.0599999987, 0
					    dcl t0.xy
					    dcl_2d s0
					    texld r0, t0, s0
					    mov r1.w, c1.x
					    mad r0, r0, c0.x, r1.w
					    max r1, r0, c1.y
					    mad r0, r1, c1.z, c1.w
					    mul r0, r0, r1
					    mad r2, r1, c2.x, c2.y
					    mad r1, r1, r2, c2.z
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r0, r0, r0
					    mov oC0, r0
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * vec4(vec4(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment)) + vec4(-0.00400000019, -0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat0 * vec4(6.19999981, 6.19999981, 6.19999981, 6.19999981) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat0 * u_xlat1;
					    u_xlat2 = u_xlat0 * vec4(6.19999981, 6.19999981, 6.19999981, 6.19999981) + vec4(1.70000005, 1.70000005, 1.70000005, 1.70000005);
					    u_xlat0 = u_xlat0 * u_xlat2 + vec4(0.0599999987, 0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0 = u_xlat1 / u_xlat0;
					    SV_Target0 = u_xlat0 * u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * vec4(vec4(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment)) + vec4(-0.00400000019, -0.00400000019, -0.00400000019, -0.00400000019);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat0 * vec4(6.19999981, 6.19999981, 6.19999981, 6.19999981) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat0 * u_xlat1;
					    u_xlat2 = u_xlat0 * vec4(6.19999981, 6.19999981, 6.19999981, 6.19999981) + vec4(1.70000005, 1.70000005, 1.70000005, 1.70000005);
					    u_xlat0 = u_xlat0 * u_xlat2 + vec4(0.0599999987, 0.0599999987, 0.0599999987, 0.0599999987);
					    u_xlat0 = u_xlat1 / u_xlat0;
					    SV_Target0 = u_xlat0 * u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 543926
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _ExposureAdjustment;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ExposureAdjustment c0       1
					//   _MainTex            s0       1
					//
					
					    ps_2_0
					    def c1, 1, 0, 0, 0
					    dcl t0.xy
					    dcl_2d s0
					    texld r0, t0, s0
					    mul r0, r0, -c0.x
					    exp r1.x, r0.x
					    exp r1.y, r0.y
					    exp r1.z, r0.z
					    exp r1.w, r0.w
					    add r0, -r1, c1.x
					    mov oC0, r0
					
					// approximately 8 instruction slots used (1 texture, 7 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * (-vec4(vec4(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment)));
					    u_xlat0 = exp2(u_xlat0);
					    SV_Target0 = (-u_xlat0) + vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						float _ExposureAdjustment;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat0 * (-vec4(vec4(_ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment, _ExposureAdjustment)));
					    u_xlat0 = exp2(u_xlat0);
					    SV_Target0 = (-u_xlat0) + vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 640836
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_2_0
					    def c1, 0.5, -0.5, 0.25, 0
					    dcl t0.xy
					    dcl_2d s0
					    mov r0.xy, c1
					    mad r1.xy, c0, r0.x, t0
					    mad r2.xy, c0, -r0.x, t0
					    mad r3.xy, c0, r0, t0
					    mad r0.xy, c0, -r0, t0
					    texld r1, r1, s0
					    texld r2, r2, s0
					    texld r3, r3, s0
					    texld r0, r0, s0
					    add r4.x, r1.x, r2.x
					    add r4.y, r1.z, r2.z
					    add r4.z, r1.w, r2.w
					    max r4.w, r1.y, r2.y
					    add r1.x, r3.x, r4.x
					    add r1.y, r3.z, r4.y
					    add r1.z, r3.w, r4.z
					    add r2.x, r0.x, r1.x
					    add r2.y, r0.z, r1.y
					    add r2.z, r0.w, r1.z
					    max r2.w, r3.y, r0.y
					    max r0.y, r4.w, r2.w
					    mul r0.x, r2.x, c1.z
					    mul r0.z, r2.y, c1.z
					    mul r0.w, r2.z, c1.z
					    mov oC0, r0
					
					// approximately 25 instruction slots used (4 texture, 21 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.5, 0.5, 0.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, 0.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xzw = u_xlat1.xzw + u_xlat3.xzw;
					    u_xlat5 = max(u_xlat1.y, u_xlat3.y);
					    u_xlat0.xzw = u_xlat0.xzw + u_xlat1.xzw;
					    u_xlat4 = max(u_xlat0.y, u_xlat2.y);
					    u_xlat0.xzw = u_xlat2.xzw + u_xlat0.xzw;
					    SV_Target0.xzw = u_xlat0.xzw * vec3(0.25, 0.25, 0.25);
					    SV_Target0.y = max(u_xlat4, u_xlat5);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.5, 0.5, 0.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, 0.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xzw = u_xlat1.xzw + u_xlat3.xzw;
					    u_xlat5 = max(u_xlat1.y, u_xlat3.y);
					    u_xlat0.xzw = u_xlat0.xzw + u_xlat1.xzw;
					    u_xlat4 = max(u_xlat0.y, u_xlat2.y);
					    u_xlat0.xzw = u_xlat2.xzw + u_xlat0.xzw;
					    SV_Target0.xzw = u_xlat0.xzw * vec3(0.25, 0.25, 0.25);
					    SV_Target0.y = max(u_xlat4, u_xlat5);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 670793
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _HdrParams;
					//   sampler2D _MainTex;
					//   sampler2D _SmallTex;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _HdrParams                c1       1
					//   _MainTex                  s0       1
					//   _SmallTex                 s1       1
					//
					
					    ps_2_0
					    def c2, 2, 9.99999997e-007, 0.00100000005, 1
					    dcl t0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, t0, s0
					    texld r1, t0, s1
					    mul_pp r2.xyz, r0, c0
					    add_pp r1.z, r2.z, r2.x
					    mul_pp r1.z, r1.z, r2.y
					    add_pp r1.w, r2.y, r2.x
					    mad_pp r1.w, r0.z, c0.z, r1.w
					    rsq_pp r1.z, r1.z
					    rcp_pp r1.z, r1.z
					    mul_pp r1.z, r1.z, c0.w
					    mad_pp r1.z, r1.z, c2.x, r1.w
					    max r2.x, c2.y, r1.z
					    mul r1.z, r2.x, c1.z
					    rcp r1.w, r2.x
					    add r1.x, r1.x, c2.z
					    mul r1.y, r1.y, r1.y
					    rcp r1.y, r1.y
					    rcp r1.x, r1.x
					    mul r2.x, r1.x, r1.z
					    mad r1.x, r1.z, r1.x, c2.w
					    rcp r1.x, r1.x
					    mad r1.y, r2.x, r1.y, c2.w
					    mul r1.y, r1.y, r2.x
					    mul r1.x, r1.x, r1.y
					    mul r1.x, r1.w, r1.x
					    mul r0.xyz, r0, r1.x
					    mov oC0, r0
					
					// approximately 27 instruction slots used (2 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _HdrParams;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _SmallTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4 = sqrt(u_xlat4);
					    u_xlat4 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat4));
					    u_xlat1.x = u_xlat4 + u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 9.99999997e-07);
					    u_xlat4 = u_xlat1.x * _HdrParams.z;
					    u_xlat2 = texture(_SmallTex, vs_TEXCOORD0.xy);
					    u_xlat7 = u_xlat2.x + 0.00100000005;
					    u_xlat10 = u_xlat2.y * u_xlat2.y;
					    u_xlat4 = u_xlat4 / u_xlat7;
					    u_xlat7 = u_xlat4 / u_xlat10;
					    u_xlat7 = u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat4;
					    u_xlat4 = u_xlat4 + 1.0;
					    u_xlat4 = u_xlat7 / u_xlat4;
					    u_xlat1.x = u_xlat4 / u_xlat1.x;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _HdrParams;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _SmallTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_SmallTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat0.y * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x + 0.00100000005;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4 = dot(u_xlat1.xyz, unity_ColorSpaceLuminance.xyz);
					    u_xlat4 = max(u_xlat4, 9.99999997e-07);
					    u_xlat6 = u_xlat4 * _HdrParams.z;
					    u_xlat0.x = u_xlat6 / u_xlat0.x;
					    u_xlat2 = u_xlat0.x / u_xlat2;
					    u_xlat2 = u_xlat2 + 1.0;
					    u_xlat2 = u_xlat2 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat2 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
}
Fallback Off
}