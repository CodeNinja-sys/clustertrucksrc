Shader "Playdead/Post/VelocityBuffer" {
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 59144
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _CameraToWorld;
					//   row_major float4x4 _PrevVP;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _CameraToWorld      c0       4
					//   _PrevVP             c4       4
					//   _ZBufferParams      c8       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c8.z, r0.x, c8.w
					    rcp r0.x, r0.x
					    mad r0.yzw, v1.xxyx, c9.xxxy, c9.xyyx
					    mul r0.xyz, r0.x, r0.yzww
					    mov r0.w, c9.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c7, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mul r0.xy, r0.x, r2
					    mad r0.xy, r0, c9.z, c9.z
					    add oC0.xy, -r0, v0
					    mov oC0.zw, c9.y
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _CameraToWorld;
						vec4 unused_0_2[15];
						mat4x4 _PrevVP;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.xy = vs_TEXCOORD1.xy;
					    u_xlat1.z = 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * _CameraToWorld[1];
					    u_xlat1 = _CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = _CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + _CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PrevVP[1].xyw;
					    u_xlat1.xyz = _PrevVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    SV_Target0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _CameraToWorld;
					//   row_major float4x4 _PrevVP;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _CameraToWorld      c0       4
					//   _PrevVP             c4       4
					//   _ZBufferParams      c8       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c8.z, r0.x, c8.w
					    rcp r0.x, r0.x
					    mad r0.yzw, v1.xxyx, c9.xxxy, c9.xyyx
					    mul r0.xyz, r0.x, r0.yzww
					    mov r0.w, c9.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c7, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mul r0.xy, r0.x, r2
					    mad r0.xy, r0, c9.z, c9.z
					    add oC0.xy, -r0, v0
					    mov oC0.zw, c9.y
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _CameraToWorld;
						vec4 unused_0_2[15];
						mat4x4 _PrevVP;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.xy = vs_TEXCOORD1.xy;
					    u_xlat1.z = 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * _CameraToWorld[1];
					    u_xlat1 = _CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = _CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + _CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PrevVP[1].xyw;
					    u_xlat1.xyz = _PrevVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    SV_Target0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _CameraToWorld;
					//   row_major float4x4 _PrevVP;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _CameraToWorld      c0       4
					//   _PrevVP             c4       4
					//   _ZBufferParams      c8       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c8.z, r0.x, c8.w
					    rcp r0.x, r0.x
					    mad r0.yzw, v1.xxyx, c9.xxxy, c9.xyyx
					    mul r0.xyz, r0.x, r0.yzww
					    mov r0.w, c9.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c7, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mul r0.xy, r0.x, r2
					    mad r0.xy, r0, c9.z, c9.z
					    add oC0.xy, -r0, v0
					    mov oC0.zw, c9.y
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _CameraToWorld;
						vec4 unused_0_2[15];
						mat4x4 _PrevVP;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.xy = vs_TEXCOORD1.xy;
					    u_xlat1.z = 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * _CameraToWorld[1];
					    u_xlat1 = _CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = _CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + _CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PrevVP[1].xyw;
					    u_xlat1.xyz = _PrevVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    SV_Target0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _CameraToWorld;
					//   row_major float4x4 _PrevVP;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _CameraToWorld      c0       4
					//   _PrevVP             c4       4
					//   _ZBufferParams      c8       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c8.z, r0.x, c8.w
					    rcp r0.x, r0.x
					    mad r0.yzw, v1.xxyx, c9.xxxy, c9.xyyx
					    mul r0.xyz, r0.x, r0.yzww
					    mov r0.w, c9.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c7, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mul r0.xy, r0.x, r2
					    mad r0.xy, r0, c9.z, c9.z
					    add oC0.xy, -r0, v0
					    mov oC0.zw, c9.y
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _CameraToWorld;
						vec4 unused_0_2[15];
						mat4x4 _PrevVP;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.xy = vs_TEXCOORD1.xy;
					    u_xlat1.z = 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * _CameraToWorld[1];
					    u_xlat1 = _CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = _CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + _CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PrevVP[1].xyw;
					    u_xlat1.xyz = _PrevVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    SV_Target0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  GpuProgramID 95164
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, -1, 0, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xyxw, c22.zxzw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    dp4 r0.x, r0, v0
					    mov r1, c11
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.z, r1, v0
					    mul r0.xz, r0, c21.x
					    mov r1, c9
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.y, r1, v0
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 59 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, -1, 0, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xyxw, c22.zxzw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    dp4 r0.x, r0, v0
					    mov r1, c11
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.z, r1, v0
					    mul r0.xz, r0, c21.x
					    mov r1, c9
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.y, r1, v0
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 59 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, -1, 0, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xyxw, c22.zxzw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    dp4 r0.x, r0, v0
					    mov r1, c11
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.z, r1, v0
					    mul r0.xz, r0, c21.x
					    mov r1, c9
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.y, r1, v0
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 59 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, -1, 0, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xyxw, c22.zxzw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    dp4 r0.x, r0, v0
					    mov r1, c11
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.z, r1, v0
					    mul r0.xz, r0, c21.x
					    mov r1, c9
					    mul r2, r1.y, c13
					    mad r2, r1.x, c12, r2
					    mad r2, r1.z, c14, r2
					    mad r1, r1.w, c15, r2
					    dp4 r0.y, r1, v0
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 59 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  GpuProgramID 133157
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, 0, -1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xzxw, c22.yxyw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    mad r1, v1.xyzx, c22.xxxy, c22.yyyx
					    dp4 r0.x, r0, r1
					    mov r2, c11
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.z, r2, r1
					    mul r0.xz, r0, c21.x
					    mov r2, c9
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.y, r2, r1
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, 0, -1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xzxw, c22.yxyw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    mad r1, v1.xyzx, c22.xxxy, c22.yyyx
					    dp4 r0.x, r0, r1
					    mov r2, c11
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.z, r2, r1
					    mul r0.xz, r0, c21.x
					    mov r2, c9
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.y, r2, r1
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, 0, -1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xzxw, c22.yxyw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    mad r1, v1.xyzx, c22.xxxy, c22.yyyx
					    dp4 r0.x, r0, r1
					    mov r2, c11
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.z, r2, r1
					    mul r0.xz, r0, c21.x
					    mov r2, c9
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.y, r2, r1
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _CurrM;
					//   row_major float4x4 _CurrV;
					//   row_major float4x4 _CurrVP;
					//   row_major float4x4 _PrevM;
					//   row_major float4x4 _PrevVP;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _CurrVP           c0       4
					//   _CurrM            c4       4
					//   _PrevVP           c8       4
					//   _PrevM            c12      4
					//   _CurrV            c16      3
					//   _ProjectionParams c19      1
					//   _ScreenParams     c20      1
					//
					
					    vs_3_0
					    def c21, 1, -1, 0.5, -0.5
					    def c22, 1, 0, -1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mov r0, c5
					    mul r1, r0, c0.y
					    mov r2, c4
					    mad r1, c0.x, r2, r1
					    mov r3, c6
					    mad r1, c0.z, r3, r1
					    mov r4, c7
					    mad r1, c0.w, r4, r1
					    dp4 r1.x, r1, v0
					    mul r5, r0, c3.y
					    mad r5, c3.x, r2, r5
					    mad r5, c3.z, r3, r5
					    mad r5, c3.w, r4, r5
					    dp4 r1.w, r5, v0
					    mul r5.xz, r1.xyww, c21.z
					    mul r6, r0, c1.y
					    mad r6, c1.x, r2, r6
					    mad r6, c1.z, r3, r6
					    mad r6, c1.w, r4, r6
					    dp4 r1.y, r6, v0
					    mul r5.y, r1.y, c19.x
					    mul r5.w, r5.y, c21.w
					    mad o1.xy, r5.z, c20.zwzw, r5.xwzw
					    mul r5, r0, c18.y
					    mad r5, c18.x, r2, r5
					    mad r5, c18.z, r3, r5
					    mad r5, c18.w, r4, r5
					    dp4 r5.x, r5, v0
					    mov o1.z, -r5.x
					    mul r0, r0, c2.y
					    mad r0, c2.x, r2, r0
					    mad r0, c2.z, r3, r0
					    mad r0, c2.w, r4, r0
					    dp4 r1.z, r0, v0
					    mul r0, r1, c21.xyxx
					    mov o0, r0
					    mov o1.w, r0.w
					    mad o2.xyz, r0.xyww, c22.xzxw, c22.yxyw
					    mov r0, c8
					    mul r1, r0.y, c13
					    mad r1, r0.x, c12, r1
					    mad r1, r0.z, c14, r1
					    mad r0, r0.w, c15, r1
					    mad r1, v1.xyzx, c22.xxxy, c22.yyyx
					    dp4 r0.x, r0, r1
					    mov r2, c11
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.z, r2, r1
					    mul r0.xz, r0, c21.x
					    mov r2, c9
					    mul r3, r2.y, c13
					    mad r3, r2.x, c12, r3
					    mad r3, r2.z, c14, r3
					    mad r2, r2.w, c15, r3
					    dp4 r0.y, r2, r1
					    mad r0.w, r0.y, -c21.y, c21.x
					    mov o3.xyz, r0.xwzw
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						mat4x4 _CurrV;
						mat4x4 _CurrVP;
						mat4x4 _CurrM;
						mat4x4 _PrevVP;
						mat4x4 _PrevM;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = _CurrVP[1] * _CurrM[1].yyyy;
					    u_xlat0 = _CurrVP[0] * _CurrM[1].xxxx + u_xlat0;
					    u_xlat0 = _CurrVP[2] * _CurrM[1].zzzz + u_xlat0;
					    u_xlat0 = _CurrVP[3] * _CurrM[1].wwww + u_xlat0;
					    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
					    u_xlat1 = _CurrVP[1] * _CurrM[0].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[0].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[0].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[0].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.xxxx + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[2].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[2].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[2].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[2].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = _CurrVP[1] * _CurrM[3].yyyy;
					    u_xlat1 = _CurrVP[0] * _CurrM[3].xxxx + u_xlat1;
					    u_xlat1 = _CurrVP[2] * _CurrM[3].zzzz + u_xlat1;
					    u_xlat1 = _CurrVP[3] * _CurrM[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0 * vec4(1.0, -1.0, 1.0, 1.0);
					    gl_Position = u_xlat1;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * -0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlat0.x = _CurrV[1].z * _CurrM[1].y;
					    u_xlat0.x = _CurrV[0].z * _CurrM[1].x + u_xlat0.x;
					    u_xlat0.x = _CurrV[2].z * _CurrM[1].z + u_xlat0.x;
					    u_xlat0.x = _CurrV[3].z * _CurrM[1].w + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * in_POSITION0.y;
					    u_xlat2 = _CurrV[1].z * _CurrM[0].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[0].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[0].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[0].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.x + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[2].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[2].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[2].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[2].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.z + u_xlat0.x;
					    u_xlat2 = _CurrV[1].z * _CurrM[3].y;
					    u_xlat2 = _CurrV[0].z * _CurrM[3].x + u_xlat2;
					    u_xlat2 = _CurrV[2].z * _CurrM[3].z + u_xlat2;
					    u_xlat2 = _CurrV[3].z * _CurrM[3].w + u_xlat2;
					    u_xlat0.x = u_xlat2 * in_POSITION0.w + u_xlat0.x;
					    vs_TEXCOORD0.z = (-u_xlat0.x);
					    vs_TEXCOORD0.w = u_xlat1.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyw * vec3(1.0, -1.0, 1.0) + vec3(0.0, 1.0, 0.0);
					    u_xlat0.xyz = _PrevVP[1].xyw * _PrevM[1].yyy;
					    u_xlat0.xyz = _PrevVP[0].xyw * _PrevM[1].xxx + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[2].xyw * _PrevM[1].zzz + u_xlat0.xyz;
					    u_xlat0.xyz = _PrevVP[3].xyw * _PrevM[1].www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_NORMAL0.yyy;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[0].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[0].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[2].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[2].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat1.xyz = _PrevVP[1].xyw * _PrevM[3].yyy;
					    u_xlat1.xyz = _PrevVP[0].xyw * _PrevM[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[2].xyw * _PrevM[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PrevVP[3].xyw * _PrevM[3].www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xz = u_xlat0.xz * vec2(1.0, 1.0);
					    u_xlat0.w = (-u_xlat0.y) * -1.0 + 1.0;
					    vs_TEXCOORD2.xyz = u_xlat0.xwz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0.0299999993, 0.5, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    rcp r0.x, v0.w
					    mul r0.xy, r0.x, v0
					    texld r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v0.z
					    add r0, r0.x, c1.x
					    texkill r0
					    rcp r0.x, v2.z
					    mul r0.xy, r0.x, v2
					    rcp r0.z, v1.z
					    mad r0.xy, v1, r0.z, -r0
					    mul oC0.xy, r0, c1.y
					    mov oC0.zw, c1.z
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD0.z);
					    u_xlat0.x = u_xlat0.x + 0.0299999993;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.zz;
					    u_xlat2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat0.xy;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 254501
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _VelocityTex s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    dp2add r0.z, r0, r0, c0.x
					    cmp oC0.xy, -r0.z, c0.x, r0
					    mov oC0.zw, c0.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat2;
					bool u_xlatb2;
					void main()
					{
					    u_xlat0 = texture(_VelocityTex, vs_TEXCOORD0.xy);
					    u_xlat2 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlatb2 = 0.0<u_xlat2;
					    SV_Target0.xy = bool(u_xlatb2) ? u_xlat0.xy : vec2(0.0, 0.0);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _VelocityTex s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    dp2add r0.z, r0, r0, c0.x
					    cmp oC0.xy, -r0.z, c0.x, r0
					    mov oC0.zw, c0.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat2;
					bool u_xlatb2;
					void main()
					{
					    u_xlat0 = texture(_VelocityTex, vs_TEXCOORD0.xy);
					    u_xlat2 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlatb2 = 0.0<u_xlat2;
					    SV_Target0.xy = bool(u_xlatb2) ? u_xlat0.xy : vec2(0.0, 0.0);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _VelocityTex s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    dp2add r0.z, r0, r0, c0.x
					    cmp oC0.xy, -r0.z, c0.x, r0
					    mov oC0.zw, c0.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat2;
					bool u_xlatb2;
					void main()
					{
					    u_xlat0 = texture(_VelocityTex, vs_TEXCOORD0.xy);
					    u_xlat2 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlatb2 = 0.0<u_xlat2;
					    SV_Target0.xy = bool(u_xlatb2) ? u_xlat0.xy : vec2(0.0, 0.0);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _VelocityTex s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    dp2add r0.z, r0, r0, c0.x
					    cmp oC0.xy, -r0.z, c0.x, r0
					    mov oC0.zw, c0.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat2;
					bool u_xlatb2;
					void main()
					{
					    u_xlat0 = texture(_VelocityTex, vs_TEXCOORD0.xy);
					    u_xlat2 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlatb2 = 0.0<u_xlat2;
					    SV_Target0.xy = bool(u_xlatb2) ? u_xlat0.xy : vec2(0.0, 0.0);
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 309805
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Corner;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Corner            c4       1
					//
					
					    vs_3_0
					    def c5, 2, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mad r0.xy, v1, c5.x, c5.y
					    mad o2.xy, r0, c4, c4.zwzw
					    mov o1.xy, v1
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _Corner;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    vs_TEXCOORD1.xy = u_xlat0.xy * _Corner.xy + _Corner.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//   float4 _VelocityTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _VelocityTex_TexelSize c0       1
					//   _VelocityTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xw, c1.x
					    mov r1, c1.xxxz
					    rep i0
					      mul r0.y, r1.w, c0.y
					      add r2.xy, r0, v0
					      mov r3.xyz, r1
					      mov r0.y, c1.z
					      rep i0
					        mul r0.z, r0.y, c0.x
					        add r2.zw, r0, r2.xyxy
					        texld r4, r2.zwzw, s0
					        dp2add r4.z, r4, r4, c1.x
					        dp2add r0.z, r4, -r4, r3.z
					        cmp r3.xyz, r0.z, r3, r4
					        add r0.y, r0.y, c1.w
					      endrep
					      mov r1.xyz, r3
					      add r1.w, r1.w, c1.w
					    endrep
					    mov oC0.xy, r1
					    mov oC0.zw, c1.x
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _VelocityTex_TexelSize;
						vec4 unused_0_2[21];
					};
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat12;
					bool u_xlatb12;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat10.y = float(0.0);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    for(int u_xlati_loop_1 = int(int(0xFFFFFFFFu)) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.x = float(u_xlati_loop_1);
					        u_xlat0.y = u_xlat2.x * _VelocityTex_TexelSize.y;
					        u_xlat2.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					        u_xlat3.xyz = u_xlat1.xyz;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat12.x = float(u_xlati_loop_2);
					            u_xlat10.x = u_xlat12.x * _VelocityTex_TexelSize.x;
					            u_xlat12.xy = u_xlat10.xy + u_xlat2.xy;
					            u_xlat4 = texture(_VelocityTex, u_xlat12.xy);
					            u_xlat4.z = dot(u_xlat4.xy, u_xlat4.xy);
					            u_xlatb10 = u_xlat3.z<u_xlat4.z;
					            u_xlat3.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : u_xlat3.xyz;
					        }
					        u_xlat1.xyz = u_xlat3.xyz;
					    }
					    SV_Target0.xy = u_xlat1.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_10" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//   float4 _VelocityTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _VelocityTex_TexelSize c0       1
					//   _VelocityTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xw, c1.x
					    mov r1, c1.xxxz
					    rep i0
					      mul r0.y, r1.w, c0.y
					      add r2.xy, r0, v0
					      mov r3.xyz, r1
					      mov r0.y, c1.z
					      rep i0
					        mul r0.z, r0.y, c0.x
					        add r2.zw, r0, r2.xyxy
					        texld r4, r2.zwzw, s0
					        dp2add r4.z, r4, r4, c1.x
					        dp2add r0.z, r4, -r4, r3.z
					        cmp r3.xyz, r0.z, r3, r4
					        add r0.y, r0.y, c1.w
					      endrep
					      mov r1.xyz, r3
					      add r1.w, r1.w, c1.w
					    endrep
					    mov oC0.xy, r1
					    mov oC0.zw, c1.x
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_10" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _VelocityTex_TexelSize;
						vec4 unused_0_2[21];
					};
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat12;
					bool u_xlatb12;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat10.y = float(0.0);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    for(int u_xlati_loop_1 = int(int(0xFFFFFFFFu)) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.x = float(u_xlati_loop_1);
					        u_xlat0.y = u_xlat2.x * _VelocityTex_TexelSize.y;
					        u_xlat2.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					        u_xlat3.xyz = u_xlat1.xyz;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat12.x = float(u_xlati_loop_2);
					            u_xlat10.x = u_xlat12.x * _VelocityTex_TexelSize.x;
					            u_xlat12.xy = u_xlat10.xy + u_xlat2.xy;
					            u_xlat4 = texture(_VelocityTex, u_xlat12.xy);
					            u_xlat4.z = dot(u_xlat4.xy, u_xlat4.xy);
					            u_xlatb10 = u_xlat3.z<u_xlat4.z;
					            u_xlat3.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : u_xlat3.xyz;
					        }
					        u_xlat1.xyz = u_xlat3.xyz;
					    }
					    SV_Target0.xy = u_xlat1.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_20" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//   float4 _VelocityTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _VelocityTex_TexelSize c0       1
					//   _VelocityTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xw, c1.x
					    mov r1, c1.xxxz
					    rep i0
					      mul r0.y, r1.w, c0.y
					      add r2.xy, r0, v0
					      mov r3.xyz, r1
					      mov r0.y, c1.z
					      rep i0
					        mul r0.z, r0.y, c0.x
					        add r2.zw, r0, r2.xyxy
					        texld r4, r2.zwzw, s0
					        dp2add r4.z, r4, r4, c1.x
					        dp2add r0.z, r4, -r4, r3.z
					        cmp r3.xyz, r0.z, r3, r4
					        add r0.y, r0.y, c1.w
					      endrep
					      mov r1.xyz, r3
					      add r1.w, r1.w, c1.w
					    endrep
					    mov oC0.xy, r1
					    mov oC0.zw, c1.x
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_20" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _VelocityTex_TexelSize;
						vec4 unused_0_2[21];
					};
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat12;
					bool u_xlatb12;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat10.y = float(0.0);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    for(int u_xlati_loop_1 = int(int(0xFFFFFFFFu)) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.x = float(u_xlati_loop_1);
					        u_xlat0.y = u_xlat2.x * _VelocityTex_TexelSize.y;
					        u_xlat2.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					        u_xlat3.xyz = u_xlat1.xyz;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat12.x = float(u_xlati_loop_2);
					            u_xlat10.x = u_xlat12.x * _VelocityTex_TexelSize.x;
					            u_xlat12.xy = u_xlat10.xy + u_xlat2.xy;
					            u_xlat4 = texture(_VelocityTex, u_xlat12.xy);
					            u_xlat4.z = dot(u_xlat4.xy, u_xlat4.xy);
					            u_xlatb10 = u_xlat3.z<u_xlat4.z;
					            u_xlat3.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : u_xlat3.xyz;
					        }
					        u_xlat1.xyz = u_xlat3.xyz;
					    }
					    SV_Target0.xy = u_xlat1.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "TILESIZE_40" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _VelocityTex;
					//   float4 _VelocityTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _VelocityTex_TexelSize c0       1
					//   _VelocityTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xw, c1.x
					    mov r1, c1.xxxz
					    rep i0
					      mul r0.y, r1.w, c0.y
					      add r2.xy, r0, v0
					      mov r3.xyz, r1
					      mov r0.y, c1.z
					      rep i0
					        mul r0.z, r0.y, c0.x
					        add r2.zw, r0, r2.xyxy
					        texld r4, r2.zwzw, s0
					        dp2add r4.z, r4, r4, c1.x
					        dp2add r0.z, r4, -r4, r3.z
					        cmp r3.xyz, r0.z, r3, r4
					        add r0.y, r0.y, c1.w
					      endrep
					      mov r1.xyz, r3
					      add r1.w, r1.w, c1.w
					    endrep
					    mov oC0.xy, r1
					    mov oC0.zw, c1.x
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "TILESIZE_40" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						vec4 _VelocityTex_TexelSize;
						vec4 unused_0_2[21];
					};
					uniform  sampler2D _VelocityTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat12;
					bool u_xlatb12;
					int u_xlati16;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat10.y = float(0.0);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    for(int u_xlati_loop_1 = int(int(0xFFFFFFFFu)) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.x = float(u_xlati_loop_1);
					        u_xlat0.y = u_xlat2.x * _VelocityTex_TexelSize.y;
					        u_xlat2.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					        u_xlat3.xyz = u_xlat1.xyz;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat12.x = float(u_xlati_loop_2);
					            u_xlat10.x = u_xlat12.x * _VelocityTex_TexelSize.x;
					            u_xlat12.xy = u_xlat10.xy + u_xlat2.xy;
					            u_xlat4 = texture(_VelocityTex, u_xlat12.xy);
					            u_xlat4.z = dot(u_xlat4.xy, u_xlat4.xy);
					            u_xlatb10 = u_xlat3.z<u_xlat4.z;
					            u_xlat3.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : u_xlat3.xyz;
					        }
					        u_xlat1.xyz = u_xlat3.xyz;
					    }
					    SV_Target0.xy = u_xlat1.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
}
}
 }
}
Fallback Off
}